<?php

namespace ContainerBhvFr3k;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getContao_Security_LoginAuthenticator_ContaoBackendService extends Contao_ManagerBundle_HttpKernel_ContaoKernelProdContainer
{
    /*
     * Gets the private 'contao.security.login_authenticator.contao_backend' shared service.
     *
     * @return \Contao\CoreBundle\Security\Authenticator\ContaoLoginAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authenticator/AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authenticator/AbstractAuthenticator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/EntryPoint/AuthenticationEntryPointInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authenticator/InteractiveAuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Security/Authenticator/ContaoLoginAuthenticator.php';
        include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Security/Http/Authenticator/TwoFactorAuthenticator.php';
        include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Security/TwoFactor/TwoFactorFirewallConfig.php';
        include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Security/Http/Authentication/AuthenticationRequiredHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Security/Http/Authentication/DefaultAuthenticationRequiredHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Security/Http/Utils/RequestDataReader.php';

        $a = ($container->privates['contao.security.authentication_success_handler'] ?? $container->load('getContao_Security_AuthenticationSuccessHandlerService'));

        if (isset($container->privates['contao.security.login_authenticator.contao_backend'])) {
            return $container->privates['contao.security.login_authenticator.contao_backend'];
        }
        $b = ($container->privates['contao.security.authentication_failure_handler'] ?? $container->load('getContao_Security_AuthenticationFailureHandlerService'));

        if (isset($container->privates['contao.security.login_authenticator.contao_backend'])) {
            return $container->privates['contao.security.login_authenticator.contao_backend'];
        }
        $c = ($container->services['contao.routing.page_finder'] ?? self::getContao_Routing_PageFinderService($container));

        if (isset($container->privates['contao.security.login_authenticator.contao_backend'])) {
            return $container->privates['contao.security.login_authenticator.contao_backend'];
        }
        $d = ($container->services['contao.routing.page_registry'] ?? self::getContao_Routing_PageRegistryService($container));

        if (isset($container->privates['contao.security.login_authenticator.contao_backend'])) {
            return $container->privates['contao.security.login_authenticator.contao_backend'];
        }
        $e = ($container->services['http_kernel'] ?? self::getHttpKernelService($container));

        if (isset($container->privates['contao.security.login_authenticator.contao_backend'])) {
            return $container->privates['contao.security.login_authenticator.contao_backend'];
        }
        $f = ($container->privates['security.http_utils'] ?? $container->load('getSecurity_HttpUtilsService'));

        if (isset($container->privates['contao.security.login_authenticator.contao_backend'])) {
            return $container->privates['contao.security.login_authenticator.contao_backend'];
        }
        $g = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['contao.security.login_authenticator.contao_backend'])) {
            return $container->privates['contao.security.login_authenticator.contao_backend'];
        }
        $h = ($container->privates['monolog.logger.security'] ?? self::getMonolog_Logger_SecurityService($container));

        if (isset($container->privates['contao.security.login_authenticator.contao_backend'])) {
            return $container->privates['contao.security.login_authenticator.contao_backend'];
        }
        $i = ($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container));
        $j = new \Scheb\TwoFactorBundle\Security\TwoFactor\TwoFactorFirewallConfig(['remember_me' => false, 'require_previous_session' => false, 'auth_code_parameter_name' => 'verify'], 'contao_backend', $f, ($container->privates['scheb_two_factor.security.request_data_reader'] ??= new \Scheb\TwoFactorBundle\Security\Http\Utils\RequestDataReader()));

        return $container->privates['contao.security.login_authenticator.contao_backend'] = new \Contao\CoreBundle\Security\Authenticator\ContaoLoginAuthenticator(($container->privates['contao.security.backend_user_provider'] ?? $container->load('getContao_Security_BackendUserProviderService')), $a, $b, ($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), ($container->privates['router.default'] ?? self::getRouter_DefaultService($container)), ($container->services['uri_signer'] ??= new \Symfony\Component\HttpFoundation\UriSigner($container->getEnv('APP_SECRET'))), $c, $i, $d, $e, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), new \Scheb\TwoFactorBundle\Security\Http\Authenticator\TwoFactorAuthenticator($j, $i, $a, $b, new \Scheb\TwoFactorBundle\Security\Http\Authentication\DefaultAuthenticationRequiredHandler($f, $j), $g, $h), ['require_previous_session' => false, 'auth_code_parameter_name' => 'verify']);
    }
}
