<?php

namespace ContainerXbKdRgj;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMessenger_Failure_SendFailedMessageToFailureTransportListenerService extends Contao_ManagerBundle_HttpKernel_ContaoKernelProdContainer
{
    /*
     * Gets the private 'messenger.failure.send_failed_message_to_failure_transport_listener' shared service.
     *
     * @return \Symfony\Component\Messenger\EventListener\SendFailedMessageToFailureTransportListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/EventListener/SendFailedMessageToFailureTransportListener.php';

        return $container->privates['messenger.failure.send_failed_message_to_failure_transport_listener'] = new \Symfony\Component\Messenger\EventListener\SendFailedMessageToFailureTransportListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'contao_failure' => ['privates', 'messenger.transport.contao_failure', 'getMessenger_Transport_ContaoFailureService', true],
            'contao_prio_high' => ['privates', 'messenger.transport.contao_failure', 'getMessenger_Transport_ContaoFailureService', true],
            'contao_prio_low' => ['privates', 'messenger.transport.contao_failure', 'getMessenger_Transport_ContaoFailureService', true],
            'contao_prio_normal' => ['privates', 'messenger.transport.contao_failure', 'getMessenger_Transport_ContaoFailureService', true],
            'sync' => ['privates', 'messenger.transport.contao_failure', 'getMessenger_Transport_ContaoFailureService', true],
        ], [
            'contao_failure' => '?',
            'contao_prio_high' => '?',
            'contao_prio_low' => '?',
            'contao_prio_normal' => '?',
            'sync' => '?',
        ]), ($container->privates['monolog.logger.messenger'] ?? $container->load('getMonolog_Logger_MessengerService')));
    }
}
