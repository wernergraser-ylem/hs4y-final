<?php

namespace ContainerXbKdRgj;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class Contao_ManagerBundle_HttpKernel_ContaoKernelProdContainer extends Container
{
    protected $targetDir;
    protected $parameters = [];
    protected \Closure $getService;

    public function __construct(private array $buildParameters = [], protected string $containerDir = __DIR__)
    {
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'contao_manager.jwt_manager' => true,
            'contao_manager.plugin_loader' => true,
            'kernel' => true,
        ];
        $this->methodMap = [
            'Codefog\\HasteBundle\\AjaxReloadManager' => 'getAjaxReloadManagerService',
            'Codefog\\HasteBundle\\EventListener\\AjaxReloadListener' => 'getAjaxReloadListenerService',
            'Contao\\CoreBundle\\Controller\\Page\\ErrorPageController' => 'getErrorPageControllerService',
            'assets.packages' => 'getAssets_PackagesService',
            'cache.security_is_granted_attribute_expression_language' => 'getCache_SecurityIsGrantedAttributeExpressionLanguageService',
            'cache.system' => 'getCache_SystemService',
            'contao.assets.assets_context' => 'getContao_Assets_AssetsContextService',
            'contao.assets.files_context' => 'getContao_Assets_FilesContextService',
            'contao.csrf.token_manager' => 'getContao_Csrf_TokenManagerService',
            'contao.fragment.registry' => 'getContao_Fragment_RegistryService',
            'contao.framework' => 'getContao_FrameworkService',
            'contao.intl.locales' => 'getContao_Intl_LocalesService',
            'contao.resource_finder' => 'getContao_ResourceFinderService',
            'contao.routing.content_url_generator' => 'getContao_Routing_ContentUrlGeneratorService',
            'contao.routing.nested_404_matcher' => 'getContao_Routing_Nested404MatcherService',
            'contao.routing.nested_matcher' => 'getContao_Routing_NestedMatcherService',
            'contao.routing.page_finder' => 'getContao_Routing_PageFinderService',
            'contao.routing.page_registry' => 'getContao_Routing_PageRegistryService',
            'contao.routing.scope_matcher' => 'getContao_Routing_ScopeMatcherService',
            'contao.security.token_checker' => 'getContao_Security_TokenCheckerService',
            'contao.twig.extension' => 'getContao_Twig_ExtensionService',
            'contao.twig.filesystem_loader' => 'getContao_Twig_FilesystemLoaderService',
            'contao_news.controller.page.news_feed' => 'getContaoNews_Controller_Page_NewsFeedService',
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'event_dispatcher' => 'getEventDispatcherService',
            'fos_http_cache.cache_manager' => 'getFosHttpCache_CacheManagerService',
            'fos_http_cache.http.symfony_response_tagger' => 'getFosHttpCache_Http_SymfonyResponseTaggerService',
            'fos_http_cache.proxy_client.symfony' => 'getFosHttpCache_ProxyClient_SymfonyService',
            'http_kernel' => 'getHttpKernelService',
            'monolog.logger.contao.error' => 'getMonolog_Logger_Contao_ErrorService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
            'security.authentication.trust_resolver' => 'getSecurity_Authentication_TrustResolverService',
            'security.authorization_checker' => 'getSecurity_AuthorizationCheckerService',
            'security.firewall.map' => 'getSecurity_Firewall_MapService',
            'security.helper' => 'getSecurity_HelperService',
            'security.logout_url_generator' => 'getSecurity_LogoutUrlGeneratorService',
            'security.token_storage' => 'getSecurity_TokenStorageService',
            'translator' => 'getTranslatorService',
            'twig' => 'getTwigService',
            'uri_signer' => 'getUriSignerService',
        ];
        $this->fileMap = [
            'App\\EventListener\\ClientHubListener' => 'getClientHubListenerService',
            'App\\EventListener\\FormTemplateErrorListener' => 'getFormTemplateErrorListenerService',
            'App\\EventListener\\ParseBackendTemplateListener' => 'getParseBackendTemplateListenerService',
            'Codefog\\HasteBundle\\DcaRelationsManager' => 'getDcaRelationsManagerService',
            'Codefog\\HasteBundle\\DoctrineOrmHelper' => 'getDoctrineOrmHelperService',
            'Codefog\\HasteBundle\\EventListener\\DcaAjaxOperationsListener' => 'getDcaAjaxOperationsListenerService',
            'Codefog\\HasteBundle\\EventListener\\InsertTagsListener' => 'getInsertTagsListenerService',
            'Codefog\\HasteBundle\\Formatter' => 'getFormatterService',
            'Codefog\\HasteBundle\\StringParser' => 'getStringParserService',
            'Codefog\\HasteBundle\\UndoManager' => 'getUndoManagerService',
            'Codefog\\HasteBundle\\UrlParser' => 'getUrlParserService',
            'Contao\\CoreBundle\\Controller\\BackendController' => 'getBackendControllerService',
            'Contao\\CoreBundle\\Controller\\BackendCsvImportController' => 'getBackendCsvImportControllerService',
            'Contao\\CoreBundle\\Controller\\BackendPreviewController' => 'getBackendPreviewControllerService',
            'Contao\\CoreBundle\\Controller\\BackendPreviewSwitchController' => 'getBackendPreviewSwitchControllerService',
            'Contao\\CoreBundle\\Controller\\CaptchaController' => 'getCaptchaControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\AccordionController' => 'getAccordionControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\CodeController' => 'getCodeControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\DescriptionListController' => 'getDescriptionListControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\DownloadsController' => 'getDownloadsControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\ElementGroupController' => 'getElementGroupControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\HeadlineController' => 'getHeadlineControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\HtmlController' => 'getHtmlControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\HyperlinkController' => 'getHyperlinkControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\ImagesController' => 'getImagesControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\ListController' => 'getListControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\MarkdownController' => 'getMarkdownControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\PlayerController' => 'getPlayerControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\SwiperController' => 'getSwiperControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\TableController' => 'getTableControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\TeaserController' => 'getTeaserControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\TemplateController' => 'getTemplateControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\TextController' => 'getTextControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\ToplinkController' => 'getToplinkControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\UnfilteredHtmlController' => 'getUnfilteredHtmlControllerService',
            'Contao\\CoreBundle\\Controller\\ContentElement\\VideoController' => 'getVideoControllerService',
            'Contao\\CoreBundle\\Controller\\CspReporterController' => 'getCspReporterControllerService',
            'Contao\\CoreBundle\\Controller\\FaviconController' => 'getFaviconControllerService',
            'Contao\\CoreBundle\\Controller\\FrontendController' => 'getFrontendControllerService',
            'Contao\\CoreBundle\\Controller\\FrontendModule\\FeedReaderController' => 'getFeedReaderControllerService',
            'Contao\\CoreBundle\\Controller\\FrontendModule\\RootPageDependentModulesController' => 'getRootPageDependentModulesControllerService',
            'Contao\\CoreBundle\\Controller\\FrontendModule\\TemplateController' => 'getTemplateController2Service',
            'Contao\\CoreBundle\\Controller\\FrontendModule\\TwoFactorController' => 'getTwoFactorControllerService',
            'Contao\\CoreBundle\\Controller\\FrontendModule\\UnfilteredHtmlController' => 'getUnfilteredHtmlController2Service',
            'Contao\\CoreBundle\\Controller\\ImagesController' => 'getImagesController2Service',
            'Contao\\CoreBundle\\Controller\\InsertTagsController' => 'getInsertTagsControllerService',
            'Contao\\CoreBundle\\Controller\\Page\\RedirectPageController' => 'getRedirectPageControllerService',
            'Contao\\CoreBundle\\Controller\\Page\\RootPageController' => 'getRootPageControllerService',
            'Contao\\CoreBundle\\Controller\\PreviewLinkController' => 'getPreviewLinkControllerService',
            'Contao\\CoreBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Contao\\CoreBundle\\Controller\\RobotsTxtController' => 'getRobotsTxtControllerService',
            'Contao\\CoreBundle\\Controller\\SitemapController' => 'getSitemapControllerService',
            'Contao\\ManagerBundle\\Controller\\DebugController' => 'getDebugControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectController2Service',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateController3Service',
            'Terminal42\\ConditionalformfieldsBundle\\EventListener\\ConditionValidationListener' => 'getConditionValidationListenerService',
            'Terminal42\\ConditionalformfieldsBundle\\EventListener\\FormListener' => 'getFormListenerService',
            'Terminal42\\MultipageFormsBundle\\Controller\\FrontendModule\\StepsController' => 'getStepsControllerService',
            'Terminal42\\MultipageFormsBundle\\EventListener\\CompileFormFieldsListener' => 'getCompileFormFieldsListenerService',
            'Terminal42\\MultipageFormsBundle\\EventListener\\InsertTagsListener' => 'getInsertTagsListener2Service',
            'Terminal42\\MultipageFormsBundle\\EventListener\\LoadFormFieldListener' => 'getLoadFormFieldListenerService',
            'Terminal42\\MultipageFormsBundle\\EventListener\\PrepareFomDataListener' => 'getPrepareFomDataListenerService',
            'Terminal42\\MultipageFormsBundle\\FormManagerFactory' => 'getFormManagerFactoryService',
            'cache.app' => 'getCache_AppService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.rate_limiter' => 'getCache_RateLimiterService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'container.get_routing_condition_service' => 'getContainer_GetRoutingConditionServiceService',
            'contao.cache.clearer' => 'getContao_Cache_ClearerService',
            'contao.cache.entity_tags' => 'getContao_Cache_EntityTagsService',
            'contao.cache.warmer' => 'getContao_Cache_WarmerService',
            'contao.command.install' => 'getContao_Command_InstallService',
            'contao.command.symlinks' => 'getContao_Command_SymlinksService',
            'contao.crawl.escargot.factory' => 'getContao_Crawl_Escargot_FactoryService',
            'contao.cron' => 'getContao_CronService',
            'contao.csp.wysiwyg_style_processor' => 'getContao_Csp_WysiwygStyleProcessorService',
            'contao.data_container.dca_url_analyzer' => 'getContao_DataContainer_DcaUrlAnalyzerService',
            'contao.data_container.record_labeler' => 'getContao_DataContainer_RecordLabelerService',
            'contao.doctrine.schema_provider' => 'getContao_Doctrine_SchemaProviderService',
            'contao.filesystem.dbafs_manager' => 'getContao_Filesystem_DbafsManagerService',
            'contao.fragment._contao.content_element.accordion' => 'getContao_Fragment_Contao_ContentElement_AccordionService',
            'contao.fragment._contao.content_element.code' => 'getContao_Fragment_Contao_ContentElement_CodeService',
            'contao.fragment._contao.content_element.description_list' => 'getContao_Fragment_Contao_ContentElement_DescriptionListService',
            'contao.fragment._contao.content_element.download' => 'getContao_Fragment_Contao_ContentElement_DownloadService',
            'contao.fragment._contao.content_element.downloads' => 'getContao_Fragment_Contao_ContentElement_DownloadsService',
            'contao.fragment._contao.content_element.element_group' => 'getContao_Fragment_Contao_ContentElement_ElementGroupService',
            'contao.fragment._contao.content_element.gallery' => 'getContao_Fragment_Contao_ContentElement_GalleryService',
            'contao.fragment._contao.content_element.headline' => 'getContao_Fragment_Contao_ContentElement_HeadlineService',
            'contao.fragment._contao.content_element.html' => 'getContao_Fragment_Contao_ContentElement_HtmlService',
            'contao.fragment._contao.content_element.hyperlink' => 'getContao_Fragment_Contao_ContentElement_HyperlinkService',
            'contao.fragment._contao.content_element.image' => 'getContao_Fragment_Contao_ContentElement_ImageService',
            'contao.fragment._contao.content_element.list' => 'getContao_Fragment_Contao_ContentElement_ListService',
            'contao.fragment._contao.content_element.markdown' => 'getContao_Fragment_Contao_ContentElement_MarkdownService',
            'contao.fragment._contao.content_element.player' => 'getContao_Fragment_Contao_ContentElement_PlayerService',
            'contao.fragment._contao.content_element.swiper' => 'getContao_Fragment_Contao_ContentElement_SwiperService',
            'contao.fragment._contao.content_element.table' => 'getContao_Fragment_Contao_ContentElement_TableService',
            'contao.fragment._contao.content_element.teaser' => 'getContao_Fragment_Contao_ContentElement_TeaserService',
            'contao.fragment._contao.content_element.template' => 'getContao_Fragment_Contao_ContentElement_TemplateService',
            'contao.fragment._contao.content_element.text' => 'getContao_Fragment_Contao_ContentElement_TextService',
            'contao.fragment._contao.content_element.toplink' => 'getContao_Fragment_Contao_ContentElement_ToplinkService',
            'contao.fragment._contao.content_element.unfiltered_html' => 'getContao_Fragment_Contao_ContentElement_UnfilteredHtmlService',
            'contao.fragment._contao.content_element.vimeo' => 'getContao_Fragment_Contao_ContentElement_VimeoService',
            'contao.fragment._contao.content_element.youtube' => 'getContao_Fragment_Contao_ContentElement_YoutubeService',
            'contao.fragment._contao.frontend_module.feed_reader' => 'getContao_Fragment_Contao_FrontendModule_FeedReaderService',
            'contao.fragment._contao.frontend_module.mp_form_steps' => 'getContao_Fragment_Contao_FrontendModule_MpFormStepsService',
            'contao.fragment._contao.frontend_module.root_page_dependent_modules' => 'getContao_Fragment_Contao_FrontendModule_RootPageDependentModulesService',
            'contao.fragment._contao.frontend_module.template' => 'getContao_Fragment_Contao_FrontendModule_TemplateService',
            'contao.fragment._contao.frontend_module.two_factor' => 'getContao_Fragment_Contao_FrontendModule_TwoFactorService',
            'contao.fragment._contao.frontend_module.unfiltered_html' => 'getContao_Fragment_Contao_FrontendModule_UnfilteredHtmlService',
            'contao.fragment.compositor' => 'getContao_Fragment_CompositorService',
            'contao.image.factory' => 'getContao_Image_FactoryService',
            'contao.image.imagine' => 'getContao_Image_ImagineService',
            'contao.image.imagine_svg' => 'getContao_Image_ImagineSvgService',
            'contao.image.metadata' => 'getContao_Image_MetadataService',
            'contao.image.picture_factory' => 'getContao_Image_PictureFactoryService',
            'contao.image.picture_generator' => 'getContao_Image_PictureGeneratorService',
            'contao.image.preview_factory' => 'getContao_Image_PreviewFactoryService',
            'contao.image.resizer' => 'getContao_Image_ResizerService',
            'contao.image.sizes' => 'getContao_Image_SizesService',
            'contao.image.studio' => 'getContao_Image_StudioService',
            'contao.image.studio.figure_renderer' => 'getContao_Image_Studio_FigureRendererService',
            'contao.insert_tag.parser' => 'getContao_InsertTag_ParserService',
            'contao.intl.countries' => 'getContao_Intl_CountriesService',
            'contao.listener.administrator_email' => 'getContao_Listener_AdministratorEmailService',
            'contao.listener.data_container.accordion' => 'getContao_Listener_DataContainer_AccordionService',
            'contao.listener.data_container.backend_favorites' => 'getContao_Listener_DataContainer_BackendFavoritesService',
            'contao.listener.data_container.content_composition' => 'getContao_Listener_DataContainer_ContentCompositionService',
            'contao.listener.data_container.content_element_type' => 'getContao_Listener_DataContainer_ContentElementTypeService',
            'contao.listener.data_container.csp_save_callback' => 'getContao_Listener_DataContainer_CspSaveCallbackService',
            'contao.listener.data_container.cte_alias' => 'getContao_Listener_DataContainer_CteAliasService',
            'contao.listener.data_container.default_global_operations' => 'getContao_Listener_DataContainer_DefaultGlobalOperationsService',
            'contao.listener.data_container.default_operations' => 'getContao_Listener_DataContainer_DefaultOperationsService',
            'contao.listener.data_container.description_list_label' => 'getContao_Listener_DataContainer_DescriptionListLabelService',
            'contao.listener.data_container.disable_app_configured_settings' => 'getContao_Listener_DataContainer_DisableAppConfiguredSettingsService',
            'contao.listener.data_container.disable_canonical_fields' => 'getContao_Listener_DataContainer_DisableCanonicalFieldsService',
            'contao.listener.data_container.enum_options' => 'getContao_Listener_DataContainer_EnumOptionsService',
            'contao.listener.data_container.frontend_module_permissions' => 'getContao_Listener_DataContainer_FrontendModulePermissionsService',
            'contao.listener.data_container.layout_options' => 'getContao_Listener_DataContainer_LayoutOptionsService',
            'contao.listener.data_container.legacy_gallery_palette' => 'getContao_Listener_DataContainer_LegacyGalleryPaletteService',
            'contao.listener.data_container.logout_page_redirect' => 'getContao_Listener_DataContainer_LogoutPageRedirectService',
            'contao.listener.data_container.member_groups' => 'getContao_Listener_DataContainer_MemberGroupsService',
            'contao.listener.data_container.page_routing' => 'getContao_Listener_DataContainer_PageRoutingService',
            'contao.listener.data_container.page_search' => 'getContao_Listener_DataContainer_PageSearchService',
            'contao.listener.data_container.page_type_options' => 'getContao_Listener_DataContainer_PageTypeOptionsService',
            'contao.listener.data_container.page_url' => 'getContao_Listener_DataContainer_PageUrlService',
            'contao.listener.data_container.page_use_ssl_default' => 'getContao_Listener_DataContainer_PageUseSslDefaultService',
            'contao.listener.data_container.personal_data_password' => 'getContao_Listener_DataContainer_PersonalDataPasswordService',
            'contao.listener.data_container.preview_link' => 'getContao_Listener_DataContainer_PreviewLinkService',
            'contao.listener.data_container.record_preview' => 'getContao_Listener_DataContainer_RecordPreviewService',
            'contao.listener.data_container.reset_custom_template' => 'getContao_Listener_DataContainer_ResetCustomTemplateService',
            'contao.listener.data_container.start_stop_validation' => 'getContao_Listener_DataContainer_StartStopValidationService',
            'contao.listener.data_container.template_options' => 'getContao_Listener_DataContainer_TemplateOptionsService',
            'contao.listener.data_container.theme_operations' => 'getContao_Listener_DataContainer_ThemeOperationsService',
            'contao.listener.data_container.theme_templates' => 'getContao_Listener_DataContainer_ThemeTemplatesService',
            'contao.listener.data_container.undo.jump_to_parent_operation' => 'getContao_Listener_DataContainer_Undo_JumpToParentOperationService',
            'contao.listener.data_container.undo.label' => 'getContao_Listener_DataContainer_Undo_LabelService',
            'contao.listener.data_container.undo_operation' => 'getContao_Listener_DataContainer_UndoOperationService',
            'contao.listener.data_container.user_admin_field' => 'getContao_Listener_DataContainer_UserAdminFieldService',
            'contao.listener.data_container.validate_custom_rgxp' => 'getContao_Listener_DataContainer_ValidateCustomRgxpService',
            'contao.listener.data_container_callback' => 'getContao_Listener_DataContainerCallbackService',
            'contao.listener.image_size_options' => 'getContao_Listener_ImageSizeOptionsService',
            'contao.listener.jBdVCET' => 'getContao_Listener_JBdVCETService',
            'contao.listener.nPG_tnL' => 'getContao_Listener_NPGTnLService',
            'contao.listener.widget.custom_rgxp' => 'getContao_Listener_Widget_CustomRgxpService',
            'contao.listener.widget.http_url' => 'getContao_Listener_Widget_HttpUrlService',
            'contao.listener.widget.root_page_dependent_select' => 'getContao_Listener_Widget_RootPageDependentSelectService',
            'contao.mailer.available_transports' => 'getContao_Mailer_AvailableTransportsService',
            'contao.menu.backend_builder' => 'getContao_Menu_BackendBuilderService',
            'contao.menu.renderer' => 'getContao_Menu_RendererService',
            'contao.migration.command_compiler' => 'getContao_Migration_CommandCompilerService',
            'contao.opt_in' => 'getContao_OptInService',
            'contao.picker.builder' => 'getContao_Picker_BuilderService',
            'contao.rate_limit.member_password_factory' => 'getContao_RateLimit_MemberPasswordFactoryService',
            'contao.resource_locator' => 'getContao_ResourceLocatorService',
            'contao.routing.response_context_accessor' => 'getContao_Routing_ResponseContextAccessorService',
            'contao.routing.response_context_factory' => 'getContao_Routing_ResponseContextFactoryService',
            'contao.search.indexer' => 'getContao_Search_IndexerService',
            'contao.security.frontend_preview_authenticator' => 'getContao_Security_FrontendPreviewAuthenticatorService',
            'contao.security.two_factor.authenticator' => 'getContao_Security_TwoFactor_AuthenticatorService',
            'contao.security.two_factor.backup_code_manager' => 'getContao_Security_TwoFactor_BackupCodeManagerService',
            'contao.security.two_factor.trusted_device_manager' => 'getContao_Security_TwoFactor_TrustedDeviceManagerService',
            'contao.slug' => 'getContao_SlugService',
            'contao.slug.generator' => 'getContao_Slug_GeneratorService',
            'contao.slug.valid_characters' => 'getContao_Slug_ValidCharactersService',
            'contao.string.html_decoder' => 'getContao_String_HtmlDecoderService',
            'contao.string.simple_token_parser' => 'getContao_String_SimpleTokenParserService',
            'contao.twig.inspector' => 'getContao_Twig_InspectorService',
            'contao.twig.interop.context_factory' => 'getContao_Twig_Interop_ContextFactoryService',
            'contao_calendar.listener.data_container.event_search' => 'getContaoCalendar_Listener_DataContainer_EventSearchService',
            'contao_calendar.listener.data_container.start_stop_validation' => 'getContaoCalendar_Listener_DataContainer_StartStopValidationService',
            'contao_calendar.listener.generate_page' => 'getContaoCalendar_Listener_GeneratePageService',
            'contao_comments.listener.data_container.add_comment_fields' => 'getContaoComments_Listener_DataContainer_AddCommentFieldsService',
            'contao_faq.listener.data_container.faq_search' => 'getContaoFaq_Listener_DataContainer_FaqSearchService',
            'contao_manager.routing.route_loader' => 'getContaoManager_Routing_RouteLoaderService',
            'contao_news.listener.data_container.layout_feed_options' => 'getContaoNews_Listener_DataContainer_LayoutFeedOptionsService',
            'contao_news.listener.data_container.news_search' => 'getContaoNews_Listener_DataContainer_NewsSearchService',
            'contao_news.listener.data_container.page' => 'getContaoNews_Listener_DataContainer_PageService',
            'contao_news.listener.data_container.start_stop_validation' => 'getContaoNews_Listener_DataContainer_StartStopValidationService',
            'contao_news.listener.generate_page' => 'getContaoNews_Listener_GeneratePageService',
            'contao_newsletter.listener.newsletter_recipients_edit_buttons' => 'getContaoNewsletter_Listener_NewsletterRecipientsEditButtonsService',
            'debug.error_handler_configurator' => 'getDebug_ErrorHandlerConfiguratorService',
            'doctrine' => 'getDoctrineService',
            'error_controller' => 'getErrorControllerService',
            'fragment.handler' => 'getFragment_HandlerService',
            'knp_menu.factory' => 'getKnpMenu_FactoryService',
            'knp_menu.matcher' => 'getKnpMenu_MatcherService',
            'mailer' => 'getMailerService',
            'messenger.default_bus' => 'getMessenger_DefaultBusService',
            'monolog.logger.contao' => 'getMonolog_Logger_ContaoService',
            'monolog.logger.contao.access' => 'getMonolog_Logger_Contao_AccessService',
            'monolog.logger.contao.configuration' => 'getMonolog_Logger_Contao_ConfigurationService',
            'monolog.logger.contao.cron' => 'getMonolog_Logger_Contao_CronService',
            'monolog.logger.contao.email' => 'getMonolog_Logger_Contao_EmailService',
            'monolog.logger.contao.files' => 'getMonolog_Logger_Contao_FilesService',
            'monolog.logger.contao.forms' => 'getMonolog_Logger_Contao_FormsService',
            'monolog.logger.contao.general' => 'getMonolog_Logger_Contao_GeneralService',
            'monolog.logger.deprecation' => 'getMonolog_Logger_DeprecationService',
            'nelmio_security.csp_reporter_controller' => 'getNelmioSecurity_CspReporterControllerService',
            'routing.loader' => 'getRouting_LoaderService',
            'scheb_two_factor.firewall_context' => 'getSchebTwoFactor_FirewallContextService',
            'scheb_two_factor.form_controller' => 'getSchebTwoFactor_FormControllerService',
            'security.authentication_utils' => 'getSecurity_AuthenticationUtilsService',
            'security.password_hasher_factory' => 'getSecurity_PasswordHasherFactoryService',
            'services_resetter' => 'getServicesResetterService',
        ];
        $this->aliases = [
            'FOS\\HttpCacheBundle\\CacheManager' => 'fos_http_cache.cache_manager',
            'FOS\\HttpCacheBundle\\Http\\SymfonyResponseTagger' => 'fos_http_cache.http.symfony_response_tagger',
            'FOS\\HttpCache\\ResponseTagger' => 'fos_http_cache.http.symfony_response_tagger',
            'Terminal42\\MultipageFormsBundle\\FormManagerFactoryInterface' => 'Terminal42\\MultipageFormsBundle\\FormManagerFactory',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
        ];

        $this->privates['service_container'] = static function ($container) {
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/event-manager/src/EventManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/doctrine-bridge/ContainerAwareEventManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/container/src/ContainerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ServiceProviderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ServiceLocatorTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ServiceLocator.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Connection.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/ConnectionFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Configuration.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Schema/SchemaManagerFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Schema/LegacySchemaManagerFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Tools/DsnParser.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Configuration.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/MappingDriver.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Mapping/MappingDriver.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/MappingDriverChain.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/Driver/CompatibilityAnnotationDriver.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/ColocatedMappingDriver.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/Driver/ReflectionBasedDriver.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/Driver/AttributeDriver.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/NamingStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/DefaultNamingStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/QuoteStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Internal/SQLResultCasing.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/DefaultQuoteStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/TypedFieldMapper.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/DefaultTypedFieldMapper.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/EntityListenerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Mapping/EntityListenerServiceResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Mapping/ContainerEntityListenerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Repository/RepositoryFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Repository/RepositoryFactoryCompatibility.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Repository/ContainerRepositoryFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/ManagerConfigurator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventSubscriberInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ResponseListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/LocaleListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ValidateRequestListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ErrorListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/CacheAttributeListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/FrozenParameterBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/event-dispatcher/src/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher-contracts/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpKernelInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/TerminableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpKernel.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/RequestStack.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/UrlHelper.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/UriSigner.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/config/ConfigCacheFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/config/ResourceCheckerConfigCacheFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/LocaleAwareListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/cache/src/CacheItemPoolInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/AdapterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/CacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/src/LoggerAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ResetInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/ResettableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/src/LoggerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/AbstractAdapterTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/CacheTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/ContractsTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/AbstractAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Marshaller/MarshallerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Marshaller/DefaultMarshaller.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Packages.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/PackageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Package.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/PathPackage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/VersionStrategy/VersionStrategyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/VersionStrategy/EmptyVersionStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Context/ContextInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Context/RequestStackContext.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/VersionStrategy/JsonManifestVersionStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/VersionStrategy/StaticVersionStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client-contracts/HttpClientInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client/HttpClient.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/src/LoggerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/ResettableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Logger.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client/DecoratorTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client/UriTemplateHttpClient.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/SurrogateInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/AbstractSurrogate.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/Esi.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/SurrogateListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/FragmentListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/TranslatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/TranslatorBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/LocaleAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/WarmableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/MessageFormatterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/IntlFormatterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/MessageFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/TranslatorTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/IdentityTranslator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/LocaleSwitcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/DebugHandlersListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/error-handler/ErrorRenderer/FileLinkFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/stopwatch/Stopwatch.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RequestContextAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/UrlMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Generator/UrlGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RouterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/RequestMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Router.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ServiceSubscriberInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Routing/Router.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RequestContext.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/expression-language/ExpressionFunctionProviderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/ExpressionLanguageProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/RouterListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/PruneableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/FilesystemCommonTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/FilesystemTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/FilesystemAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/AbstractSessionListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/SessionListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenGenerator/TokenGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenGenerator/UriSafeTokenGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/HandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/Handler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ActivationStrategyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/FingersCrossed/HttpCodeActivationStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ErrorLevelActivationStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/ProcessorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/PsrLogMessageProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/CompatibilityHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/ConsoleHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/CompatibilityProcessingHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/Http/RuleMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/Http/RuleMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/RequestMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/Http/RequestMatcher/UnsafeRequestMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/Http/ResponseMatcher/ResponseMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/Http/ResponseMatcher/NonErrorResponseMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/ProxyClient/ProxyClient.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/ProxyClient/HttpProxyClient.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/ProxyClient/Invalidation/PurgeCapable.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/ProxyClient/Invalidation/RefreshCapable.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/ProxyClient/Invalidation/TagCapable.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/ProxyClient/Invalidation/ClearCapable.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/ProxyClient/Symfony.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/ProxyClient/Dispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/SymfonyCache/KernelDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/CacheInvalidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/CacheManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/ResponseTagger.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/Http/SymfonyResponseTagger.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/TagHeaderFormatter/TagHeaderFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/TagHeaderFormatter/TagHeaderParser.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/TagHeaderFormatter/MaxHeaderValueLengthFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache/src/TagHeaderFormatter/CommaSeparatedTagHeaderFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/EventListener/AbstractRuleListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/EventListener/TagListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/Http/RequestMatcher/CacheableRequestMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/Http/ResponseMatcher/CacheableResponseMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/EventListener/Php8AttributesListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/cors-bundle/EventListener/CorsListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/cors-bundle/Options/ResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/cors-bundle/Options/Resolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/cors-bundle/Options/ProviderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/cors-bundle/Options/ConfigProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Cors/WebsiteRootsConfigProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/cors-bundle/EventListener/CacheableResponseVaryListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/EventListener/AbstractContentTypeRestrictableListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/EventListener/ClickjackingListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/EventListener/ContentSecurityPolicyListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/ContentSecurityPolicy/DirectiveSetBuilderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/ContentSecurityPolicy/ConfigurationDirectiveSetBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/ContentSecurityPolicy/PolicyManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/ContentSecurityPolicy/NonceGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/ContentSecurityPolicy/NonceGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/ContentSecurityPolicy/ShaComputerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/ContentSecurityPolicy/ShaComputer.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/EventListener/XssProtectionListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/EventListener/ContentTypeListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/EventListener/ReferrerPolicyListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Security/TwoFactor/Provider/TwoFactorProviderRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Security/TwoFactor/Provider/PreparationRecorderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Security/TwoFactor/Provider/TokenPreparationRecorder.php';
            include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-trusted-device/Security/TwoFactor/Trusted/TrustedDeviceTokenEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-trusted-device/Security/TwoFactor/Trusted/JwtTokenEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Configuration.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer/Hmac.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer/Hmac/Sha256.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer/Key.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer/Key/InMemory.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Cache/CacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Cache/RemovableCacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Cache/FilesystemCache.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/ExtensionInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/LastModifiedExtensionInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/AbstractExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/CoreExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/EscaperExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/OptimizerExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/StagingExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/ExtensionSet.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Template.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/TemplateWrapper.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Environment.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/ChainLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/FilesystemLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Twig/Loader/FailTolerantFilesystemLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/CsrfExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/TranslationExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/AssetExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/CodeExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/RoutingExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/YamlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/StopwatchExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/ExpressionExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HtmlSanitizerExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HttpKernelExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HttpFoundationExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/LogoutUrlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/SecurityExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Impersonate/ImpersonateUrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Twig/DoctrineExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/Twig/CacheTagExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/Twig/NelmioCSPTwigExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/string-extra/StringExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/knplabs/knp-menu/src/Knp/Menu/Twig/MenuExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/src/Twig/Extension/TimeExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/AppVariable.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/RuntimeLoader/RuntimeLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/RuntimeLoader/ContainerRuntimeLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/DependencyInjection/Configurator/EnvironmentConfigurator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/AuthorizationCheckerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/AuthorizationChecker.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authentication/Token/Storage/TokenStorageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authentication/Token/Storage/UsageTrackingTokenStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authentication/Token/Storage/TokenStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Security.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/AccessDecisionManagerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/AccessDecisionManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/Strategy/AccessDecisionStrategyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Security/Authentication/ContaoStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/Strategy/AffirmativeStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/Strategy/PriorityStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/Voter/VoterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/Voter/CacheableVoterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/Voter/RoleVoter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/EventListener/FirewallListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/FirewallMapInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security/FirewallMap.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Logout/LogoutUrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/EventListener/IsGrantedAttributeListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/expression-language/ExpressionLanguage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/FirewallListenerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/AbstractListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/ContextListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Security/TwoFactor/Provider/TwoFactorProviderPreparationListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/RememberMe/ResponseListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/AbstractController.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Controller/AbstractController.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Page/ContentCompositionInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Controller/Page/ErrorPageController.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/BackendLocaleListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/BackendNoindexListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/BackendPreviewRedirectListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/BackendRebuildCacheMessageListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/ClearSessionDataListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/CsrfTokenCookieSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/InsecureInstallationListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/InterestCohortListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/LocaleSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/MakeBackendResponseUncacheableListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/MakeResponsePrivateListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/MergeHttpHeadersListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/PageAccessListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/PageTrailCacheTagsListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/PreviewAuthenticationListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/PreviewToolbarListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/RefererIdListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/RequestTokenListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Util/TargetPathTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/Security/TwoFactorFrontendListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/ServiceUnavailableListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/StoreRefererListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/SubrequestCacheSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/TransportSecurityHeaderListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/EventListener/UserSessionListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Twig/Loader/AutoRefreshTemplateHierarchyListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Asset/ContaoContext.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ControllerResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/HttpKernel/ControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ContainerControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Csp/CspParser.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/CsrfTokenManagerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/CsrfTokenManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Csrf/ContaoCsrfTokenManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenStorage/TokenStorageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Csrf/MemoryTokenStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Fragment/FragmentRegistryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Fragment/FragmentRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Fragment/FragmentConfig.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Framework/ContaoFramework.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Intl/Locales.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Monolog/ContaoTableHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Monolog/ContaoTableProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Config/ResourceFinderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Config/ResourceFinder.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Matcher/BackendMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/ContentUrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Matcher/FrontendMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/NestedMatcher/RouteFilterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Matcher/DomainFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Matcher/PublishedFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/NestedMatcher/NestedMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Matcher/LanguageFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/PageFinder.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Page/PageRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Page/RouteConfig.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/ResponseContext/Csp/CspHandlerFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/RouteProviderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/AbstractPageRouteProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Route404Provider.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/Candidates/CandidatesInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Candidates/AbstractCandidates.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Candidates/LocaleCandidates.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/RouteProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Candidates/PageCandidates.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/ScopeMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/UrlMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/RedirectableUrlMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/RedirectableUrlMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/NestedMatcher/FinalMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Matcher/UrlMatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Security/Authentication/Token/TokenChecker.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/GlobalsInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Twig/Extension/ContaoExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Twig/Global/ContaoVariable.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Twig/Loader/ContaoFilesystemLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Twig/Loader/TemplateLocator.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Twig/Loader/ThemeNamespace.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/manager-bundle/src/Monolog/RequestProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/codefog/contao-haste/src/AjaxReloadManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/codefog/contao-haste/src/EventListener/AjaxReloadListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Page/DynamicRouteInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/news-bundle/src/Controller/Page/NewsFeedController.php';
            include_once \dirname(__DIR__, 4).'/vendor/debril/feed-io/src/FeedIo/SpecificationInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/debril/feed-io/src/FeedIo/Specification.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/ChainRouterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/ChainRouter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/VersatileGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/ChainedRouterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/Enhancer/RouteEnhancerTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/DynamicRouter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Generator/ConfigurableRequirementsInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Generator/UrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/PageUrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony-cmf/routing/src/Enhancer/RouteEnhancerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Routing/Enhancer/InputEnhancer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authentication/AuthenticationTrustResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Security/Authentication/AuthenticationTrustResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authentication/AuthenticationTrustResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Monolog/SystemLogger.php';
        };
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function load($file, $lazyLoad = true): mixed
    {
        if (class_exists($class = __NAMESPACE__.'\\'.$file, false)) {
            return $class::do($this, $lazyLoad);
        }

        if ('.' === $file[-4]) {
            $class = substr($class, 0, -4);
        } else {
            $file .= '.php';
        }

        $service = require $this->containerDir.\DIRECTORY_SEPARATOR.$file;

        return class_exists($class, false) ? $class::do($this, $lazyLoad) : $service;
    }

    protected function createProxy($class, \Closure $factory)
    {
        class_exists($class, false) || require __DIR__.'/'.$class.'.php';

        return $factory();
    }

    /*
     * Gets the public 'Codefog\HasteBundle\AjaxReloadManager' shared autowired service.
     *
     * @return \Codefog\HasteBundle\AjaxReloadManager
     */
    protected static function getAjaxReloadManagerService($container)
    {
        return $container->services['Codefog\\HasteBundle\\AjaxReloadManager'] = new \Codefog\HasteBundle\AjaxReloadManager();
    }

    /*
     * Gets the public 'Codefog\HasteBundle\EventListener\AjaxReloadListener' shared autowired service.
     *
     * @return \Codefog\HasteBundle\EventListener\AjaxReloadListener
     */
    protected static function getAjaxReloadListenerService($container)
    {
        return $container->services['Codefog\\HasteBundle\\EventListener\\AjaxReloadListener'] = new \Codefog\HasteBundle\EventListener\AjaxReloadListener(($container->services['Codefog\\HasteBundle\\AjaxReloadManager'] ??= new \Codefog\HasteBundle\AjaxReloadManager()), ($container->services['assets.packages'] ?? self::getAssets_PackagesService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)));
    }

    /*
     * Gets the public 'Contao\CoreBundle\Controller\Page\ErrorPageController' shared service.
     *
     * @return \Contao\CoreBundle\Controller\Page\ErrorPageController
     */
    protected static function getErrorPageControllerService($container)
    {
        $container->services['Contao\\CoreBundle\\Controller\\Page\\ErrorPageController'] = $instance = new \Contao\CoreBundle\Controller\Page\ErrorPageController(($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)));

        $instance->setContainer(($container->privates['.service_locator.8pXkOyT'] ?? self::get_ServiceLocator_8pXkOyTService($container))->withContext('Contao\\CoreBundle\\Controller\\Page\\ErrorPageController', $container));

        return $instance;
    }

    /*
     * Gets the public 'assets.packages' shared service.
     *
     * @return \Symfony\Component\Asset\Packages
     */
    protected static function getAssets_PackagesService($container)
    {
        $a = new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy();
        $b = ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container));

        $container->services['assets.packages'] = $instance = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', $a, new \Symfony\Component\Asset\Context\RequestStackContext(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $b->getBaseUrl(), $b->isSecure())), new RewindableGenerator(fn () => new \EmptyIterator(), 0));

        $c = ($container->privates['http_client.uri_template'] ?? self::getHttpClient_UriTemplateService($container));
        $d = ($container->services['contao.assets.assets_context'] ?? self::getContao_Assets_AssetsContextService($container));

        $instance->addPackage('contao_core', new \Symfony\Component\Asset\PathPackage('bundles/contaocore', new \Symfony\Component\Asset\VersionStrategy\JsonManifestVersionStrategy((\dirname(__DIR__, 4).'/vendor/contao/core-bundle/public/manifest.json'), $c, false), $d));
        $instance->addPackage('system/themes/flexible', new \Symfony\Component\Asset\PathPackage('system/themes/flexible', new \Symfony\Component\Asset\VersionStrategy\JsonManifestVersionStrategy((\dirname(__DIR__, 4).'/vendor/contao/core-bundle/contao/themes/flexible/manifest.json'), $c, false), $d));
        $instance->addPackage('terminal42_conditionalformfields', new \Symfony\Component\Asset\PathPackage('bundles/terminal42conditionalformfields', $a, $d));
        $instance->addPackage('contao_faq', new \Symfony\Component\Asset\PathPackage('bundles/contaofaq', $a, $d));
        $instance->addPackage('codefog_haste', new \Symfony\Component\Asset\PathPackage('bundles/codefoghaste', new \Symfony\Component\Asset\VersionStrategy\JsonManifestVersionStrategy((\dirname(__DIR__, 4).'/vendor/codefog/contao-haste/public/manifest.json'), $c, false), $d));
        $instance->addPackage('contao_news', new \Symfony\Component\Asset\PathPackage('bundles/contaonews', $a, $d));
        $instance->addPackage('contao_calendar', new \Symfony\Component\Asset\PathPackage('bundles/contaocalendar', $a, $d));
        $instance->addPackage('contao_newsletter', new \Symfony\Component\Asset\PathPackage('bundles/contaonewsletter', $a, $d));
        $instance->addPackage('contao_comments', new \Symfony\Component\Asset\PathPackage('bundles/contaocomments', $a, $d));
        $instance->addPackage('contao-components/ace', new \Symfony\Component\Asset\PathPackage('assets/ace', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('1.41.0', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/chosen', new \Symfony\Component\Asset\PathPackage('assets/chosen', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('2.0.2', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/colorbox', new \Symfony\Component\Asset\PathPackage('assets/colorbox', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('1.6.4.2', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/colorpicker', new \Symfony\Component\Asset\PathPackage('assets/colorpicker', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('1.5.3', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/contao', new \Symfony\Component\Asset\PathPackage('assets/contao', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('9.4.0', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/datepicker', new \Symfony\Component\Asset\PathPackage('assets/datepicker', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('3.0.1', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/dropzone', new \Symfony\Component\Asset\PathPackage('assets/dropzone', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('5.9.3', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/handorgel', new \Symfony\Component\Asset\PathPackage('assets/handorgel', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('1.0.0.1', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/jquery', new \Symfony\Component\Asset\PathPackage('assets/jquery', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('3.7.1', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/jquery-ui', new \Symfony\Component\Asset\PathPackage('assets/jquery-ui', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('1.13.2', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/mediabox', new \Symfony\Component\Asset\PathPackage('assets/mediabox', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('1.5.4.3', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/mootools', new \Symfony\Component\Asset\PathPackage('assets/mootools', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('1.6.0.9', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/simplemodal', new \Symfony\Component\Asset\PathPackage('assets/simplemodal', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('3.0.3', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/swipe', new \Symfony\Component\Asset\PathPackage('assets/swipe', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('2.2.2', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/swiper', new \Symfony\Component\Asset\PathPackage('assets/swiper', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('11.2.7', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/tablesort', new \Symfony\Component\Asset\PathPackage('assets/tablesort', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('4.0.2', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/tablesorter', new \Symfony\Component\Asset\PathPackage('assets/tablesorter', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('2.31.3.1', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/tinymce4', new \Symfony\Component\Asset\PathPackage('assets/tinymce4', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('6.8.5.1', '%s?v=%s'), $d));
        $instance->addPackage('contao-components/tristen-tablesort', new \Symfony\Component\Asset\PathPackage('assets/tristen-tablesort', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('5.6.0', '%s?v=%s'), $d));
        $instance->addPackage('scrivo/highlight.php', new \Symfony\Component\Asset\PathPackage('vendor/scrivo/highlight_php/styles', new \Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy('v9.18.1.10', '%s?v=%s'), $d));

        return $instance;
    }

    /*
     * Gets the public 'cache.security_is_granted_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SecurityIsGrantedAttributeExpressionLanguageService($container)
    {
        return $container->services['cache.security_is_granted_attribute_expression_language'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('+1xTcdcySH', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the public 'cache.system' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SystemService($container)
    {
        return $container->services['cache.system'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('6W5JrpPeJX', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the public 'contao.assets.assets_context' shared service.
     *
     * @return \Contao\CoreBundle\Asset\ContaoContext
     */
    protected static function getContao_Assets_AssetsContextService($container)
    {
        return $container->services['contao.assets.assets_context'] = new \Contao\CoreBundle\Asset\ContaoContext(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), 'staticPlugins', false);
    }

    /*
     * Gets the public 'contao.assets.files_context' shared service.
     *
     * @return \Contao\CoreBundle\Asset\ContaoContext
     */
    protected static function getContao_Assets_FilesContextService($container)
    {
        return $container->services['contao.assets.files_context'] = new \Contao\CoreBundle\Asset\ContaoContext(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), 'staticFiles', false);
    }

    /*
     * Gets the public 'contao.csrf.token_manager' shared service.
     *
     * @return \Contao\CoreBundle\Csrf\ContaoCsrfTokenManager
     */
    protected static function getContao_Csrf_TokenManagerService($container)
    {
        return $container->services['contao.csrf.token_manager'] = new \Contao\CoreBundle\Csrf\ContaoCsrfTokenManager(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), 'csrf_', ($container->privates['security.csrf.token_generator'] ??= new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator()), ($container->privates['contao.csrf.token_storage'] ??= new \Contao\CoreBundle\Csrf\MemoryTokenStorage()), NULL, 'contao_csrf_token');
    }

    /*
     * Gets the public 'contao.fragment.registry' shared service.
     *
     * @return \Contao\CoreBundle\Fragment\FragmentRegistry
     */
    protected static function getContao_Fragment_RegistryService($container)
    {
        $container->services['contao.fragment.registry'] = $instance = new \Contao\CoreBundle\Fragment\FragmentRegistry();

        $instance->add('contao.frontend_module.feed_reader', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.frontend_module.feed_reader', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.frontend_module.root_page_dependent_modules', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.frontend_module.root_page_dependent_modules', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.frontend_module.template', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.frontend_module.template', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.frontend_module.two_factor', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.frontend_module.two_factor', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.frontend_module.unfiltered_html', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.frontend_module.unfiltered_html', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.frontend_module.mp_form_steps', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.frontend_module.mp_form_steps', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.accordion', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.accordion', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.code', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.code', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.description_list', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.description_list', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.download', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.download', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.downloads', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.downloads', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.element_group', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.element_group', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.headline', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.headline', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.html', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.html', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.hyperlink', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.hyperlink', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.image', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.image', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.gallery', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.gallery', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.list', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.list', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.markdown', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.markdown', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.player', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.player', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.swiper', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.swiper', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.table', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.table', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.template', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.template', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.teaser', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.teaser', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.text', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.text', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.toplink', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.toplink', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.unfiltered_html', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.unfiltered_html', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.vimeo', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.vimeo', 'forward', ['ignore_errors' => false]));
        $instance->add('contao.content_element.youtube', new \Contao\CoreBundle\Fragment\FragmentConfig('contao.fragment._contao.content_element.youtube', 'forward', ['ignore_errors' => false]));

        return $instance;
    }

    /*
     * Gets the public 'contao.framework' shared service.
     *
     * @return \Contao\CoreBundle\Framework\ContaoFramework
     */
    protected static function getContao_FrameworkService($container)
    {
        $container->services['contao.framework'] = $instance = new \Contao\CoreBundle\Framework\ContaoFramework(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), \dirname(__DIR__, 4), 6135);

        $instance->setContainer($container);
        $instance->setHookListeners(['processFormData' => [[['App\\EventListener\\ClientHubListener', '__invoke']]], 'parseTemplate' => [[['App\\EventListener\\FormTemplateErrorListener', '__invoke']]], 'parseBackendTemplate' => [[['App\\EventListener\\ParseBackendTemplateListener', '__invoke']]], 'getSystemMessages' => [[['contao.listener.administrator_email', '__invoke'], ['contao.listener.data_container.personal_data_password', '__invoke']]], 'loadDataContainer' => [200 => [['contao.listener.data_container.default_global_operations', '__invoke'], ['contao.listener.data_container.default_operations', '__invoke'], ['contao.listener.data_container.enum_options', '__invoke']], 0 => [['contao.listener.data_container.preview_link', 'unloadTableWithoutPreviewScript'], ['contao.listener.data_container.record_preview', 'registerDeleteCallbacks'], ['Codefog\\HasteBundle\\EventListener\\DcaAjaxOperationsListener', 'onLoadDataContainer'], ['Codefog\\HasteBundle\\DcaRelationsManager', 'addRelationCallbacks'], ['contao_comments.listener.data_container.add_comment_fields', '__invoke']], -16 => [['contao.listener.data_container_callback', 'onLoadDataContainer']]], 'initializeSystem' => [255 => [['contao.listener.jBdVCET', 'onInitializeSystem'], ['contao.listener.nPG_tnL', 'onInitializeSystem']], 0 => [['contao.listener.data_container.preview_link', 'unloadModuleWithoutPreviewScript']]], 'addCustomRegexp' => [[['contao.listener.widget.custom_rgxp', '__invoke'], ['contao.listener.widget.http_url', '__invoke']]], 'compileFormFields' => [[['Terminal42\\ConditionalformfieldsBundle\\EventListener\\FormListener', 'onCompileFormFields'], ['Terminal42\\MultipageFormsBundle\\EventListener\\CompileFormFieldsListener', '__invoke']]], 'loadFormField' => [[['Terminal42\\ConditionalformfieldsBundle\\EventListener\\FormListener', 'onLoadFormField'], ['Terminal42\\MultipageFormsBundle\\EventListener\\LoadFormFieldListener', '__invoke']]], 'validateFormField' => [[['Terminal42\\ConditionalformfieldsBundle\\EventListener\\FormListener', 'onValidateFormField']]], 'getContentElement' => [[['Codefog\\HasteBundle\\EventListener\\AjaxReloadListener', 'onGetContentElement']]], 'getFrontendModule' => [[['Codefog\\HasteBundle\\EventListener\\AjaxReloadListener', 'onGetFrontendModule']]], 'executePostActions' => [[['Codefog\\HasteBundle\\EventListener\\DcaAjaxOperationsListener', 'onExecutePostActions']]], 'replaceInsertTags' => [[['Codefog\\HasteBundle\\EventListener\\InsertTagsListener', '__invoke'], ['Terminal42\\MultipageFormsBundle\\EventListener\\InsertTagsListener', '__invoke']]], 'reviseTable' => [[['Codefog\\HasteBundle\\DcaRelationsManager', 'reviseRelatedRecords']]], 'getPageStatusIcon' => [[['contao_news.listener.data_container.page', 'getStatusIcon']]], 'generatePage' => [[['contao_news.listener.generate_page', '__invoke'], ['contao_calendar.listener.generate_page', '__invoke']]], 'prepareFormData' => [[['Terminal42\\MultipageFormsBundle\\EventListener\\PrepareFomDataListener', '__invoke']]]]);

        return $instance;
    }

    /*
     * Gets the public 'contao.intl.locales' shared service.
     *
     * @return \Contao\CoreBundle\Intl\Locales
     */
    protected static function getContao_Intl_LocalesService($container)
    {
        return $container->services['contao.intl.locales'] = new \Contao\CoreBundle\Intl\Locales(($container->services['translator'] ?? self::getTranslatorService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ['en', 'sr', 'fa', 'ja', 'sv', 'de', 'nl', 'it', 'ru', 'tr', 'sl', 'pl', 'fr', 'sk', 'cs', 'es', 'tk', 'uz_Arab', 'hr', 'hu', 'vec', 'chp', 'cr', 'den', 'dgr', 'gwi', 'iu', 'iu_Latn', 'kg', 'ln', 'lua', 'sw', 'rm', 'bo', 'ko', 'mn_Mong', 'ug', 'za', 'frr', 'kl', 'ast', 'ca', 'eu', 'gl', 'oc', 'sms', 'cy', 'ga', 'gd', 'ab', 'os', 'ak', 'ee', 'gaa', 'quc', 'as', 'bn', 'gu', 'kha', 'kn', 'kok', 'ks', 'mai', 'ml', 'mr', 'ne', 'or', 'pa', 'sa', 'sat', 'sd', 'sd_Deva', 'ta', 'te', 'ur', 'az_Arab', 'ckb', 'sq', 'fy', 'se', 'ceb', 'hil', 'ilo', 'pag', 'war', 'csb', 'lt', 'ro', 'uk', 'ady', 'av', 'az_Cyrl', 'ba', 'ce', 'inh', 'kbd', 'koi', 'krc', 'kum', 'kv', 'lez', 'mdf', 'myv', 'sah', 'tt', 'tyv', 'udm', 'fi', 'dyo', 'ff', 'srr', 'haw', 'af', 'nr', 'nso', 'ss', 'st', 'tn', 'ts', 've', 'xh', 'zu', 'am', 'am_ET', 'ar', 'ar_AE', 'ar_BH', 'ar_DJ', 'ar_DZ', 'ar_EG', 'ar_EH', 'ar_ER', 'ar_IL', 'ar_IQ', 'ar_JO', 'ar_KM', 'ar_KW', 'ar_LB', 'ar_LY', 'ar_MA', 'ar_MR', 'ar_OM', 'ar_PS', 'ar_QA', 'ar_SA', 'ar_SD', 'ar_SO', 'ar_SY', 'ar_TD', 'ar_TN', 'ar_YE', 'ay', 'ay_BO', 'az', 'az_AZ', 'az_Arab_AZ', 'az_Cyrl_AZ', 'az_Latn', 'az_Latn_AZ', 'be', 'be_BY', 'bg', 'bg_BG', 'bi', 'bi_VU', 'bn_BD', 'bs', 'bs_BA', 'bs_Cyrl', 'bs_Cyrl_BA', 'bs_Latn', 'bs_Latn_BA', 'ca_AD', 'ch', 'ch_GU', 'cs_CZ', 'da', 'da_DK', 'de_AT', 'de_BE', 'de_CH', 'de_DE', 'de_LI', 'de_LU', 'dv', 'dv_MV', 'dz', 'dz_BT', 'el', 'el_CY', 'el_GR', 'en_AG', 'en_AI', 'en_AS', 'en_AU', 'en_BB', 'en_BI', 'en_BM', 'en_BS', 'en_BW', 'en_BZ', 'en_CA', 'en_CC', 'en_CK', 'en_CM', 'en_CQ', 'en_CX', 'en_DG', 'en_DM', 'en_ER', 'en_FJ', 'en_FK', 'en_FM', 'en_GB', 'en_GD', 'en_GG', 'en_GH', 'en_GI', 'en_GM', 'en_GU', 'en_GY', 'en_HK', 'en_IE', 'en_IM', 'en_IN', 'en_IO', 'en_JE', 'en_JM', 'en_KE', 'en_KI', 'en_KN', 'en_KY', 'en_LC', 'en_LR', 'en_LS', 'en_MG', 'en_MH', 'en_MP', 'en_MS', 'en_MT', 'en_MU', 'en_MW', 'en_NA', 'en_NF', 'en_NG', 'en_NR', 'en_NU', 'en_NZ', 'en_PG', 'en_PH', 'en_PK', 'en_PN', 'en_PR', 'en_PW', 'en_RW', 'en_SB', 'en_SC', 'en_SD', 'en_SG', 'en_SH', 'en_SL', 'en_SS', 'en_SX', 'en_SZ', 'en_TC', 'en_TK', 'en_TO', 'en_TT', 'en_TV', 'en_TZ', 'en_UG', 'en_UM', 'en_US', 'en_VC', 'en_VG', 'en_VI', 'en_VU', 'en_WS', 'en_ZA', 'en_ZM', 'en_ZW', 'es_AR', 'es_BO', 'es_CL', 'es_CO', 'es_CR', 'es_CU', 'es_DO', 'es_EA', 'es_EC', 'es_ES', 'es_GQ', 'es_GT', 'es_HN', 'es_IC', 'es_MX', 'es_NI', 'es_PA', 'es_PE', 'es_PR', 'es_PY', 'es_SV', 'es_UY', 'es_VE', 'et', 'et_EE', 'fa_AF', 'fa_IR', 'fi_FI', 'fil', 'fil_PH', 'fj', 'fj_FJ', 'fo', 'fo_FO', 'fr_BE', 'fr_BF', 'fr_BI', 'fr_BJ', 'fr_BL', 'fr_CA', 'fr_CD', 'fr_CF', 'fr_CG', 'fr_CH', 'fr_CI', 'fr_CM', 'fr_DJ', 'fr_DZ', 'fr_FR', 'fr_GA', 'fr_GF', 'fr_GN', 'fr_GP', 'fr_GQ', 'fr_HT', 'fr_KM', 'fr_LU', 'fr_MA', 'fr_MC', 'fr_MF', 'fr_MG', 'fr_ML', 'fr_MQ', 'fr_MU', 'fr_NC', 'fr_NE', 'fr_PF', 'fr_PM', 'fr_RE', 'fr_RW', 'fr_SC', 'fr_SN', 'fr_SY', 'fr_TD', 'fr_TG', 'fr_TN', 'fr_VU', 'fr_WF', 'fr_YT', 'ga_IE', 'gil', 'gil_KI', 'gn', 'gn_PY', 'gsw', 'gsw_CH', 'gsw_LI', 'gv', 'gv_IM', 'he', 'he_IL', 'hi', 'hi_IN', 'hif', 'hif_FJ', 'hif_Deva', 'hif_Deva_FJ', 'hif_Latn', 'hif_Latn_FJ', 'ho', 'ho_PG', 'hr_BA', 'hr_HR', 'ht', 'ht_HT', 'hu_HU', 'hy', 'hy_AM', 'id', 'id_ID', 'is', 'is_IS', 'it_CH', 'it_IT', 'it_SM', 'it_VA', 'ja_JP', 'ka', 'ka_GE', 'kk', 'kk_KZ', 'kk_Arab', 'kk_Arab_KZ', 'kk_Cyrl', 'kk_Cyrl_KZ', 'kl_GL', 'km', 'km_KH', 'ko_KP', 'ko_KR', 'ky', 'ky_KG', 'ky_Arab', 'ky_Arab_KG', 'ky_Cyrl', 'ky_Cyrl_KG', 'ky_Latn', 'ky_Latn_KG', 'lb', 'lb_LU', 'lo', 'lo_LA', 'lt_LT', 'lv', 'lv_LV', 'mg', 'mg_MG', 'mh', 'mh_MH', 'mi', 'mi_NZ', 'mk', 'mk_MK', 'mn', 'mn_MN', 'ms', 'ms_BN', 'ms_MY', 'ms_SG', 'ms_Arab', 'ms_Arab_BN', 'ms_Arab_MY', 'ms_Arab_SG', 'ms_Latn', 'ms_Latn_BN', 'ms_Latn_MY', 'ms_Latn_SG', 'mt', 'mt_MT', 'my', 'my_MM', 'na', 'na_NR', 'nb', 'nb_NO', 'nb_SJ', 'nd', 'nd_ZW', 'ne_NP', 'niu', 'niu_NU', 'nl_AW', 'nl_BE', 'nl_BQ', 'nl_CW', 'nl_NL', 'nl_SR', 'nl_SX', 'nn', 'nn_NO', 'no', 'no_NO', 'ny', 'ny_MW', 'pap', 'pap_AW', 'pap_CW', 'pau', 'pau_PW', 'pl_PL', 'ps', 'ps_AF', 'pt', 'pt_AO', 'pt_BR', 'pt_CV', 'pt_GQ', 'pt_GW', 'pt_MO', 'pt_MZ', 'pt_PT', 'pt_ST', 'pt_TL', 'qu', 'qu_BO', 'qu_EC', 'qu_PE', 'rn', 'rn_BI', 'ro_MD', 'ro_RO', 'ru_BY', 'ru_KG', 'ru_KZ', 'ru_RU', 'ru_UA', 'rw', 'rw_RW', 'sg', 'sg_CF', 'si', 'si_LK', 'sk_SK', 'sl_SI', 'sm', 'sm_AS', 'sm_WS', 'sn', 'sn_ZW', 'so', 'so_SO', 'sq_AL', 'sq_XK', 'sr_BA', 'sr_ME', 'sr_RS', 'sr_XK', 'sr_Cyrl', 'sr_Cyrl_BA', 'sr_Cyrl_ME', 'sr_Cyrl_RS', 'sr_Cyrl_XK', 'sr_Latn', 'sr_Latn_BA', 'sr_Latn_ME', 'sr_Latn_RS', 'sr_Latn_XK', 'ss_SZ', 'st_LS', 'sv_AX', 'sv_FI', 'sv_SE', 'sw_KE', 'sw_TZ', 'sw_UG', 'ta_LK', 'ta_SG', 'tet', 'tet_TL', 'tg', 'tg_TJ', 'tg_Arab', 'tg_Arab_TJ', 'tg_Cyrl', 'tg_Cyrl_TJ', 'tg_Latn', 'tg_Latn_TJ', 'th', 'th_TH', 'ti', 'ti_ER', 'tk_TM', 'tk_Arab', 'tk_Arab_TM', 'tk_Cyrl', 'tk_Cyrl_TM', 'tk_Latn', 'tk_Latn_TM', 'tkl', 'tkl_TK', 'tn_BW', 'to', 'to_TO', 'tpi', 'tpi_PG', 'tr_CY', 'tr_TR', 'tvl', 'tvl_TV', 'ty', 'ty_PF', 'tzm', 'tzm_MA', 'tzm_Latn', 'tzm_Latn_MA', 'tzm_Tfng', 'tzm_Tfng_MA', 'uk_UA', 'ur_PK', 'uz', 'uz_UZ', 'uz_Arab_UZ', 'uz_Cyrl', 'uz_Cyrl_UZ', 'uz_Latn', 'uz_Latn_UZ', 'vi', 'vi_VN', 'wo', 'wo_SN', 'yo', 'yo_NG', 'zh', 'zh_CN', 'zh_HK', 'zh_MO', 'zh_SG', 'zh_TW', 'zh_Hans', 'zh_Hans_CN', 'zh_Hans_HK', 'zh_Hans_MO', 'zh_Hans_SG', 'zh_Hans_TW', 'zh_Hant', 'zh_Hant_CN', 'zh_Hant_HK', 'zh_Hant_MO', 'zh_Hant_SG', 'zh_Hant_TW'], ['en', 'sr', 'fa', 'ja', 'sv', 'de', 'nl', 'it', 'ru', 'tr', 'sl', 'pl', 'fr', 'sk', 'cs', 'es'], [], [], 'en');
    }

    /*
     * Gets the public 'contao.resource_finder' shared service.
     *
     * @return \Contao\CoreBundle\Config\ResourceFinder
     */
    protected static function getContao_ResourceFinderService($container)
    {
        return $container->services['contao.resource_finder'] = new \Contao\CoreBundle\Config\ResourceFinder($container->parameters['contao.resources_paths']);
    }

    /*
     * Gets the public 'contao.routing.content_url_generator' shared service.
     *
     * @return \Contao\CoreBundle\Routing\ContentUrlGenerator
     */
    protected static function getContao_Routing_ContentUrlGeneratorService($container)
    {
        $a = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->services['contao.routing.content_url_generator'])) {
            return $container->services['contao.routing.content_url_generator'];
        }
        $b = ($container->services['contao.routing.page_registry'] ?? self::getContao_Routing_PageRegistryService($container));

        if (isset($container->services['contao.routing.content_url_generator'])) {
            return $container->services['contao.routing.content_url_generator'];
        }
        $c = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->services['contao.routing.content_url_generator'])) {
            return $container->services['contao.routing.content_url_generator'];
        }

        return $container->services['contao.routing.content_url_generator'] = new \Contao\CoreBundle\Routing\ContentUrlGenerator($a, $b, $c, new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['contao.routing.content.article_resolver'] ?? $container->load('getContao_Routing_Content_ArticleResolverService'));
            yield 1 => ($container->privates['contao.routing.content.page_resolver'] ?? $container->load('getContao_Routing_Content_PageResolverService'));
            yield 2 => ($container->privates['contao.routing.content.string_resolver'] ?? $container->load('getContao_Routing_Content_StringResolverService'));
            yield 3 => ($container->privates['contao_faq.routing.faq_resolver'] ?? $container->load('getContaoFaq_Routing_FaqResolverService'));
            yield 4 => ($container->privates['contao_news.routing.news_resolver'] ?? $container->load('getContaoNews_Routing_NewsResolverService'));
            yield 5 => ($container->privates['contao_calendar.routing.calendar_events_resolver'] ?? $container->load('getContaoCalendar_Routing_CalendarEventsResolverService'));
            yield 6 => ($container->privates['contao_newsletter.routing.newsletter_resolver'] ?? $container->load('getContaoNewsletter_Routing_NewsletterResolverService'));
        }, 7));
    }

    /*
     * Gets the public 'contao.routing.nested_404_matcher' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher
     */
    protected static function getContao_Routing_Nested404MatcherService($container)
    {
        $a = ($container->privates['contao.routing.route_404_provider'] ?? self::getContao_Routing_Route404ProviderService($container));

        if (isset($container->services['contao.routing.nested_404_matcher'])) {
            return $container->services['contao.routing.nested_404_matcher'];
        }

        $container->services['contao.routing.nested_404_matcher'] = $instance = new \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher($a, ($container->privates['contao.routing.url_matcher'] ??= new \Contao\CoreBundle\Routing\Matcher\UrlMatcher()));

        $instance->addRouteFilter(($container->privates['contao.routing.matcher.domain_filter'] ??= new \Contao\CoreBundle\Routing\Matcher\DomainFilter()));
        $instance->addRouteFilter(($container->privates['contao.routing.matcher.published_filter'] ?? self::getContao_Routing_Matcher_PublishedFilterService($container)));

        return $instance;
    }

    /*
     * Gets the public 'contao.routing.nested_matcher' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher
     */
    protected static function getContao_Routing_NestedMatcherService($container)
    {
        $a = ($container->privates['contao.routing.route_provider'] ?? self::getContao_Routing_RouteProviderService($container));

        if (isset($container->services['contao.routing.nested_matcher'])) {
            return $container->services['contao.routing.nested_matcher'];
        }

        $container->services['contao.routing.nested_matcher'] = $instance = new \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher($a, ($container->privates['contao.routing.url_matcher'] ??= new \Contao\CoreBundle\Routing\Matcher\UrlMatcher()));

        $instance->addRouteFilter(($container->privates['contao.routing.matcher.domain_filter'] ??= new \Contao\CoreBundle\Routing\Matcher\DomainFilter()));
        $instance->addRouteFilter(($container->privates['contao.routing.matcher.published_filter'] ?? self::getContao_Routing_Matcher_PublishedFilterService($container)));
        $instance->addRouteFilter(new \Contao\CoreBundle\Routing\Matcher\LanguageFilter());

        return $instance;
    }

    /*
     * Gets the public 'contao.routing.page_finder' shared service.
     *
     * @return \Contao\CoreBundle\Routing\PageFinder
     */
    protected static function getContao_Routing_PageFinderService($container)
    {
        $a = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->services['contao.routing.page_finder'])) {
            return $container->services['contao.routing.page_finder'];
        }

        return $container->services['contao.routing.page_finder'] = new \Contao\CoreBundle\Routing\PageFinder(($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)), $a);
    }

    /*
     * Gets the public 'contao.routing.page_registry' shared service.
     *
     * @return \Contao\CoreBundle\Routing\Page\PageRegistry
     */
    protected static function getContao_Routing_PageRegistryService($container)
    {
        $a = ($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container));

        if (isset($container->services['contao.routing.page_registry'])) {
            return $container->services['contao.routing.page_registry'];
        }

        $container->services['contao.routing.page_registry'] = $instance = new \Contao\CoreBundle\Routing\Page\PageRegistry($a);

        $b = ($container->services['Contao\\CoreBundle\\Controller\\Page\\ErrorPageController'] ?? self::getErrorPageControllerService($container));

        $instance->add('error_401', new \Contao\CoreBundle\Routing\Page\RouteConfig(false, NULL, NULL, [], [], ['_controller' => 'Contao\\CoreBundle\\Controller\\Page\\ErrorPageController'], []), NULL, $b);
        $instance->add('error_403', new \Contao\CoreBundle\Routing\Page\RouteConfig(false, NULL, NULL, [], [], ['_controller' => 'Contao\\CoreBundle\\Controller\\Page\\ErrorPageController'], []), NULL, $b);
        $instance->add('error_404', new \Contao\CoreBundle\Routing\Page\RouteConfig(false, NULL, NULL, [], [], ['_controller' => 'Contao\\CoreBundle\\Controller\\Page\\ErrorPageController'], []), NULL, $b);
        $instance->add('error_503', new \Contao\CoreBundle\Routing\Page\RouteConfig(false, NULL, NULL, [], [], ['_controller' => 'Contao\\CoreBundle\\Controller\\Page\\ErrorPageController'], []), NULL, $b);
        $instance->add('redirect', new \Contao\CoreBundle\Routing\Page\RouteConfig('', NULL, NULL, [], [], ['_controller' => 'Contao\\CoreBundle\\Controller\\Page\\RedirectPageController'], []), NULL, false);
        $instance->add('root', new \Contao\CoreBundle\Routing\Page\RouteConfig(NULL, NULL, NULL, [], [], ['_controller' => 'Contao\\CoreBundle\\Controller\\Page\\RootPageController'], []), NULL, false);
        $instance->add('news_feed', new \Contao\CoreBundle\Routing\Page\RouteConfig('', NULL, NULL, [], [], ['_controller' => 'contao_news.controller.page.news_feed'], []), ($container->services['contao_news.controller.page.news_feed'] ?? self::getContaoNews_Controller_Page_NewsFeedService($container)), false);

        return $instance;
    }

    /*
     * Gets the public 'contao.routing.scope_matcher' shared service.
     *
     * @return \Contao\CoreBundle\Routing\ScopeMatcher
     */
    protected static function getContao_Routing_ScopeMatcherService($container)
    {
        return $container->services['contao.routing.scope_matcher'] = new \Contao\CoreBundle\Routing\ScopeMatcher(($container->privates['contao.routing.backend_matcher'] ??= new \Contao\CoreBundle\Routing\Matcher\BackendMatcher()), ($container->privates['contao.routing.frontend_matcher'] ??= new \Contao\CoreBundle\Routing\Matcher\FrontendMatcher()));
    }

    /*
     * Gets the public 'contao.security.token_checker' shared service.
     *
     * @return \Contao\CoreBundle\Security\Authentication\Token\TokenChecker
     */
    protected static function getContao_Security_TokenCheckerService($container)
    {
        $a = ($container->services['security.firewall.map'] ?? self::getSecurity_Firewall_MapService($container));

        if (isset($container->services['contao.security.token_checker'])) {
            return $container->services['contao.security.token_checker'];
        }
        $b = ($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container));

        if (isset($container->services['contao.security.token_checker'])) {
            return $container->services['contao.security.token_checker'];
        }

        return $container->services['contao.security.token_checker'] = new \Contao\CoreBundle\Security\Authentication\Token\TokenChecker(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a, ($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->services['security.authentication.trust_resolver'] ?? self::getSecurity_Authentication_TrustResolverService($container)), ($container->privates['security.access.simple_role_voter'] ??= new \Symfony\Component\Security\Core\Authorization\Voter\RoleVoter()), $b);
    }

    /*
     * Gets the public 'contao.twig.extension' shared service.
     *
     * @return \Contao\CoreBundle\Twig\Extension\ContaoExtension
     */
    protected static function getContao_Twig_ExtensionService($container)
    {
        $a = ($container->services['twig'] ?? self::getTwigService($container));

        if (isset($container->services['contao.twig.extension'])) {
            return $container->services['contao.twig.extension'];
        }
        $b = ($container->services['contao.twig.filesystem_loader'] ?? self::getContao_Twig_FilesystemLoaderService($container));

        if (isset($container->services['contao.twig.extension'])) {
            return $container->services['contao.twig.extension'];
        }
        $c = ($container->services['contao.security.token_checker'] ?? self::getContao_Security_TokenCheckerService($container));

        if (isset($container->services['contao.twig.extension'])) {
            return $container->services['contao.twig.extension'];
        }
        $d = ($container->services['contao.csrf.token_manager'] ?? self::getContao_Csrf_TokenManagerService($container));

        return $container->services['contao.twig.extension'] = new \Contao\CoreBundle\Twig\Extension\ContaoExtension($a, $b, $d, new \Contao\CoreBundle\Twig\Global\ContaoVariable(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $c, $d));
    }

    /*
     * Gets the public 'contao.twig.filesystem_loader' shared service.
     *
     * @return \Contao\CoreBundle\Twig\Loader\ContaoFilesystemLoader
     */
    protected static function getContao_Twig_FilesystemLoaderService($container)
    {
        $a = ($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container));

        if (isset($container->services['contao.twig.filesystem_loader'])) {
            return $container->services['contao.twig.filesystem_loader'];
        }
        $b = ($container->privates['contao.twig.loader.theme_namespace'] ??= new \Contao\CoreBundle\Twig\Loader\ThemeNamespace());

        return $container->services['contao.twig.filesystem_loader'] = new \Contao\CoreBundle\Twig\Loader\ContaoFilesystemLoader(($container->services['cache.system'] ?? self::getCache_SystemService($container)), new \Contao\CoreBundle\Twig\Loader\TemplateLocator(\dirname(__DIR__, 4), ($container->services['contao.resource_finder'] ?? self::getContao_ResourceFinderService($container)), $b, $a), $b, ($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)), \dirname(__DIR__, 4));
    }

    /*
     * Gets the public 'contao_news.controller.page.news_feed' shared service.
     *
     * @return \Contao\NewsBundle\Controller\Page\NewsFeedController
     */
    protected static function getContaoNews_Controller_Page_NewsFeedService($container)
    {
        $container->services['contao_news.controller.page.news_feed'] = $instance = new \Contao\NewsBundle\Controller\Page\NewsFeedController(($container->services['contao.assets.files_context'] ?? self::getContao_Assets_FilesContextService($container)), new \FeedIo\Specification(($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container))), 'UTF-8');

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'contao.cache.entity_tags' => ['services', 'contao.cache.entity_tags', 'getContao_Cache_EntityTagsService', true],
            'contao.csrf.token_manager' => ['services', 'contao.csrf.token_manager', 'getContao_Csrf_TokenManagerService', false],
            'contao.framework' => ['services', 'contao.framework', 'getContao_FrameworkService', false],
            'contao.routing.content_url_generator' => ['services', 'contao.routing.content_url_generator', 'getContao_Routing_ContentUrlGeneratorService', false],
            'event_dispatcher' => ['services', 'event_dispatcher', 'getEventDispatcherService', false],
            'fos_http_cache.http.symfony_response_tagger' => ['services', 'fos_http_cache.http.symfony_response_tagger', 'getFosHttpCache_Http_SymfonyResponseTaggerService', false],
            'http_kernel' => ['services', 'http_kernel', 'getHttpKernelService', false],
            'logger' => ['privates', 'monolog.logger', 'getMonolog_LoggerService', false],
            'parameter_bag' => ['privates', 'parameter_bag', 'getParameterBagService', false],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'router' => ['services', 'router', 'getRouterService', false],
            'security.authorization_checker' => ['services', 'security.authorization_checker', 'getSecurity_AuthorizationCheckerService', false],
            'security.csrf.token_manager' => ['privates', 'security.csrf.token_manager', 'getSecurity_Csrf_TokenManagerService', true],
            'security.token_storage' => ['services', 'security.token_storage', 'getSecurity_TokenStorageService', false],
            'twig' => ['services', 'twig', 'getTwigService', false],
        ], [
            'contao.cache.entity_tags' => '?',
            'contao.csrf.token_manager' => '?',
            'contao.framework' => '?',
            'contao.routing.content_url_generator' => '?',
            'event_dispatcher' => '?',
            'fos_http_cache.http.symfony_response_tagger' => '?',
            'http_kernel' => '?',
            'logger' => '?',
            'parameter_bag' => '?',
            'request_stack' => '?',
            'router' => '?',
            'security.authorization_checker' => '?',
            'security.csrf.token_manager' => '?',
            'security.token_storage' => '?',
            'twig' => '?',
        ]))->withContext('contao_news.controller.page.news_feed', $container));

        return $instance;
    }

    /*
     * Gets the public 'debug.stopwatch' shared service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch
     */
    protected static function getDebug_StopwatchService($container)
    {
        return $container->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true);
    }

    /*
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected static function getDoctrine_Dbal_DefaultConnectionService($container)
    {
        $a = ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? self::getDoctrine_Dbal_DefaultConnection_EventManagerService($container));

        if (isset($container->services['doctrine.dbal.default_connection'])) {
            return $container->services['doctrine.dbal.default_connection'];
        }
        $b = new \Doctrine\DBAL\Configuration();
        $b->setSchemaManagerFactory(new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory());
        $b->setMiddlewares([]);

        return $container->services['doctrine.dbal.default_connection'] = (new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory($container->parameters['doctrine.dbal.connection_factory.types'], new \Doctrine\DBAL\Tools\DsnParser(['db2' => 'ibm_db2', 'mssql' => 'pdo_sqlsrv', 'mysql' => 'pdo_mysql', 'mysql2' => 'pdo_mysql', 'postgres' => 'pdo_pgsql', 'postgresql' => 'pdo_pgsql', 'pgsql' => 'pdo_pgsql', 'sqlite' => 'pdo_sqlite', 'sqlite3' => 'pdo_sqlite'])))->createConnection(['driver' => 'pdo_mysql', 'url' => $container->getEnv('DATABASE_URL'), 'charset' => 'utf8mb4', 'idle_connection_ttl' => 600, 'host' => 'localhost', 'port' => NULL, 'user' => 'root', 'password' => NULL, 'driverOptions' => [1013 => false, 1002 => 'SET SESSION sql_mode=CONCAT(@@sql_mode, IF(INSTR(@@sql_mode, \'STRICT_\'), \'\', \',TRADITIONAL\'))'], 'defaultTableOptions' => ['charset' => 'utf8mb4', 'collation' => 'utf8mb4_unicode_ci', 'engine' => 'InnoDB', 'row_format' => 'DYNAMIC', 'collate' => 'utf8mb4_unicode_ci']], $b, $a, []);
    }

    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected static function getDoctrine_Orm_DefaultEntityManagerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManagerGhost2e4090b', static fn () => \EntityManagerGhost2e4090b::createLazyGhost(static fn ($proxy) => self::getDoctrine_Orm_DefaultEntityManagerService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/doctrine/common/src/Proxy/Autoloader.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Proxy/Autoloader.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/ObjectManager.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/EntityManagerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/EntityManager.php';

        $instance = ($lazyLoad->__construct(($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container)), ($container->privates['doctrine.orm.default_configuration'] ?? self::getDoctrine_Orm_DefaultConfigurationService($container)), ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? self::getDoctrine_Dbal_DefaultConnection_EventManagerService($container))) && false ?: $lazyLoad);

        ($container->privates['doctrine.orm.default_manager_configurator'] ??= new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }

    /*
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getEventDispatcherService($container)
    {
        $container->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('kernel.request', [#[\Closure(name: 'nelmio_cors.cors_listener', class: 'Nelmio\\CorsBundle\\EventListener\\CorsListener')] fn () => ($container->privates['nelmio_cors.cors_listener'] ?? self::getNelmioCors_CorsListenerService($container)), 'onKernelRequest'], 250);
        $instance->addListener('kernel.response', [#[\Closure(name: 'nelmio_cors.cors_listener', class: 'Nelmio\\CorsBundle\\EventListener\\CorsListener')] fn () => ($container->privates['nelmio_cors.cors_listener'] ?? self::getNelmioCors_CorsListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'nelmio_cors.cacheable_response_vary_listener', class: 'Nelmio\\CorsBundle\\EventListener\\CacheableResponseVaryListener')] fn () => ($container->privates['nelmio_cors.cacheable_response_vary_listener'] ??= new \Nelmio\CorsBundle\EventListener\CacheableResponseVaryListener()), 'onResponse'], -10);
        $instance->addListener('kernel.response', [#[\Closure(name: 'nelmio_security.content_type_listener', class: 'Nelmio\\SecurityBundle\\EventListener\\ContentTypeListener')] fn () => ($container->privates['nelmio_security.content_type_listener'] ??= new \Nelmio\SecurityBundle\EventListener\ContentTypeListener(true)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'nelmio_security.referrer_policy_listener', class: 'Nelmio\\SecurityBundle\\EventListener\\ReferrerPolicyListener')] fn () => ($container->privates['nelmio_security.referrer_policy_listener'] ?? self::getNelmioSecurity_ReferrerPolicyListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('kernel.response', [#[\Closure(name: 'security.context_listener.0', class: 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener')] fn () => ($container->privates['security.context_listener.0'] ?? self::getSecurity_ContextListener_0Service($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'security.context_listener.1', class: 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener')] fn () => ($container->privates['security.context_listener.1'] ?? self::getSecurity_ContextListener_1Service($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.backend_locale', class: 'Contao\\CoreBundle\\EventListener\\BackendLocaleListener')] fn () => ($container->privates['contao.listener.backend_locale'] ?? self::getContao_Listener_BackendLocaleService($container)), '__invoke'], 7);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.backend_noindex', class: 'Contao\\CoreBundle\\EventListener\\BackendNoindexListener')] fn () => ($container->privates['contao.listener.backend_noindex'] ?? self::getContao_Listener_BackendNoindexService($container)), '__invoke'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.backend_preview_redirect', class: 'Contao\\CoreBundle\\EventListener\\BackendPreviewRedirectListener')] fn () => ($container->privates['contao.listener.backend_preview_redirect'] ?? self::getContao_Listener_BackendPreviewRedirectService($container)), '__invoke'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.backend_rebuild_cache_message', class: 'Contao\\CoreBundle\\EventListener\\BackendRebuildCacheMessageListener')] fn () => ($container->privates['contao.listener.backend_rebuild_cache_message'] ?? self::getContao_Listener_BackendRebuildCacheMessageService($container)), '__invoke'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.clear_session_data', class: 'Contao\\CoreBundle\\EventListener\\ClearSessionDataListener')] fn () => ($container->privates['contao.listener.clear_session_data'] ??= new \Contao\CoreBundle\EventListener\ClearSessionDataListener()), '__invoke'], -768);
        $instance->addListener('kernel.terminate', [#[\Closure(name: 'contao.listener.command_scheduler', class: 'Contao\\CoreBundle\\EventListener\\CommandSchedulerListener')] fn () => ($container->privates['contao.listener.command_scheduler'] ?? $container->load('getContao_Listener_CommandSchedulerService')), '__invoke'], 0);
        $instance->addListener('Nelmio\\SecurityBundle\\ContentSecurityPolicy\\Violation\\ReportEvent', [#[\Closure(name: 'contao.listener.csp_report', class: 'Contao\\CoreBundle\\EventListener\\CspReportListener')] fn () => ($container->privates['contao.listener.csp_report'] ?? $container->load('getContao_Listener_CspReportService')), '__invoke'], 0);
        $instance->addListener('Contao\\CoreBundle\\Event\\DataContainerRecordLabelEvent', [#[\Closure(name: 'contao.listener.data_container.content_record_label', class: 'Contao\\CoreBundle\\EventListener\\DataContainer\\ContentRecordLabelListener')] fn () => ($container->privates['contao.listener.data_container.content_record_label'] ?? $container->load('getContao_Listener_DataContainer_ContentRecordLabelService')), '__invoke'], 0);
        $instance->addListener('Contao\\CoreBundle\\Event\\DataContainerRecordLabelEvent', [#[\Closure(name: 'contao.listener.data_container.fallback_record_label', class: 'Contao\\CoreBundle\\EventListener\\DataContainer\\FallbackRecordLabelListener')] fn () => ($container->privates['contao.listener.data_container.fallback_record_label'] ?? $container->load('getContao_Listener_DataContainer_FallbackRecordLabelService')), '__invoke'], -1);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'contao.listener.exception_converter', class: 'Contao\\CoreBundle\\EventListener\\ExceptionConverterListener')] fn () => ($container->privates['contao.listener.exception_converter'] ??= new \Contao\CoreBundle\EventListener\ExceptionConverterListener()), '__invoke'], 96);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.insecure_installation', class: 'Contao\\CoreBundle\\EventListener\\InsecureInstallationListener')] fn () => ($container->privates['contao.listener.insecure_installation'] ??= new \Contao\CoreBundle\EventListener\InsecureInstallationListener($container->getEnv('APP_SECRET'), (\dirname(__DIR__, 4).'/public'))), '__invoke'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.interest_cohort', class: 'Contao\\CoreBundle\\EventListener\\InterestCohortListener')] fn () => ($container->privates['contao.listener.interest_cohort'] ?? self::getContao_Listener_InterestCohortService($container)), '__invoke'], 0);
        $instance->addListener('Contao\\CoreBundle\\Event\\JsonLdEvent', [#[\Closure(name: 'contao.listener.json_ld_schema', class: 'Contao\\CoreBundle\\EventListener\\ContaoJsonLdSchemaListener')] fn () => ($container->privates['contao.listener.json_ld_schema'] ??= new \Contao\CoreBundle\EventListener\ContaoJsonLdSchemaListener()), '__invoke'], 0);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\SentMessageEvent', [#[\Closure(name: 'contao.listener.log_email_message', class: 'Contao\\CoreBundle\\EventListener\\LogEmailMessageListener')] fn () => ($container->privates['contao.listener.log_email_message'] ?? $container->load('getContao_Listener_LogEmailMessageService')), 'onSentMessageEvent'], 0);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\FailedMessageEvent', [#[\Closure(name: 'contao.listener.log_email_message', class: 'Contao\\CoreBundle\\EventListener\\LogEmailMessageListener')] fn () => ($container->privates['contao.listener.log_email_message'] ?? $container->load('getContao_Listener_LogEmailMessageService')), 'onFailedMessagEvent'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.make_backend_response_uncacheable', class: 'Contao\\CoreBundle\\EventListener\\MakeBackendResponseUncacheableListener')] fn () => ($container->privates['contao.listener.make_backend_response_uncacheable'] ?? self::getContao_Listener_MakeBackendResponseUncacheableService($container)), '__invoke'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.make_response_private', class: 'Contao\\CoreBundle\\EventListener\\MakeResponsePrivateListener')] fn () => ($container->privates['contao.listener.make_response_private'] ?? self::getContao_Listener_MakeResponsePrivateService($container)), 'disableSymfonyAutoCacheControl'], -896);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.make_response_private', class: 'Contao\\CoreBundle\\EventListener\\MakeResponsePrivateListener')] fn () => ($container->privates['contao.listener.make_response_private'] ?? self::getContao_Listener_MakeResponsePrivateService($container)), 'makeResponsePrivate'], -1012);
        $instance->addListener('contao.backend_menu_build', [#[\Closure(name: 'contao.listener.menu.backend', class: 'Contao\\CoreBundle\\EventListener\\Menu\\BackendMenuListener')] fn () => ($container->privates['contao.listener.menu.backend'] ?? $container->load('getContao_Listener_Menu_BackendService')), '__invoke'], 10);
        $instance->addListener('contao.backend_menu_build', [#[\Closure(name: 'contao.listener.menu.backend_favorites', class: 'Contao\\CoreBundle\\EventListener\\Menu\\BackendFavoritesListener')] fn () => ($container->privates['contao.listener.menu.backend_favorites'] ?? $container->load('getContao_Listener_Menu_BackendFavoritesService')), '__invoke'], 0);
        $instance->addListener('contao.backend_menu_build', [#[\Closure(name: 'contao.listener.menu.backend_logout', class: 'Contao\\CoreBundle\\EventListener\\Menu\\BackendLogoutListener')] fn () => ($container->privates['contao.listener.menu.backend_logout'] ?? $container->load('getContao_Listener_Menu_BackendLogoutService')), '__invoke'], -96);
        $instance->addListener('contao.backend_menu_build', [#[\Closure(name: 'contao.listener.menu.backend_preview', class: 'Contao\\CoreBundle\\EventListener\\Menu\\BackendPreviewListener')] fn () => ($container->privates['contao.listener.menu.backend_preview'] ?? $container->load('getContao_Listener_Menu_BackendPreviewService')), '__invoke'], -48);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.merge_http_headers', class: 'Contao\\CoreBundle\\EventListener\\MergeHttpHeadersListener')] fn () => ($container->privates['contao.listener.merge_http_headers'] ?? self::getContao_Listener_MergeHttpHeadersService($container)), '__invoke'], 256);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.page_access', class: 'Contao\\CoreBundle\\EventListener\\PageAccessListener')] fn () => ($container->privates['contao.listener.page_access'] ?? self::getContao_Listener_PageAccessService($container)), '__invoke'], 7);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.page_trail_cache_tags', class: 'Contao\\CoreBundle\\EventListener\\PageTrailCacheTagsListener')] fn () => ($container->privates['contao.listener.page_trail_cache_tags'] ?? self::getContao_Listener_PageTrailCacheTagsService($container)), '__invoke'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'contao.listener.pretty_error_screen', class: 'Contao\\CoreBundle\\EventListener\\PrettyErrorScreenListener')] fn () => ($container->privates['contao.listener.pretty_error_screen'] ?? $container->load('getContao_Listener_PrettyErrorScreenService')), '__invoke'], -96);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.preview_authentication', class: 'Contao\\CoreBundle\\EventListener\\PreviewAuthenticationListener')] fn () => ($container->privates['contao.listener.preview_authentication'] ?? self::getContao_Listener_PreviewAuthenticationService($container)), '__invoke'], 7);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.preview_toolbar', class: 'Contao\\CoreBundle\\EventListener\\PreviewToolbarListener')] fn () => ($container->privates['contao.listener.preview_toolbar'] ?? self::getContao_Listener_PreviewToolbarService($container)), '__invoke'], 0);
        $instance->addListener('contao.preview_url_convert', [#[\Closure(name: 'contao.listener.preview_url_convert', class: 'Contao\\CoreBundle\\EventListener\\PreviewUrlConvertListener')] fn () => ($container->privates['contao.listener.preview_url_convert'] ?? $container->load('getContao_Listener_PreviewUrlConvertService')), '__invoke'], 0);
        $instance->addListener('contao.preview_url_create', [#[\Closure(name: 'contao.listener.preview_url_create', class: 'Contao\\CoreBundle\\EventListener\\PreviewUrlCreateListener')] fn () => ($container->privates['contao.listener.preview_url_create'] ?? $container->load('getContao_Listener_PreviewUrlCreateService')), '__invoke'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.referer_id', class: 'Contao\\CoreBundle\\EventListener\\RefererIdListener')] fn () => ($container->privates['contao.listener.referer_id'] ?? self::getContao_Listener_RefererIdService($container)), '__invoke'], 20);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.request_token', class: 'Contao\\CoreBundle\\EventListener\\RequestTokenListener')] fn () => ($container->privates['contao.listener.request_token'] ?? self::getContao_Listener_RequestTokenService($container)), '__invoke'], 14);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'contao.listener.response_exception', class: 'Contao\\CoreBundle\\EventListener\\ResponseExceptionListener')] fn () => ($container->privates['contao.listener.response_exception'] ??= new \Contao\CoreBundle\EventListener\ResponseExceptionListener()), '__invoke'], 64);
        $instance->addListener('contao.robots_txt', [#[\Closure(name: 'contao.listener.robots_txt', class: 'Contao\\CoreBundle\\EventListener\\RobotsTxtListener')] fn () => ($container->privates['contao.listener.robots_txt'] ?? $container->load('getContao_Listener_RobotsTxtService')), '__invoke'], 0);
        $instance->addListener('kernel.terminate', [#[\Closure(name: 'contao.listener.search_index', class: 'Contao\\CoreBundle\\EventListener\\SearchIndexListener')] fn () => ($container->privates['contao.listener.search_index'] ?? $container->load('getContao_Listener_SearchIndexService')), '__invoke'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'contao.listener.security.logout', class: 'Contao\\CoreBundle\\EventListener\\Security\\LogoutListener')] fn () => ($container->privates['contao.listener.security.logout'] ?? $container->load('getContao_Listener_Security_LogoutService')), '__invoke'], 0);
        $instance->addListener('security.switch_user', [#[\Closure(name: 'contao.listener.security.switch_user', class: 'Contao\\CoreBundle\\EventListener\\Security\\SwitchUserListener')] fn () => ($container->privates['contao.listener.security.switch_user'] ?? $container->load('getContao_Listener_Security_SwitchUserService')), '__invoke'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.security.two_factor_frontend', class: 'Contao\\CoreBundle\\EventListener\\Security\\TwoFactorFrontendListener')] fn () => ($container->privates['contao.listener.security.two_factor_frontend'] ?? self::getContao_Listener_Security_TwoFactorFrontendService($container)), '__invoke'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.service_unavailable', class: 'Contao\\CoreBundle\\EventListener\\ServiceUnavailableListener')] fn () => ($container->privates['contao.listener.service_unavailable'] ?? self::getContao_Listener_ServiceUnavailableService($container)), '__invoke'], 6);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.store_referer', class: 'Contao\\CoreBundle\\EventListener\\StoreRefererListener')] fn () => ($container->privates['contao.listener.store_referer'] ?? self::getContao_Listener_StoreRefererService($container)), '__invoke'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.transport_security_header', class: 'Contao\\CoreBundle\\EventListener\\TransportSecurityHeaderListener')] fn () => ($container->privates['contao.listener.transport_security_header'] ?? self::getContao_Listener_TransportSecurityHeaderService($container)), '__invoke'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'contao.listener.unwrap_twig_exception', class: 'Contao\\CoreBundle\\EventListener\\UnwrapTwigExceptionListener')] fn () => ($container->privates['contao.listener.unwrap_twig_exception'] ??= new \Contao\CoreBundle\EventListener\UnwrapTwigExceptionListener()), '__invoke'], 256);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.user_session', class: 'Contao\\CoreBundle\\EventListener\\UserSessionListener')] fn () => ($container->privates['contao.listener.user_session'] ?? self::getContao_Listener_UserSessionService($container)), '__invoke'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'contao.messenger.message_listener', class: 'Contao\\CoreBundle\\Messenger\\EventListener\\MessageListener')] fn () => ($container->privates['contao.messenger.message_listener'] ?? $container->load('getContao_Messenger_MessageListenerService')), 'onWorkerRunning'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'contao.messenger.message_listener', class: 'Contao\\CoreBundle\\Messenger\\EventListener\\MessageListener')] fn () => ($container->privates['contao.messenger.message_listener'] ?? $container->load('getContao_Messenger_MessageListenerService')), 'onWorkerMessageFailed'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.twig.loader.auto_refresh_template_hierarchy_listener', class: 'Contao\\CoreBundle\\Twig\\Loader\\AutoRefreshTemplateHierarchyListener')] fn () => ($container->privates['contao.twig.loader.auto_refresh_template_hierarchy_listener'] ?? self::getContao_Twig_Loader_AutoRefreshTemplateHierarchyListenerService($container)), '__invoke'], 0);
        $instance->addListener('kernel.terminate', [#[\Closure(name: 'contao.messenger.web_worker', class: 'Contao\\CoreBundle\\Messenger\\WebWorker')] fn () => ($container->privates['contao.messenger.web_worker'] ?? $container->load('getContao_Messenger_WebWorkerService')), 'onKernelTerminate'], -2048);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerStartedEvent', [#[\Closure(name: 'contao.messenger.web_worker', class: 'Contao\\CoreBundle\\Messenger\\WebWorker')] fn () => ($container->privates['contao.messenger.web_worker'] ?? $container->load('getContao_Messenger_WebWorkerService')), 'onWorkerStarted'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'contao.messenger.web_worker', class: 'Contao\\CoreBundle\\Messenger\\WebWorker')] fn () => ($container->privates['contao.messenger.web_worker'] ?? $container->load('getContao_Messenger_WebWorkerService')), 'onWorkerRunning'], 0);
        $instance->addListener('contao.backend_menu_build', [#[\Closure(name: 'contao_manager.listener.backend_menu', class: 'Contao\\ManagerBundle\\EventListener\\BackendMenuListener')] fn () => ($container->privates['contao_manager.listener.backend_menu'] ?? $container->load('getContaoManager_Listener_BackendMenuService')), '__invoke'], 0);
        $instance->addListener('contao.sitemap', [#[\Closure(name: 'contao_faq.listener.sitemap', class: 'Contao\\FaqBundle\\EventListener\\SitemapListener')] fn () => ($container->privates['contao_faq.listener.sitemap'] ?? $container->load('getContaoFaq_Listener_SitemapService')), '__invoke'], 0);
        $instance->addListener('Codefog\\HasteBundle\\Event\\UndoEvent', [#[\Closure(name: 'Codefog\\HasteBundle\\EventListener\\DcaRelationsListener')] fn () => ($container->privates['Codefog\\HasteBundle\\EventListener\\DcaRelationsListener'] ?? $container->load('getDcaRelationsListenerService')), 'onUndo'], 0);
        $instance->addListener('Doctrine\\ORM\\Tools\\Event\\GenerateSchemaEventArgs', [#[\Closure(name: 'Codefog\\HasteBundle\\EventListener\\DcaRelationsListener')] fn () => ($container->privates['Codefog\\HasteBundle\\EventListener\\DcaRelationsListener'] ?? $container->load('getDcaRelationsListenerService')), 'postGenerateSchema'], 0);
        $instance->addListener('Contao\\NewsBundle\\Event\\FetchArticlesForFeedEvent', [#[\Closure(name: 'contao_news.listener.news_feed', class: 'Contao\\NewsBundle\\EventListener\\NewsFeedListener')] fn () => ($container->privates['contao_news.listener.news_feed'] ?? $container->load('getContaoNews_Listener_NewsFeedService')), 'onFetchArticlesForFeed'], 0);
        $instance->addListener('Contao\\NewsBundle\\Event\\TransformArticleForFeedEvent', [#[\Closure(name: 'contao_news.listener.news_feed', class: 'Contao\\NewsBundle\\EventListener\\NewsFeedListener')] fn () => ($container->privates['contao_news.listener.news_feed'] ?? $container->load('getContaoNews_Listener_NewsFeedService')), 'onTransformArticleForFeed'], 0);
        $instance->addListener('contao.preview_url_convert', [#[\Closure(name: 'contao_news.listener.preview_url_convert', class: 'Contao\\NewsBundle\\EventListener\\PreviewUrlConvertListener')] fn () => ($container->privates['contao_news.listener.preview_url_convert'] ?? $container->load('getContaoNews_Listener_PreviewUrlConvertService')), '__invoke'], 0);
        $instance->addListener('contao.preview_url_create', [#[\Closure(name: 'contao_news.listener.preview_url_create', class: 'Contao\\NewsBundle\\EventListener\\PreviewUrlCreateListener')] fn () => ($container->privates['contao_news.listener.preview_url_create'] ?? $container->load('getContaoNews_Listener_PreviewUrlCreateService')), '__invoke'], 0);
        $instance->addListener('contao.sitemap', [#[\Closure(name: 'contao_news.listener.sitemap', class: 'Contao\\NewsBundle\\EventListener\\SitemapListener')] fn () => ($container->privates['contao_news.listener.sitemap'] ?? $container->load('getContaoNews_Listener_SitemapService')), '__invoke'], 0);
        $instance->addListener('contao.preview_url_convert', [#[\Closure(name: 'contao_calendar.listener.preview_url_convert', class: 'Contao\\CalendarBundle\\EventListener\\PreviewUrlConvertListener')] fn () => ($container->privates['contao_calendar.listener.preview_url_convert'] ?? $container->load('getContaoCalendar_Listener_PreviewUrlConvertService')), '__invoke'], 0);
        $instance->addListener('contao.preview_url_create', [#[\Closure(name: 'contao_calendar.listener.preview_url_create', class: 'Contao\\CalendarBundle\\EventListener\\PreviewUrlCreateListener')] fn () => ($container->privates['contao_calendar.listener.preview_url_create'] ?? $container->load('getContaoCalendar_Listener_PreviewUrlCreateService')), '__invoke'], 0);
        $instance->addListener('contao.sitemap', [#[\Closure(name: 'contao_calendar.listener.sitemap', class: 'Contao\\CalendarBundle\\EventListener\\SitemapListener')] fn () => ($container->privates['contao_calendar.listener.sitemap'] ?? $container->load('getContaoCalendar_Listener_SitemapService')), '__invoke'], 0);
        $instance->addListener('Contao\\CoreBundle\\Event\\MemberActivationMailEvent', [#[\Closure(name: 'contao_newsletter.listener.member_activation_mail', class: 'Contao\\NewsletterBundle\\EventListener\\MemberActivationMailListener')] fn () => ($container->privates['contao_newsletter.listener.member_activation_mail'] ?? $container->load('getContaoNewsletter_Listener_MemberActivationMailService')), '__invoke'], 0);
        $instance->addListener('contao.sitemap', [#[\Closure(name: 'contao_newsletter.listener.sitemap', class: 'Contao\\NewsletterBundle\\EventListener\\SitemapListener')] fn () => ($container->privates['contao_newsletter.listener.sitemap'] ?? $container->load('getContaoNewsletter_Listener_SitemapService')), '__invoke'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageHandledEvent', [#[\Closure(name: 'doctrine.orm.messenger.event_subscriber.doctrine_clear_entity_manager', class: 'Symfony\\Bridge\\Doctrine\\Messenger\\DoctrineClearEntityManagerWorkerSubscriber')] fn () => ($container->privates['doctrine.orm.messenger.event_subscriber.doctrine_clear_entity_manager'] ?? $container->load('getDoctrine_Orm_Messenger_EventSubscriber_DoctrineClearEntityManagerService')), 'onWorkerMessageHandled'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'doctrine.orm.messenger.event_subscriber.doctrine_clear_entity_manager', class: 'Symfony\\Bridge\\Doctrine\\Messenger\\DoctrineClearEntityManagerWorkerSubscriber')] fn () => ($container->privates['doctrine.orm.messenger.event_subscriber.doctrine_clear_entity_manager'] ?? $container->load('getDoctrine_Orm_Messenger_EventSubscriber_DoctrineClearEntityManagerService')), 'onWorkerMessageFailed'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener')] fn () => ($container->privates['response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'validate_request_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener')] fn () => ($container->privates['validate_request_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener()), 'onKernelRequest'], 256);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onKernelException'], -128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'removeCspHeader'], -128);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelControllerArguments'], 10);
        $instance->addListener('kernel.response', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelResponse'], -10);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [#[\Closure(name: 'console.suggest_missing_package_subscriber', class: 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SuggestMissingPackageSubscriber')] fn () => ($container->privates['console.suggest_missing_package_subscriber'] ??= new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber()), 'onConsoleError'], 0);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.envelope_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\EnvelopeListener')] fn () => ($container->privates['mailer.envelope_listener'] ??= new \Symfony\Component\Mailer\EventListener\EnvelopeListener(NULL, NULL)), 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.message_logger_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageLoggerListener')] fn () => ($container->privates['mailer.message_logger_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessageLoggerListener()), 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.messenger_transport_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessengerTransportListener')] fn () => ($container->privates['mailer.messenger_transport_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessengerTransportListener()), 'onMessage'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'esi_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SurrogateListener')] fn () => ($container->privates['esi_listener'] ?? self::getEsiListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'fragment.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener')] fn () => ($container->privates['fragment.listener'] ?? self::getFragment_ListenerService($container)), 'onKernelRequest'], 48);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'))), 'configure'], 2048);
        $instance->addListener('console.command', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'))), 'configure'], 2048);
        $instance->addListener('kernel.request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelException'], -64);
        $instance->addListener('kernel.request', [#[\Closure(name: 'session_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['session_listener'] ?? self::getSessionListenerService($container)), 'onKernelRequest'], 128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'session_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['session_listener'] ?? self::getSessionListenerService($container)), 'onKernelResponse'], -1000);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.retry.send_failed_message_for_retry_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\SendFailedMessageForRetryListener')] fn () => ($container->privates['messenger.retry.send_failed_message_for_retry_listener'] ?? $container->load('getMessenger_Retry_SendFailedMessageForRetryListenerService')), 'onMessageFailed'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.failure.add_error_details_stamp_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\AddErrorDetailsStampListener')] fn () => ($container->privates['messenger.failure.add_error_details_stamp_listener'] ??= new \Symfony\Component\Messenger\EventListener\AddErrorDetailsStampListener()), 'onMessageFailed'], 200);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.failure.send_failed_message_to_failure_transport_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\SendFailedMessageToFailureTransportListener')] fn () => ($container->privates['messenger.failure.send_failed_message_to_failure_transport_listener'] ?? $container->load('getMessenger_Failure_SendFailedMessageToFailureTransportListenerService')), 'onMessageFailed'], -100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.dispatch_pcntl_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\DispatchPcntlSignalListener')] fn () => ($container->privates['messenger.listener.dispatch_pcntl_signal_listener'] ??= new \Symfony\Component\Messenger\EventListener\DispatchPcntlSignalListener()), 'onWorkerRunning'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerStartedEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_restart_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnRestartSignalListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $container->load('getMessenger_Listener_StopWorkerOnRestartSignalListenerService')), 'onWorkerStarted'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_restart_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnRestartSignalListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $container->load('getMessenger_Listener_StopWorkerOnRestartSignalListenerService')), 'onWorkerRunning'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_stop_exception_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnCustomStopExceptionListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ??= new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()), 'onMessageFailed'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_stop_exception_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnCustomStopExceptionListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ??= new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()), 'onWorkerRunning'], 0);
        $instance->addListener('console.command', [#[\Closure(name: 'monolog.handler.console', class: 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler')] fn () => ($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)), 'onCommand'], 255);
        $instance->addListener('console.terminate', [#[\Closure(name: 'monolog.handler.console', class: 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler')] fn () => ($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)), 'onTerminate'], -255);
        $instance->addListener('fos_http_cache.error.proxy_unreachable', [#[\Closure(name: 'fos_http_cache.event_listener.log', class: 'FOS\\HttpCache\\EventListener\\LogListener')] fn () => ($container->privates['fos_http_cache.event_listener.log'] ?? $container->load('getFosHttpCache_EventListener_LogService')), 'onProxyUnreachableError'], 0);
        $instance->addListener('fos_http_cache.error.response', [#[\Closure(name: 'fos_http_cache.event_listener.log', class: 'FOS\\HttpCache\\EventListener\\LogListener')] fn () => ($container->privates['fos_http_cache.event_listener.log'] ?? $container->load('getFosHttpCache_EventListener_LogService')), 'onProxyResponseError'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'fos_http_cache.event_listener.tag', class: 'FOS\\HttpCacheBundle\\EventListener\\TagListener')] fn () => ($container->privates['fos_http_cache.event_listener.tag'] ?? self::getFosHttpCache_EventListener_TagService($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.terminate', [#[\Closure(name: 'fos_http_cache.event_listener.invalidation', class: 'FOS\\HttpCacheBundle\\EventListener\\InvalidationListener')] fn () => ($container->privates['fos_http_cache.event_listener.invalidation'] ?? $container->load('getFosHttpCache_EventListener_InvalidationService')), 'onKernelTerminate'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'fos_http_cache.event_listener.invalidation', class: 'FOS\\HttpCacheBundle\\EventListener\\InvalidationListener')] fn () => ($container->privates['fos_http_cache.event_listener.invalidation'] ?? $container->load('getFosHttpCache_EventListener_InvalidationService')), 'onKernelException'], 0);
        $instance->addListener('console.terminate', [#[\Closure(name: 'fos_http_cache.event_listener.invalidation', class: 'FOS\\HttpCacheBundle\\EventListener\\InvalidationListener')] fn () => ($container->privates['fos_http_cache.event_listener.invalidation'] ?? $container->load('getFosHttpCache_EventListener_InvalidationService')), 'onConsoleTerminate'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'fos_http_cache.event_listener.php8_attributes', class: 'FOS\\HttpCacheBundle\\EventListener\\Php8AttributesListener')] fn () => ($container->privates['fos_http_cache.event_listener.php8_attributes'] ?? self::getFosHttpCache_EventListener_Php8AttributesService($container)), 'onKernelRequest'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'nelmio_security.clickjacking_listener', class: 'Nelmio\\SecurityBundle\\EventListener\\ClickjackingListener')] fn () => ($container->privates['nelmio_security.clickjacking_listener'] ?? self::getNelmioSecurity_ClickjackingListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'nelmio_security.csp_listener', class: 'Nelmio\\SecurityBundle\\EventListener\\ContentSecurityPolicyListener')] fn () => ($container->privates['nelmio_security.csp_listener'] ?? self::getNelmioSecurity_CspListenerService($container)), 'onKernelRequest'], 512);
        $instance->addListener('kernel.response', [#[\Closure(name: 'nelmio_security.csp_listener', class: 'Nelmio\\SecurityBundle\\EventListener\\ContentSecurityPolicyListener')] fn () => ($container->privates['nelmio_security.csp_listener'] ?? self::getNelmioSecurity_CspListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'nelmio_security.xss_protection_listener', class: 'Nelmio\\SecurityBundle\\EventListener\\XssProtectionListener')] fn () => ($container->privates['nelmio_security.xss_protection_listener'] ?? self::getNelmioSecurity_XssProtectionListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.check_two_factor_code', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\CheckTwoFactorCodeListener')] fn () => ($container->privates['scheb_two_factor.security.listener.check_two_factor_code'] ?? $container->load('getSchebTwoFactor_Security_Listener_CheckTwoFactorCodeService')), 'checkPassport'], 0);
        $instance->addListener('scheb_two_factor.authentication.check', [#[\Closure(name: 'scheb_two_factor.security.listener.check_two_factor_code_reuse', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\CheckTwoFactorCodeReuseListener')] fn () => ($container->privates['scheb_two_factor.security.listener.check_two_factor_code_reuse'] ?? $container->load('getSchebTwoFactor_Security_Listener_CheckTwoFactorCodeReuseService')), 'checkForCodeReuse'], 0);
        $instance->addListener('scheb_two_factor.authentication.code_reused', [#[\Closure(name: 'scheb_two_factor.security.listener.throw_exception_on_two_factor_code_reuse', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\ThrowExceptionOnTwoFactorCodeReuseListener')] fn () => ($container->privates['scheb_two_factor.security.listener.throw_exception_on_two_factor_code_reuse'] ??= new \Scheb\TwoFactorBundle\Security\Http\EventListener\ThrowExceptionOnTwoFactorCodeReuseListener()), 'handle'], -256);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.suppress_remember_me', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\SuppressRememberMeListener')] fn () => ($container->privates['scheb_two_factor.security.listener.suppress_remember_me'] ??= new \Scheb\TwoFactorBundle\Security\Http\EventListener\SuppressRememberMeListener()), 'onSuccessfulLogin'], -63);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'scheb_two_factor.security.authentication_success_event_suppressor', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Event\\AuthenticationSuccessEventSuppressor')] fn () => ($container->privates['scheb_two_factor.security.authentication_success_event_suppressor'] ??= new \Scheb\TwoFactorBundle\Security\TwoFactor\Event\AuthenticationSuccessEventSuppressor()), 'onLogin'], 9223372036854775806);
        $instance->addListener('kernel.response', [#[\Closure(name: 'scheb_two_factor.trusted_cookie_response_listener', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Trusted\\TrustedCookieResponseListener')] fn () => ($container->privates['scheb_two_factor.trusted_cookie_response_listener'] ?? self::getSchebTwoFactor_TrustedCookieResponseListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.trusted_device', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\TrustedDeviceListener')] fn () => ($container->privates['scheb_two_factor.security.listener.trusted_device'] ?? $container->load('getSchebTwoFactor_Security_Listener_TrustedDeviceService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.check_backup_code', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\CheckBackupCodeListener')] fn () => ($container->privates['scheb_two_factor.security.listener.check_backup_code'] ?? $container->load('getSchebTwoFactor_Security_Listener_CheckBackupCodeService')), 'checkPassport'], 16);
        $instance->addListener('kernel.view', [#[\Closure(name: 'controller.template_attribute_listener', class: 'Symfony\\Bridge\\Twig\\EventListener\\TemplateAttributeListener')] fn () => ($container->privates['controller.template_attribute_listener'] ?? $container->load('getController_TemplateAttributeListenerService')), 'onKernelView'], -128);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'twig.mailer.message_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageListener')] fn () => ($container->privates['twig.mailer.message_listener'] ?? $container->load('getTwig_Mailer_MessageListenerService')), 'onMessage'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener')] fn () => ($container->privates['security.firewall'] ?? self::getSecurity_FirewallService($container)), 'configureLogoutUrlGenerator'], 8);
        $instance->addListener('kernel.request', [#[\Closure(name: 'security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener')] fn () => ($container->privates['security.firewall'] ?? self::getSecurity_FirewallService($container)), 'onKernelRequest'], 8);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener')] fn () => ($container->privates['security.firewall'] ?? self::getSecurity_FirewallService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.is_granted_attribute_listener', class: 'Symfony\\Component\\Security\\Http\\EventListener\\IsGrantedAttributeListener')] fn () => ($container->privates['controller.is_granted_attribute_listener'] ?? self::getController_IsGrantedAttributeListenerService($container)), 'onKernelControllerArguments'], 20);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_backend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_backend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoBackendService($container)), 'onLogin'], 9223372036854775807);
        $instance->addListener('scheb_two_factor.authentication.require', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_backend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_backend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoBackendService($container)), 'onAccessDenied'], 0);
        $instance->addListener('scheb_two_factor.authentication.form', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_backend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_backend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoBackendService($container)), 'onTwoFactorForm'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_backend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_backend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoBackendService($container)), 'onKernelResponse'], 1);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_frontend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_frontend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoFrontendService($container)), 'onLogin'], 9223372036854775807);
        $instance->addListener('scheb_two_factor.authentication.require', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_frontend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_frontend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoFrontendService($container)), 'onAccessDenied'], 0);
        $instance->addListener('scheb_two_factor.authentication.form', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_frontend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_frontend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoFrontendService($container)), 'onTwoFactorForm'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_frontend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_frontend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoFrontendService($container)), 'onKernelResponse'], 1);
        $instance->addListener('kernel.response', [#[\Closure(name: 'security.rememberme.response_listener', class: 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener')] fn () => ($container->privates['security.rememberme.response_listener'] ??= new \Symfony\Component\Security\Http\RememberMe\ResponseListener()), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.csrf_token_cookie', class: 'Contao\\CoreBundle\\EventListener\\CsrfTokenCookieSubscriber')] fn () => ($container->privates['contao.listener.csrf_token_cookie'] ?? self::getContao_Listener_CsrfTokenCookieService($container)), 'onKernelRequest'], 36);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.csrf_token_cookie', class: 'Contao\\CoreBundle\\EventListener\\CsrfTokenCookieSubscriber')] fn () => ($container->privates['contao.listener.csrf_token_cookie'] ?? self::getContao_Listener_CsrfTokenCookieService($container)), 'onKernelResponse'], -1006);
        $instance->addListener('console.command', [#[\Closure(name: 'contao.listener.csrf_token_cookie', class: 'Contao\\CoreBundle\\EventListener\\CsrfTokenCookieSubscriber')] fn () => ($container->privates['contao.listener.csrf_token_cookie'] ?? self::getContao_Listener_CsrfTokenCookieService($container)), 'onCommand'], 36);
        $instance->addListener('Contao\\CoreBundle\\Filesystem\\Dbafs\\RetrieveDbafsMetadataEvent', [#[\Closure(name: 'contao.listener.dbafs_metadata', class: 'Contao\\CoreBundle\\EventListener\\DbafsMetadataSubscriber')] fn () => ($container->privates['contao.listener.dbafs_metadata'] ?? $container->load('getContao_Listener_DbafsMetadataService')), 'enhanceMetadata'], 0);
        $instance->addListener('Contao\\CoreBundle\\Filesystem\\Dbafs\\StoreDbafsMetadataEvent', [#[\Closure(name: 'contao.listener.dbafs_metadata', class: 'Contao\\CoreBundle\\EventListener\\DbafsMetadataSubscriber')] fn () => ($container->privates['contao.listener.dbafs_metadata'] ?? $container->load('getContao_Listener_DbafsMetadataService')), 'normalizeMetadata'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.locale', class: 'Contao\\CoreBundle\\EventListener\\LocaleSubscriber')] fn () => ($container->privates['contao.listener.locale'] ?? self::getContao_Listener_LocaleService($container)), 'onKernelRequest'], 20);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.locale', class: 'Contao\\CoreBundle\\EventListener\\LocaleSubscriber')] fn () => ($container->privates['contao.listener.locale'] ?? self::getContao_Listener_LocaleService($container)), 'setTranslatorLocale'], 100);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao.listener.subrequest_cache', class: 'Contao\\CoreBundle\\EventListener\\SubrequestCacheSubscriber')] fn () => ($container->privates['contao.listener.subrequest_cache'] ??= new \Contao\CoreBundle\EventListener\SubrequestCacheSubscriber()), 'onKernelRequest'], 255);
        $instance->addListener('kernel.response', [#[\Closure(name: 'contao.listener.subrequest_cache', class: 'Contao\\CoreBundle\\EventListener\\SubrequestCacheSubscriber')] fn () => ($container->privates['contao.listener.subrequest_cache'] ??= new \Contao\CoreBundle\EventListener\SubrequestCacheSubscriber()), 'onKernelResponse'], -255);
        $instance->addListener('kernel.request', [#[\Closure(name: 'contao_manager.monolog.request_processor', class: 'Contao\\ManagerBundle\\Monolog\\RequestProcessor')] fn () => ($container->privates['contao_manager.monolog.request_processor'] ??= new \Contao\ManagerBundle\Monolog\RequestProcessor()), 'onKernelRequest'], 4096);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Codefog\\HasteBundle\\EventListener\\AjaxReloadListener')] fn () => ($container->services['Codefog\\HasteBundle\\EventListener\\AjaxReloadListener'] ?? self::getAjaxReloadListenerService($container)), 'onResponse'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /*
     * Gets the public 'fos_http_cache.cache_manager' shared service.
     *
     * @return \FOS\HttpCacheBundle\CacheManager
     */
    protected static function getFosHttpCache_CacheManagerService($container)
    {
        $a = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->services['fos_http_cache.cache_manager'])) {
            return $container->services['fos_http_cache.cache_manager'];
        }

        $container->services['fos_http_cache.cache_manager'] = $instance = new \FOS\HttpCacheBundle\CacheManager(($container->services['fos_http_cache.proxy_client.symfony'] ?? self::getFosHttpCache_ProxyClient_SymfonyService($container)), $a);

        if ($container->has('event_dispatcher')) {
            $instance->setEventDispatcher(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
        }
        $instance->setGenerateUrlType(0);

        return $instance;
    }

    /*
     * Gets the public 'fos_http_cache.http.symfony_response_tagger' shared service.
     *
     * @return \FOS\HttpCacheBundle\Http\SymfonyResponseTagger
     */
    protected static function getFosHttpCache_Http_SymfonyResponseTaggerService($container)
    {
        return $container->services['fos_http_cache.http.symfony_response_tagger'] = new \FOS\HttpCacheBundle\Http\SymfonyResponseTagger(['header_formatter' => new \FOS\HttpCache\TagHeaderFormatter\MaxHeaderValueLengthFormatter(new \FOS\HttpCache\TagHeaderFormatter\CommaSeparatedTagHeaderFormatter('X-Cache-Tags', ','), 4096), 'strict' => false]);
    }

    /*
     * Gets the public 'fos_http_cache.proxy_client.symfony' shared service.
     *
     * @return \FOS\HttpCache\ProxyClient\Symfony
     */
    protected static function getFosHttpCache_ProxyClient_SymfonyService($container)
    {
        return $container->services['fos_http_cache.proxy_client.symfony'] = new \FOS\HttpCache\ProxyClient\Symfony(new \FOS\HttpCache\SymfonyCache\KernelDispatcher(($container->services['kernel'] ?? $container->get('kernel', 1))), $container->parameters['fos_http_cache.proxy_client.symfony.options']);
    }

    /*
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected static function getHttpKernelService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['http_kernel'])) {
            return $container->services['http_kernel'];
        }
        $b = ($container->privates['contao.controller_resolver'] ?? self::getContao_ControllerResolverService($container));

        if (isset($container->services['http_kernel'])) {
            return $container->services['http_kernel'];
        }

        return $container->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel($a, $b, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory(), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.user_value_resolver'] ?? $container->load('getSecurity_UserValueResolverService'));
            yield 1 => ($container->privates['security.security_token_value_resolver'] ?? $container->load('getSecurity_SecurityTokenValueResolverService'));
            yield 2 => ($container->privates['doctrine.orm.entity_value_resolver'] ?? $container->load('getDoctrine_Orm_EntityValueResolverService'));
            yield 3 => ($container->privates['contao.model_argument_resolver'] ?? $container->load('getContao_ModelArgumentResolverService'));
            yield 4 => ($container->privates['argument_resolver.backed_enum_resolver'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver());
            yield 5 => ($container->privates['argument_resolver.uid'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\UidValueResolver());
            yield 6 => ($container->privates['argument_resolver.datetime'] ?? $container->load('getArgumentResolver_DatetimeService'));
            yield 7 => ($container->privates['argument_resolver.request_attribute'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver());
            yield 8 => ($container->privates['argument_resolver.request'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver());
            yield 9 => ($container->privates['argument_resolver.session'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver());
            yield 10 => ($container->privates['argument_resolver.service'] ?? $container->load('getArgumentResolver_ServiceService'));
            yield 11 => ($container->privates['argument_resolver.default'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver());
            yield 12 => ($container->privates['argument_resolver.variadic'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver());
        }, 13), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver' => ['privates', 'doctrine.orm.entity_value_resolver', 'getDoctrine_Orm_EntityValueResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => ['privates', 'argument_resolver.backed_enum_resolver', 'getArgumentResolver_BackedEnumResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => ['privates', 'argument_resolver.datetime', 'getArgumentResolver_DatetimeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => ['privates', 'argument_resolver.default', 'getArgumentResolver_DefaultService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => ['privates', 'argument_resolver.query_parameter_value_resolver', 'getArgumentResolver_QueryParameterValueResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => ['privates', 'argument_resolver.request_attribute', 'getArgumentResolver_RequestAttributeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => ['privates', 'argument_resolver.request_payload', NULL, 'You can neither use "#[MapRequestPayload]" nor "#[MapQueryString]" since the Serializer component is not installed. Try running "composer require symfony/serializer-pack".'],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => ['privates', 'argument_resolver.request', 'getArgumentResolver_RequestService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => ['privates', 'argument_resolver.service', 'getArgumentResolver_ServiceService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => ['privates', 'argument_resolver.session', 'getArgumentResolver_SessionService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\UidValueResolver' => ['privates', 'argument_resolver.uid', 'getArgumentResolver_UidService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => ['privates', 'argument_resolver.variadic', 'getArgumentResolver_VariadicService', true],
            'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver' => ['privates', 'security.security_token_value_resolver', 'getSecurity_SecurityTokenValueResolverService', true],
            'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver' => ['privates', 'security.user_value_resolver', 'getSecurity_UserValueResolverService', true],
            'contao.model_argument_resolver' => ['privates', 'contao.model_argument_resolver', 'getContao_ModelArgumentResolverService', true],
        ], [
            'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver' => 'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\UidValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\UidValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver',
            'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver' => 'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver',
            'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver' => 'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver',
            'contao.model_argument_resolver' => 'Contao\\CoreBundle\\HttpKernel\\ModelArgumentResolver',
        ])), true);
    }

    /*
     * Gets the public 'monolog.logger.contao.error' shared service.
     *
     * @return \Contao\CoreBundle\Monolog\SystemLogger
     */
    protected static function getMonolog_Logger_Contao_ErrorService($container)
    {
        $a = ($container->privates['contao.monolog.handler'] ?? self::getContao_Monolog_HandlerService($container));

        if (isset($container->services['monolog.logger.contao.error'])) {
            return $container->services['monolog.logger.contao.error'];
        }
        $b = new \Monolog\Logger('contao.error');
        $b->pushProcessor(($container->privates['contao.monolog.processor'] ?? self::getContao_Monolog_ProcessorService($container)));
        $b->pushProcessor(($container->privates['contao_manager.monolog.request_processor'] ??= new \Contao\ManagerBundle\Monolog\RequestProcessor()));
        $b->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $b->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));
        $b->pushHandler($a);

        return $container->services['monolog.logger.contao.error'] = new \Contao\CoreBundle\Monolog\SystemLogger($b, 'ERROR');
    }

    /*
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected static function getRequestStackService($container)
    {
        return $container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /*
     * Gets the public 'router' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\ChainRouter
     */
    protected static function getRouterService($container)
    {
        $a = ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container));

        if (isset($container->services['router'])) {
            return $container->services['router'];
        }

        $container->services['router'] = $instance = new \Symfony\Cmf\Component\Routing\ChainRouter($a);

        $b = ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container));
        $c = ($container->privates['contao.routing.route_provider'] ?? self::getContao_Routing_RouteProviderService($container));

        $d = new \Contao\CoreBundle\Routing\PageUrlGenerator($c, ($container->services['contao.routing.page_registry'] ?? self::getContao_Routing_PageRegistryService($container)), $a);
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));
        $f = new \Symfony\Cmf\Component\Routing\DynamicRouter($b, ($container->services['contao.routing.nested_matcher'] ?? self::getContao_Routing_NestedMatcherService($container)), $d, '', $e, $c);
        $f->addRouteEnhancer(new \Contao\CoreBundle\Routing\Enhancer\InputEnhancer(($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack())), 0);

        $instance->setContext($b);
        $instance->add(($container->privates['router.default'] ?? self::getRouter_DefaultService($container)), '100');
        $instance->add(new \Symfony\Cmf\Component\Routing\DynamicRouter($b, ($container->services['contao.routing.nested_404_matcher'] ?? self::getContao_Routing_Nested404MatcherService($container)), $d, '', $e, ($container->privates['contao.routing.route_404_provider'] ?? self::getContao_Routing_Route404ProviderService($container))), -200);
        $instance->add($f, 20);

        return $instance;
    }

    /*
     * Gets the public 'security.authentication.trust_resolver' shared service.
     *
     * @return \Scheb\TwoFactorBundle\Security\Authentication\AuthenticationTrustResolver
     */
    protected static function getSecurity_Authentication_TrustResolverService($container)
    {
        return $container->services['security.authentication.trust_resolver'] = new \Scheb\TwoFactorBundle\Security\Authentication\AuthenticationTrustResolver(new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver());
    }

    /*
     * Gets the public 'security.authorization_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker
     */
    protected static function getSecurity_AuthorizationCheckerService($container)
    {
        $a = ($container->privates['security.access.decision_manager'] ?? self::getSecurity_Access_DecisionManagerService($container));

        if (isset($container->services['security.authorization_checker'])) {
            return $container->services['security.authorization_checker'];
        }

        return $container->services['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), $a, false, false);
    }

    /*
     * Gets the public 'security.firewall.map' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallMap
     */
    protected static function getSecurity_Firewall_MapService($container)
    {
        $a = ($container->privates['.service_locator.fwb2A_j'] ?? self::get_ServiceLocator_Fwb2AJService($container));

        if (isset($container->services['security.firewall.map'])) {
            return $container->services['security.firewall.map'];
        }

        return $container->services['security.firewall.map'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($a, new RewindableGenerator(function () use ($container) {
            yield 'security.firewall.map.context.contao_backend' => ($container->privates['contao.routing.backend_matcher'] ??= new \Contao\CoreBundle\Routing\Matcher\BackendMatcher());
            yield 'security.firewall.map.context.contao_frontend' => ($container->privates['contao.routing.frontend_matcher'] ??= new \Contao\CoreBundle\Routing\Matcher\FrontendMatcher());
        }, 2));
    }

    /*
     * Gets the public 'security.helper' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security
     */
    protected static function getSecurity_HelperService($container)
    {
        return $container->services['security.helper'] = new \Symfony\Bundle\SecurityBundle\Security(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'security.authenticator.managers_locator' => ['privates', 'security.authenticator.managers_locator', 'getSecurity_Authenticator_ManagersLocatorService', true],
            'security.authorization_checker' => ['services', 'security.authorization_checker', 'getSecurity_AuthorizationCheckerService', false],
            'security.csrf.token_manager' => ['privates', 'security.csrf.token_manager', 'getSecurity_Csrf_TokenManagerService', true],
            'security.firewall.event_dispatcher_locator' => ['privates', 'security.firewall.event_dispatcher_locator', 'getSecurity_Firewall_EventDispatcherLocatorService', true],
            'security.firewall.map' => ['services', 'security.firewall.map', 'getSecurity_Firewall_MapService', false],
            'security.token_storage' => ['services', 'security.token_storage', 'getSecurity_TokenStorageService', false],
            'security.user_checker_locator' => ['privates', 'security.user_checker_locator', 'getSecurity_UserCheckerLocatorService', true],
        ], [
            'request_stack' => '?',
            'security.authenticator.managers_locator' => '?',
            'security.authorization_checker' => '?',
            'security.csrf.token_manager' => '?',
            'security.firewall.event_dispatcher_locator' => '?',
            'security.firewall.map' => '?',
            'security.token_storage' => '?',
            'security.user_checker_locator' => '?',
        ]), ['contao_backend' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'contao.security.login_authenticator.contao_backend' => ['privates', 'contao.security.login_authenticator.contao_backend', 'getContao_Security_LoginAuthenticator_ContaoBackendService', true],
            'security.authenticator.login_link.contao_backend' => ['privates', 'security.authenticator.login_link.contao_backend', 'getSecurity_Authenticator_LoginLink_ContaoBackendService', true],
        ], [
            'contao.security.login_authenticator.contao_backend' => '?',
            'security.authenticator.login_link.contao_backend' => '?',
        ]), 'contao_frontend' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'contao.security.login_authenticator.contao_frontend' => ['privates', 'contao.security.login_authenticator.contao_frontend', 'getContao_Security_LoginAuthenticator_ContaoFrontendService', true],
            'security.authenticator.remember_me.contao_frontend' => ['privates', 'security.authenticator.remember_me.contao_frontend', 'getSecurity_Authenticator_RememberMe_ContaoFrontendService', true],
        ], [
            'contao.security.login_authenticator.contao_frontend' => '?',
            'security.authenticator.remember_me.contao_frontend' => '?',
        ])]);
    }

    /*
     * Gets the public 'security.logout_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator
     */
    protected static function getSecurity_LogoutUrlGeneratorService($container)
    {
        $a = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->services['security.logout_url_generator'])) {
            return $container->services['security.logout_url_generator'];
        }

        $container->services['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a, ($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)));

        $instance->registerListener('contao_backend', 'contao_backend_logout', 'logout', '_csrf_token', NULL, NULL);
        $instance->registerListener('contao_frontend', 'contao_frontend_logout', 'logout', '_csrf_token', NULL, NULL);

        return $instance;
    }

    /*
     * Gets the public 'security.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage
     */
    protected static function getSecurity_TokenStorageService($container)
    {
        return $container->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
        ], [
            'request_stack' => '?',
        ]));
    }

    /*
     * Gets the public 'translator' shared service.
     *
     * @return \Contao\CoreBundle\Translation\Translator
     */
    protected static function getTranslatorService($container)
    {
        return $container->services['translator'] = new \Contao\CoreBundle\Translation\Translator(($container->privates['translator.default'] ?? self::getTranslator_DefaultService($container)), ($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)), ($container->services['contao.resource_finder'] ?? self::getContao_ResourceFinderService($container)));
    }

    /*
     * Gets the public 'twig' shared service.
     *
     * @return \Twig\Environment
     */
    protected static function getTwigService($container)
    {
        $a = ($container->services['contao.twig.filesystem_loader'] ?? self::getContao_Twig_FilesystemLoaderService($container));

        if (isset($container->services['twig'])) {
            return $container->services['twig'];
        }
        $b = new \Twig\Loader\ChainLoader();

        $c = new \Contao\CoreBundle\Twig\Loader\FailTolerantFilesystemLoader([], \dirname(__DIR__, 4));
        $c->addPath((\dirname(__DIR__, 4).'/vendor/knplabs/knp-menu/src/Knp/Menu/Resources/views'));
        $c->addPath((\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/templates'), 'Doctrine');
        $c->addPath((\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/templates'), '!Doctrine');
        $c->addPath((\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/views'), 'SchebTwoFactor');
        $c->addPath((\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/views'), '!SchebTwoFactor');
        $c->addPath((\dirname(__DIR__, 4).'/vendor/knplabs/knp-menu-bundle/templates'), 'KnpMenu');
        $c->addPath((\dirname(__DIR__, 4).'/vendor/knplabs/knp-menu-bundle/templates'), '!KnpMenu');
        $c->addPath((\dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Resources/views'), 'Security');
        $c->addPath((\dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Resources/views'), '!Security');
        $c->addPath((\dirname(__DIR__, 4).'/vendor/contao/core-bundle/templates'), 'ContaoCore');
        $c->addPath((\dirname(__DIR__, 4).'/vendor/contao/core-bundle/templates'), '!ContaoCore');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_tabletree_widget/templates'), 'pct_tabletree_widget');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_tabletree_widget/templates'), '!pct_tabletree_widget');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_megamenu/templates'), 'pct_megamenu');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_megamenu/templates'), '!pct_megamenu');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_theme_updater/templates'), 'pct_theme_updater');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_theme_updater/templates'), '!pct_theme_updater');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_themer/templates'), 'pct_themer');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_themer/templates'), '!pct_themer');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_autogrid/templates'), 'pct_autogrid');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_autogrid/templates'), '!pct_autogrid');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_customelements/templates'), 'pct_customelements');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_customelements/templates'), '!pct_customelements');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_frontend_quickedit/templates'), 'pct_frontend_quickedit');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_frontend_quickedit/templates'), '!pct_frontend_quickedit');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_revolutionslider/templates'), 'pct_revolutionslider');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_revolutionslider/templates'), '!pct_revolutionslider');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_privacy_manager/templates'), 'pct_privacy_manager');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_privacy_manager/templates'), '!pct_privacy_manager');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_theme_settings/templates'), 'pct_theme_settings');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_theme_settings/templates'), '!pct_theme_settings');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_customelements_plugin_customcatalog/templates'), 'pct_customelements_plugin_customcatalog');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_customelements_plugin_customcatalog/templates'), '!pct_customelements_plugin_customcatalog');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_iconpicker/templates'), 'pct_iconpicker');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_iconpicker/templates'), '!pct_iconpicker');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_theme_templates/templates'), 'pct_theme_templates');
        $c->addPath((\dirname(__DIR__, 4).'/system/modules/pct_theme_templates/templates'), '!pct_theme_templates');
        $c->addPath((\dirname(__DIR__, 4).'/templates'));
        $c->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), 'email');
        $c->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), '!email');

        $b->addLoader($a);
        $b->addLoader($c);
        $b->addLoader(new \Twig\Loader\FilesystemLoader([], \dirname(__DIR__, 4)));

        $container->services['twig'] = $instance = new \Twig\Environment($b, ['debug' => false, 'strict_variables' => false, 'autoescape' => 'name', 'cache' => ($container->targetDir.''.'/twig'), 'charset' => 'UTF-8']);

        $d = ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack());
        $e = ($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container));
        $f = new \Symfony\Bridge\Twig\AppVariable();
        $f->setEnvironment('prod');
        $f->setDebug(false);
        if ($container->has('security.token_storage')) {
            $f->setTokenStorage($e);
        }
        if ($container->has('request_stack')) {
            $f->setRequestStack($d);
        }
        $f->setLocaleSwitcher(($container->privates['translation.locale_switcher'] ?? self::getTranslation_LocaleSwitcherService($container)));
        $f->setEnabledLocales([]);

        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CsrfExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension(($container->services['translator'] ?? self::getTranslatorService($container))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension(($container->services['assets.packages'] ?? self::getAssets_PackagesService($container))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\ErrorHandler\ErrorRenderer\FileLinkFormatter(NULL)), \dirname(__DIR__, 4), 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension(($container->services['router'] ?? self::getRouterService($container))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension(($container->services['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)), false));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HtmlSanitizerExtension(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'default' => ['privates', 'html_sanitizer.sanitizer.default', 'getHtmlSanitizer_Sanitizer_DefaultService', true],
        ], [
            'default' => 'Symfony\\Component\\HtmlSanitizer\\HtmlSanitizer',
        ])));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension(($container->privates['url_helper'] ?? self::getUrlHelperService($container))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension(($container->services['security.logout_url_generator'] ?? self::getSecurity_LogoutUrlGeneratorService($container))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension(($container->services['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container)), new \Symfony\Component\Security\Http\Impersonate\ImpersonateUrlGenerator($d, ($container->services['security.firewall.map'] ?? self::getSecurity_Firewall_MapService($container)), $e)));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension(new \FOS\HttpCacheBundle\Twig\CacheTagExtension(($container->services['fos_http_cache.http.symfony_response_tagger'] ?? self::getFosHttpCache_Http_SymfonyResponseTaggerService($container))));
        $instance->addExtension(new \Nelmio\SecurityBundle\Twig\NelmioCSPTwigExtension(($container->privates['nelmio_security.sha_computer'] ??= new \Nelmio\SecurityBundle\ContentSecurityPolicy\ShaComputer('sha256'))));
        $instance->addExtension(new \Twig\Extra\String\StringExtension());
        $instance->addExtension(new \Knp\Menu\Twig\MenuExtension());
        $instance->addExtension(new \Knp\Bundle\TimeBundle\Twig\Extension\TimeExtension());
        $instance->addExtension(($container->services['contao.twig.extension'] ?? self::getContao_Twig_ExtensionService($container)));
        $instance->addGlobal('app', $f);
        $instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => ['privates', 'twig.runtime.security_csrf', 'getTwig_Runtime_SecurityCsrfService', true],
            'Nelmio\\SecurityBundle\\Twig\\CSPRuntime' => ['privates', 'nelmio_security.csp.runtime', 'getNelmioSecurity_Csp_RuntimeService', true],
            'Knp\\Menu\\Twig\\MenuRuntimeExtension' => ['privates', 'knp_menu.twig.runtime', 'getKnpMenu_Twig_RuntimeService', true],
            'Knp\\Bundle\\TimeBundle\\DateTimeFormatter' => ['privates', 'time.datetime_formatter', 'getTime_DatetimeFormatterService', true],
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => ['privates', 'twig.runtime.httpkernel', 'getTwig_Runtime_HttpkernelService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\ContentUrlRuntime' => ['privates', 'contao.twig.content_url_runtime', 'getContao_Twig_ContentUrlRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\CspRuntime' => ['privates', 'contao.twig.csp_runtime', 'getContao_Twig_CspRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\FigureRuntime' => ['privates', 'contao.twig.figure_runtime', 'getContao_Twig_FigureRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\FormatterRuntime' => ['privates', 'contao.twig.formatter_runtime', 'getContao_Twig_FormatterRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\FragmentRuntime' => ['privates', 'contao.twig.fragment_runtime', 'getContao_Twig_FragmentRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\HighlighterRuntime' => ['privates', 'contao.twig.highlighter_runtime', 'getContao_Twig_HighlighterRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\InsertTagRuntime' => ['privates', 'contao.twig.insert_tag_runtime', 'getContao_Twig_InsertTagRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\LegacyTemplateFunctionsRuntime' => ['privates', 'contao.twig.legacy_template_functions_runtime', 'getContao_Twig_LegacyTemplateFunctionsRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\PictureConfigurationRuntime' => ['privates', 'contao.twig.picture_configuration_runtime', 'getContao_Twig_PictureConfigurationRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\SanitizerRuntime' => ['privates', 'contao.twig.sanitizer_runtime', 'getContao_Twig_SanitizerRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\SchemaOrgRuntime' => ['privates', 'contao.twig.schema_org_runtime', 'getContao_Twig_SchemaOrgRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\StringRuntime' => ['privates', 'contao.twig.string_runtime', 'getContao_Twig_StringRuntimeService', true],
            'Contao\\CoreBundle\\Twig\\Runtime\\UrlRuntime' => ['privates', 'contao.twig.url_runtime', 'getContao_Twig_UrlRuntimeService', true],
        ], [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => '?',
            'Nelmio\\SecurityBundle\\Twig\\CSPRuntime' => '?',
            'Knp\\Menu\\Twig\\MenuRuntimeExtension' => '?',
            'Knp\\Bundle\\TimeBundle\\DateTimeFormatter' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\ContentUrlRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\CspRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\FigureRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\FormatterRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\FragmentRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\HighlighterRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\InsertTagRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\LegacyTemplateFunctionsRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\PictureConfigurationRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\SanitizerRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\SchemaOrgRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\StringRuntime' => '?',
            'Contao\\CoreBundle\\Twig\\Runtime\\UrlRuntime' => '?',
        ])));
        (new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

        return $instance;
    }

    /*
     * Gets the public 'uri_signer' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\UriSigner
     */
    protected static function getUriSignerService($container)
    {
        return $container->services['uri_signer'] = new \Symfony\Component\HttpFoundation\UriSigner($container->getEnv('APP_SECRET'));
    }

    /*
     * Gets the private '.service_locator.8pXkOyT' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_8pXkOyTService($container)
    {
        return $container->privates['.service_locator.8pXkOyT'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'contao.cache.entity_tags' => ['services', 'contao.cache.entity_tags', 'getContao_Cache_EntityTagsService', true],
            'contao.csrf.token_manager' => ['services', 'contao.csrf.token_manager', 'getContao_Csrf_TokenManagerService', false],
            'contao.framework' => ['services', 'contao.framework', 'getContao_FrameworkService', false],
            'contao.routing.content_url_generator' => ['services', 'contao.routing.content_url_generator', 'getContao_Routing_ContentUrlGeneratorService', false],
            'event_dispatcher' => ['services', 'event_dispatcher', 'getEventDispatcherService', false],
            'fos_http_cache.http.symfony_response_tagger' => ['services', 'fos_http_cache.http.symfony_response_tagger', 'getFosHttpCache_Http_SymfonyResponseTaggerService', false],
            'http_kernel' => ['services', 'http_kernel', 'getHttpKernelService', false],
            'logger' => ['privates', 'monolog.logger', 'getMonolog_LoggerService', false],
            'parameter_bag' => ['privates', 'parameter_bag', 'getParameterBagService', false],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'router' => ['services', 'router', 'getRouterService', false],
            'security.authorization_checker' => ['services', 'security.authorization_checker', 'getSecurity_AuthorizationCheckerService', false],
            'security.csrf.token_manager' => ['privates', 'security.csrf.token_manager', 'getSecurity_Csrf_TokenManagerService', true],
            'security.token_storage' => ['services', 'security.token_storage', 'getSecurity_TokenStorageService', false],
            'twig' => ['services', 'twig', 'getTwigService', false],
        ], [
            'contao.cache.entity_tags' => '?',
            'contao.csrf.token_manager' => 'Contao\\CoreBundle\\Csrf\\ContaoCsrfTokenManager',
            'contao.framework' => '?',
            'contao.routing.content_url_generator' => '?',
            'event_dispatcher' => '?',
            'fos_http_cache.http.symfony_response_tagger' => '?',
            'http_kernel' => '?',
            'logger' => '?',
            'parameter_bag' => '?',
            'request_stack' => '?',
            'router' => '?',
            'security.authorization_checker' => '?',
            'security.csrf.token_manager' => '?',
            'security.token_storage' => '?',
            'twig' => '?',
        ]);
    }

    /*
     * Gets the private '.service_locator.fwb2A_j' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_Fwb2AJService($container)
    {
        return $container->privates['.service_locator.fwb2A_j'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.firewall.map.context.contao_backend' => ['privates', 'security.firewall.map.context.contao_backend', 'getSecurity_Firewall_Map_Context_ContaoBackendService', true],
            'security.firewall.map.context.contao_frontend' => ['privates', 'security.firewall.map.context.contao_frontend', 'getSecurity_Firewall_Map_Context_ContaoFrontendService', true],
        ], [
            'security.firewall.map.context.contao_backend' => '?',
            'security.firewall.map.context.contao_frontend' => '?',
        ]);
    }

    /*
     * Gets the private 'contao.controller_resolver' shared service.
     *
     * @return \Contao\CoreBundle\HttpKernel\ControllerResolver
     */
    protected static function getContao_ControllerResolverService($container)
    {
        $a = ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container));

        if (isset($container->privates['contao.controller_resolver'])) {
            return $container->privates['contao.controller_resolver'];
        }
        $b = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($container, $a);
        $b->allowControllers(['Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController', 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController']);
        $b->allowControllers(['Contao\\CoreBundle\\Controller\\BackendController', 'Contao\\CoreBundle\\Controller\\BackendPreviewController', 'Contao\\CoreBundle\\Controller\\BackendPreviewSwitchController', 'Contao\\CoreBundle\\Controller\\CaptchaController', 'Contao\\CoreBundle\\Controller\\ContentElement\\AccordionController', 'Contao\\CoreBundle\\Controller\\ContentElement\\CodeController', 'Contao\\CoreBundle\\Controller\\ContentElement\\DescriptionListController', 'Contao\\CoreBundle\\Controller\\ContentElement\\DownloadsController', 'Contao\\CoreBundle\\Controller\\ContentElement\\ElementGroupController', 'Contao\\CoreBundle\\Controller\\ContentElement\\HeadlineController', 'Contao\\CoreBundle\\Controller\\ContentElement\\HtmlController', 'Contao\\CoreBundle\\Controller\\ContentElement\\HyperlinkController', 'Contao\\CoreBundle\\Controller\\ContentElement\\ImagesController', 'Contao\\CoreBundle\\Controller\\ContentElement\\ListController', 'Contao\\CoreBundle\\Controller\\ContentElement\\MarkdownController', 'Contao\\CoreBundle\\Controller\\ContentElement\\PlayerController', 'Contao\\CoreBundle\\Controller\\ContentElement\\SwiperController', 'Contao\\CoreBundle\\Controller\\ContentElement\\TableController', 'Contao\\CoreBundle\\Controller\\ContentElement\\TemplateController', 'Contao\\CoreBundle\\Controller\\ContentElement\\TeaserController', 'Contao\\CoreBundle\\Controller\\ContentElement\\TextController', 'Contao\\CoreBundle\\Controller\\ContentElement\\ToplinkController', 'Contao\\CoreBundle\\Controller\\ContentElement\\UnfilteredHtmlController', 'Contao\\CoreBundle\\Controller\\ContentElement\\VideoController', 'Contao\\CoreBundle\\Controller\\CspReporterController', 'Contao\\CoreBundle\\Controller\\FaviconController', 'Contao\\CoreBundle\\Controller\\FrontendController', 'Contao\\CoreBundle\\Controller\\FrontendModule\\FeedReaderController', 'Contao\\CoreBundle\\Controller\\FrontendModule\\RootPageDependentModulesController', 'Contao\\CoreBundle\\Controller\\FrontendModule\\TemplateController', 'Contao\\CoreBundle\\Controller\\FrontendModule\\TwoFactorController', 'Contao\\CoreBundle\\Controller\\FrontendModule\\UnfilteredHtmlController', 'Contao\\CoreBundle\\Controller\\ImagesController', 'Contao\\CoreBundle\\Controller\\InsertTagsController', 'Contao\\CoreBundle\\Controller\\Page\\ErrorPageController', 'Contao\\CoreBundle\\Controller\\Page\\RootPageController', 'Contao\\CoreBundle\\Controller\\PreviewLinkController', 'Contao\\CoreBundle\\Controller\\RobotsTxtController', 'Contao\\CoreBundle\\Controller\\SitemapController', 'Contao\\NewsBundle\\Controller\\Page\\NewsFeedController', 'Terminal42\\MultipageFormsBundle\\Controller\\FrontendModule\\StepsController']);

        return $container->privates['contao.controller_resolver'] = new \Contao\CoreBundle\HttpKernel\ControllerResolver($b, ($container->services['contao.fragment.registry'] ?? self::getContao_Fragment_RegistryService($container)));
    }

    /*
     * Gets the private 'contao.csp.parser' shared service.
     *
     * @return \Contao\CoreBundle\Csp\CspParser
     */
    protected static function getContao_Csp_ParserService($container)
    {
        return $container->privates['contao.csp.parser'] = new \Contao\CoreBundle\Csp\CspParser(new \Nelmio\SecurityBundle\ContentSecurityPolicy\PolicyManager());
    }

    /*
     * Gets the private 'contao.listener.backend_locale' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\BackendLocaleListener
     */
    protected static function getContao_Listener_BackendLocaleService($container)
    {
        $a = ($container->services['security.helper'] ?? self::getSecurity_HelperService($container));

        if (isset($container->privates['contao.listener.backend_locale'])) {
            return $container->privates['contao.listener.backend_locale'];
        }

        return $container->privates['contao.listener.backend_locale'] = new \Contao\CoreBundle\EventListener\BackendLocaleListener($a, ($container->services['translator'] ?? self::getTranslatorService($container)));
    }

    /*
     * Gets the private 'contao.listener.backend_noindex' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\BackendNoindexListener
     */
    protected static function getContao_Listener_BackendNoindexService($container)
    {
        return $container->privates['contao.listener.backend_noindex'] = new \Contao\CoreBundle\EventListener\BackendNoindexListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)));
    }

    /*
     * Gets the private 'contao.listener.backend_preview_redirect' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\BackendPreviewRedirectListener
     */
    protected static function getContao_Listener_BackendPreviewRedirectService($container)
    {
        return $container->privates['contao.listener.backend_preview_redirect'] = new \Contao\CoreBundle\EventListener\BackendPreviewRedirectListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)));
    }

    /*
     * Gets the private 'contao.listener.backend_rebuild_cache_message' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\BackendRebuildCacheMessageListener
     */
    protected static function getContao_Listener_BackendRebuildCacheMessageService($container)
    {
        return $container->privates['contao.listener.backend_rebuild_cache_message'] = new \Contao\CoreBundle\EventListener\BackendRebuildCacheMessageListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), ($container->services['cache.system'] ?? self::getCache_SystemService($container)), ($container->services['translator'] ?? self::getTranslatorService($container)));
    }

    /*
     * Gets the private 'contao.listener.csrf_token_cookie' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\CsrfTokenCookieSubscriber
     */
    protected static function getContao_Listener_CsrfTokenCookieService($container)
    {
        return $container->privates['contao.listener.csrf_token_cookie'] = new \Contao\CoreBundle\EventListener\CsrfTokenCookieSubscriber(($container->privates['contao.csrf.token_storage'] ??= new \Contao\CoreBundle\Csrf\MemoryTokenStorage()), 'csrf_');
    }

    /*
     * Gets the private 'contao.listener.interest_cohort' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\InterestCohortListener
     */
    protected static function getContao_Listener_InterestCohortService($container)
    {
        return $container->privates['contao.listener.interest_cohort'] = new \Contao\CoreBundle\EventListener\InterestCohortListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)));
    }

    /*
     * Gets the private 'contao.listener.locale' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\LocaleSubscriber
     */
    protected static function getContao_Listener_LocaleService($container)
    {
        return $container->privates['contao.listener.locale'] = new \Contao\CoreBundle\EventListener\LocaleSubscriber(($container->services['translator'] ?? self::getTranslatorService($container)), ($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), ($container->services['contao.intl.locales'] ?? self::getContao_Intl_LocalesService($container)));
    }

    /*
     * Gets the private 'contao.listener.make_backend_response_uncacheable' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\MakeBackendResponseUncacheableListener
     */
    protected static function getContao_Listener_MakeBackendResponseUncacheableService($container)
    {
        return $container->privates['contao.listener.make_backend_response_uncacheable'] = new \Contao\CoreBundle\EventListener\MakeBackendResponseUncacheableListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)));
    }

    /*
     * Gets the private 'contao.listener.make_response_private' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\MakeResponsePrivateListener
     */
    protected static function getContao_Listener_MakeResponsePrivateService($container)
    {
        return $container->privates['contao.listener.make_response_private'] = new \Contao\CoreBundle\EventListener\MakeResponsePrivateListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)));
    }

    /*
     * Gets the private 'contao.listener.merge_http_headers' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\MergeHttpHeadersListener
     */
    protected static function getContao_Listener_MergeHttpHeadersService($container)
    {
        return $container->privates['contao.listener.merge_http_headers'] = new \Contao\CoreBundle\EventListener\MergeHttpHeadersListener(($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)));
    }

    /*
     * Gets the private 'contao.listener.page_access' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\PageAccessListener
     */
    protected static function getContao_Listener_PageAccessService($container)
    {
        $a = ($container->services['security.helper'] ?? self::getSecurity_HelperService($container));

        if (isset($container->privates['contao.listener.page_access'])) {
            return $container->privates['contao.listener.page_access'];
        }

        return $container->privates['contao.listener.page_access'] = new \Contao\CoreBundle\EventListener\PageAccessListener(($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)), $a);
    }

    /*
     * Gets the private 'contao.listener.page_trail_cache_tags' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\PageTrailCacheTagsListener
     */
    protected static function getContao_Listener_PageTrailCacheTagsService($container)
    {
        return $container->privates['contao.listener.page_trail_cache_tags'] = new \Contao\CoreBundle\EventListener\PageTrailCacheTagsListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), ($container->services['fos_http_cache.http.symfony_response_tagger'] ?? self::getFosHttpCache_Http_SymfonyResponseTaggerService($container)));
    }

    /*
     * Gets the private 'contao.listener.preview_authentication' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\PreviewAuthenticationListener
     */
    protected static function getContao_Listener_PreviewAuthenticationService($container)
    {
        $a = ($container->services['contao.security.token_checker'] ?? self::getContao_Security_TokenCheckerService($container));

        if (isset($container->privates['contao.listener.preview_authentication'])) {
            return $container->privates['contao.listener.preview_authentication'];
        }
        $b = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->privates['contao.listener.preview_authentication'])) {
            return $container->privates['contao.listener.preview_authentication'];
        }

        return $container->privates['contao.listener.preview_authentication'] = new \Contao\CoreBundle\EventListener\PreviewAuthenticationListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), $a, $b, ($container->services['uri_signer'] ??= new \Symfony\Component\HttpFoundation\UriSigner($container->getEnv('APP_SECRET'))));
    }

    /*
     * Gets the private 'contao.listener.preview_toolbar' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\PreviewToolbarListener
     */
    protected static function getContao_Listener_PreviewToolbarService($container)
    {
        $a = ($container->services['contao.security.token_checker'] ?? self::getContao_Security_TokenCheckerService($container));

        if (isset($container->privates['contao.listener.preview_toolbar'])) {
            return $container->privates['contao.listener.preview_toolbar'];
        }
        $b = ($container->services['twig'] ?? self::getTwigService($container));

        if (isset($container->privates['contao.listener.preview_toolbar'])) {
            return $container->privates['contao.listener.preview_toolbar'];
        }
        $c = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->privates['contao.listener.preview_toolbar'])) {
            return $container->privates['contao.listener.preview_toolbar'];
        }

        return $container->privates['contao.listener.preview_toolbar'] = new \Contao\CoreBundle\EventListener\PreviewToolbarListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), $a, $b, $c, ($container->privates['contao.routing.response_context.csp_handler_factory'] ?? self::getContao_Routing_ResponseContext_CspHandlerFactoryService($container)), '/preview.php');
    }

    /*
     * Gets the private 'contao.listener.referer_id' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\RefererIdListener
     */
    protected static function getContao_Listener_RefererIdService($container)
    {
        return $container->privates['contao.listener.referer_id'] = new \Contao\CoreBundle\EventListener\RefererIdListener(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator(48), ($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)));
    }

    /*
     * Gets the private 'contao.listener.request_token' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\RequestTokenListener
     */
    protected static function getContao_Listener_RequestTokenService($container)
    {
        return $container->privates['contao.listener.request_token'] = new \Contao\CoreBundle\EventListener\RequestTokenListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), ($container->services['contao.csrf.token_manager'] ?? self::getContao_Csrf_TokenManagerService($container)), 'contao_csrf_token', 'csrf_');
    }

    /*
     * Gets the private 'contao.listener.security.two_factor_frontend' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\Security\TwoFactorFrontendListener
     */
    protected static function getContao_Listener_Security_TwoFactorFrontendService($container)
    {
        $a = ($container->services['contao.routing.content_url_generator'] ?? self::getContao_Routing_ContentUrlGeneratorService($container));

        if (isset($container->privates['contao.listener.security.two_factor_frontend'])) {
            return $container->privates['contao.listener.security.two_factor_frontend'];
        }

        return $container->privates['contao.listener.security.two_factor_frontend'] = new \Contao\CoreBundle\EventListener\Security\TwoFactorFrontendListener(($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)), ($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), ($container->services['contao.routing.page_finder'] ?? self::getContao_Routing_PageFinderService($container)), $a, ($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), $container->parameters['scheb_two_factor.security_tokens']);
    }

    /*
     * Gets the private 'contao.listener.service_unavailable' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\ServiceUnavailableListener
     */
    protected static function getContao_Listener_ServiceUnavailableService($container)
    {
        return $container->privates['contao.listener.service_unavailable'] = new \Contao\CoreBundle\EventListener\ServiceUnavailableListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)));
    }

    /*
     * Gets the private 'contao.listener.store_referer' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\StoreRefererListener
     */
    protected static function getContao_Listener_StoreRefererService($container)
    {
        $a = ($container->services['security.helper'] ?? self::getSecurity_HelperService($container));

        if (isset($container->privates['contao.listener.store_referer'])) {
            return $container->privates['contao.listener.store_referer'];
        }

        return $container->privates['contao.listener.store_referer'] = new \Contao\CoreBundle\EventListener\StoreRefererListener($a, ($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)));
    }

    /*
     * Gets the private 'contao.listener.transport_security_header' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\TransportSecurityHeaderListener
     */
    protected static function getContao_Listener_TransportSecurityHeaderService($container)
    {
        return $container->privates['contao.listener.transport_security_header'] = new \Contao\CoreBundle\EventListener\TransportSecurityHeaderListener(($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), 31536000);
    }

    /*
     * Gets the private 'contao.listener.user_session' shared service.
     *
     * @return \Contao\CoreBundle\EventListener\UserSessionListener
     */
    protected static function getContao_Listener_UserSessionService($container)
    {
        $a = ($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container));

        if (isset($container->privates['contao.listener.user_session'])) {
            return $container->privates['contao.listener.user_session'];
        }
        $b = ($container->services['security.helper'] ?? self::getSecurity_HelperService($container));

        if (isset($container->privates['contao.listener.user_session'])) {
            return $container->privates['contao.listener.user_session'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['contao.listener.user_session'])) {
            return $container->privates['contao.listener.user_session'];
        }

        return $container->privates['contao.listener.user_session'] = new \Contao\CoreBundle\EventListener\UserSessionListener($a, $b, ($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), $c);
    }

    /*
     * Gets the private 'contao.monolog.handler' shared service.
     *
     * @return \Contao\CoreBundle\Monolog\ContaoTableHandler
     */
    protected static function getContao_Monolog_HandlerService($container)
    {
        return $container->privates['contao.monolog.handler'] = new \Contao\CoreBundle\Monolog\ContaoTableHandler(#[\Closure(name: 'doctrine.dbal.default_connection', class: 'Doctrine\\DBAL\\Connection')] fn () => ($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container)));
    }

    /*
     * Gets the private 'contao.monolog.processor' shared service.
     *
     * @return \Contao\CoreBundle\Monolog\ContaoTableProcessor
     */
    protected static function getContao_Monolog_ProcessorService($container)
    {
        return $container->privates['contao.monolog.processor'] = new \Contao\CoreBundle\Monolog\ContaoTableProcessor(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)));
    }

    /*
     * Gets the private 'contao.routing.matcher.published_filter' shared service.
     *
     * @return \Contao\CoreBundle\Routing\Matcher\PublishedFilter
     */
    protected static function getContao_Routing_Matcher_PublishedFilterService($container)
    {
        $a = ($container->services['contao.security.token_checker'] ?? self::getContao_Security_TokenCheckerService($container));

        if (isset($container->privates['contao.routing.matcher.published_filter'])) {
            return $container->privates['contao.routing.matcher.published_filter'];
        }

        return $container->privates['contao.routing.matcher.published_filter'] = new \Contao\CoreBundle\Routing\Matcher\PublishedFilter($a);
    }

    /*
     * Gets the private 'contao.routing.response_context.csp_handler_factory' shared service.
     *
     * @return \Contao\CoreBundle\Routing\ResponseContext\Csp\CspHandlerFactory
     */
    protected static function getContao_Routing_ResponseContext_CspHandlerFactoryService($container)
    {
        return $container->privates['contao.routing.response_context.csp_handler_factory'] = new \Contao\CoreBundle\Routing\ResponseContext\Csp\CspHandlerFactory(($container->privates['contao.csp.parser'] ?? self::getContao_Csp_ParserService($container)), 3072, ($container->services['monolog.logger.contao.error'] ?? self::getMonolog_Logger_Contao_ErrorService($container)));
    }

    /*
     * Gets the private 'contao.routing.route_404_provider' shared service.
     *
     * @return \Contao\CoreBundle\Routing\Route404Provider
     */
    protected static function getContao_Routing_Route404ProviderService($container)
    {
        $a = ($container->services['contao.routing.page_registry'] ?? self::getContao_Routing_PageRegistryService($container));

        if (isset($container->privates['contao.routing.route_404_provider'])) {
            return $container->privates['contao.routing.route_404_provider'];
        }

        return $container->privates['contao.routing.route_404_provider'] = new \Contao\CoreBundle\Routing\Route404Provider(($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)), new \Contao\CoreBundle\Routing\Candidates\LocaleCandidates($a), $a);
    }

    /*
     * Gets the private 'contao.routing.route_provider' shared service.
     *
     * @return \Contao\CoreBundle\Routing\RouteProvider
     */
    protected static function getContao_Routing_RouteProviderService($container)
    {
        $a = ($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container));

        if (isset($container->privates['contao.routing.route_provider'])) {
            return $container->privates['contao.routing.route_provider'];
        }
        $b = ($container->services['contao.routing.page_registry'] ?? self::getContao_Routing_PageRegistryService($container));

        if (isset($container->privates['contao.routing.route_provider'])) {
            return $container->privates['contao.routing.route_provider'];
        }

        return $container->privates['contao.routing.route_provider'] = new \Contao\CoreBundle\Routing\RouteProvider(($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)), new \Contao\CoreBundle\Routing\Candidates\PageCandidates($a, $b), $b);
    }

    /*
     * Gets the private 'contao.twig.loader.auto_refresh_template_hierarchy_listener' shared service.
     *
     * @return \Contao\CoreBundle\Twig\Loader\AutoRefreshTemplateHierarchyListener
     */
    protected static function getContao_Twig_Loader_AutoRefreshTemplateHierarchyListenerService($container)
    {
        $a = ($container->services['contao.twig.filesystem_loader'] ?? self::getContao_Twig_FilesystemLoaderService($container));

        if (isset($container->privates['contao.twig.loader.auto_refresh_template_hierarchy_listener'])) {
            return $container->privates['contao.twig.loader.auto_refresh_template_hierarchy_listener'];
        }

        return $container->privates['contao.twig.loader.auto_refresh_template_hierarchy_listener'] = new \Contao\CoreBundle\Twig\Loader\AutoRefreshTemplateHierarchyListener($a, 'prod');
    }

    /*
     * Gets the private 'controller.is_granted_attribute_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener
     */
    protected static function getController_IsGrantedAttributeListenerService($container)
    {
        $a = ($container->services['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container));

        if (isset($container->privates['controller.is_granted_attribute_listener'])) {
            return $container->privates['controller.is_granted_attribute_listener'];
        }

        return $container->privates['controller.is_granted_attribute_listener'] = new \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener($a, new \Symfony\Component\ExpressionLanguage\ExpressionLanguage(($container->services['cache.security_is_granted_attribute_expression_language'] ?? self::getCache_SecurityIsGrantedAttributeExpressionLanguageService($container))));
    }

    /*
     * Gets the private 'doctrine.dbal.default_connection.event_manager' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\ContainerAwareEventManager
     */
    protected static function getDoctrine_Dbal_DefaultConnection_EventManagerService($container)
    {
        return $container->privates['doctrine.dbal.default_connection.event_manager'] = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Codefog\\HasteBundle\\EventListener\\DcaRelationsListener' => ['privates', 'Codefog\\HasteBundle\\EventListener\\DcaRelationsListener', 'getDcaRelationsListenerService', true],
            'Codefog\\HasteBundle\\EventListener\\DoctrineOrmListener' => ['privates', 'Codefog\\HasteBundle\\EventListener\\DoctrineOrmListener', 'getDoctrineOrmListenerService', true],
            'contao.listener.doctrine_schema' => ['privates', 'contao.listener.doctrine_schema', 'getContao_Listener_DoctrineSchemaService', true],
            'contao_manager.listener.doctrine_alter_table' => ['privates', 'contao_manager.listener.doctrine_alter_table', 'getContaoManager_Listener_DoctrineAlterTableService', true],
            'doctrine.orm.default_listeners.attach_entity_listeners' => ['privates', 'doctrine.orm.default_listeners.attach_entity_listeners', 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService', true],
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener' => ['privates', 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener', 'getDoctrine_Orm_Listeners_DoctrineDbalCacheAdapterSchemaListenerService', true],
            'doctrine.orm.listeners.doctrine_token_provider_schema_listener' => ['privates', 'doctrine.orm.listeners.doctrine_token_provider_schema_listener', 'getDoctrine_Orm_Listeners_DoctrineTokenProviderSchemaListenerService', true],
            'doctrine.orm.listeners.lock_store_schema_listener' => ['privates', 'doctrine.orm.listeners.lock_store_schema_listener', 'getDoctrine_Orm_Listeners_LockStoreSchemaListenerService', true],
            'doctrine.orm.listeners.pdo_session_handler_schema_listener' => ['privates', 'doctrine.orm.listeners.pdo_session_handler_schema_listener', 'getDoctrine_Orm_Listeners_PdoSessionHandlerSchemaListenerService', true],
            'doctrine.orm.messenger.doctrine_schema_listener' => ['privates', 'doctrine.orm.messenger.doctrine_schema_listener', 'getDoctrine_Orm_Messenger_DoctrineSchemaListenerService', true],
        ], [
            'Codefog\\HasteBundle\\EventListener\\DcaRelationsListener' => '?',
            'Codefog\\HasteBundle\\EventListener\\DoctrineOrmListener' => '?',
            'contao.listener.doctrine_schema' => '?',
            'contao_manager.listener.doctrine_alter_table' => '?',
            'doctrine.orm.default_listeners.attach_entity_listeners' => '?',
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener' => '?',
            'doctrine.orm.listeners.doctrine_token_provider_schema_listener' => '?',
            'doctrine.orm.listeners.lock_store_schema_listener' => '?',
            'doctrine.orm.listeners.pdo_session_handler_schema_listener' => '?',
            'doctrine.orm.messenger.doctrine_schema_listener' => '?',
        ]), ['Codefog\\HasteBundle\\EventListener\\DoctrineOrmListener', [['postGenerateSchema'], 'doctrine.orm.messenger.doctrine_schema_listener'], [['onSchemaCreateTable'], 'doctrine.orm.messenger.doctrine_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.doctrine_token_provider_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.pdo_session_handler_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.lock_store_schema_listener'], [['loadClassMetadata'], 'doctrine.orm.default_listeners.attach_entity_listeners'], [['postGenerateSchema'], 'contao.listener.doctrine_schema'], [['onSchemaAlterTableRenameColumn'], 'contao_manager.listener.doctrine_alter_table'], [['postGenerateSchema'], 'Codefog\\HasteBundle\\EventListener\\DcaRelationsListener']]);
    }

    /*
     * Gets the private 'doctrine.orm.default_configuration' shared service.
     *
     * @return \Doctrine\ORM\Configuration
     */
    protected static function getDoctrine_Orm_DefaultConfigurationService($container)
    {
        $container->privates['doctrine.orm.default_configuration'] = $instance = new \Doctrine\ORM\Configuration();

        $a = ($container->privates['doctrine.system_cache_pool'] ?? self::getDoctrine_SystemCachePoolService($container));
        $b = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();
        $b->addDriver(new \Doctrine\ORM\Mapping\Driver\AttributeDriver([(\dirname(__DIR__, 4).'/vendor/contao/core-bundle/src/Entity')], false), 'Contao\\CoreBundle\\Entity');

        $instance->setEntityNamespaces(['ContaoCoreBundle' => 'Contao\\CoreBundle\\Entity']);
        $instance->setMetadataCache($a);
        $instance->setQueryCache($a);
        $instance->setResultCache(($container->privates['doctrine.result_cache_pool'] ?? self::getDoctrine_ResultCachePoolService($container)));
        $instance->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($b, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $instance->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $instance->setProxyNamespace('Proxies');
        $instance->setAutoGenerateProxyClasses(false);
        $instance->setSchemaIgnoreClasses([]);
        $instance->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $instance->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $instance->setNamingStrategy(new \Doctrine\ORM\Mapping\DefaultNamingStrategy());
        $instance->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $instance->setTypedFieldMapper(new \Doctrine\ORM\Mapping\DefaultTypedFieldMapper());
        $instance->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $instance->setLazyGhostObjectEnabled(true);
        $instance->setIdentityGenerationPreferences([]);
        $instance->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'contao.repository.cron_job' => ['privates', 'contao.repository.cron_job', 'getContao_Repository_CronJobService', true],
        ], [
            'contao.repository.cron_job' => '?',
        ])));

        return $instance;
    }

    /*
     * Gets the private 'doctrine.result_cache_pool' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected static function getDoctrine_ResultCachePoolService($container)
    {
        $container->privates['doctrine.result_cache_pool'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('Wxl70-NCud', 0, ($container->targetDir.''.'/pools/app'), ($container->privates['cache.default_marshaller'] ??= new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, false)));

        $instance->setLogger(($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));

        return $instance;
    }

    /*
     * Gets the private 'doctrine.system_cache_pool' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getDoctrine_SystemCachePoolService($container)
    {
        return $container->privates['doctrine.system_cache_pool'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('j0Ax+ZwY5s', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'esi_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SurrogateListener
     */
    protected static function getEsiListenerService($container)
    {
        return $container->privates['esi_listener'] = new \Symfony\Component\HttpKernel\EventListener\SurrogateListener(($container->privates['esi'] ??= new \Symfony\Component\HttpKernel\HttpCache\Esi()));
    }

    /*
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected static function getExceptionListenerService($container)
    {
        return $container->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container)), false, []);
    }

    /*
     * Gets the private 'fos_http_cache.event_listener.php8_attributes' shared service.
     *
     * @return \FOS\HttpCacheBundle\EventListener\Php8AttributesListener
     */
    protected static function getFosHttpCache_EventListener_Php8AttributesService($container)
    {
        return $container->privates['fos_http_cache.event_listener.php8_attributes'] = new \FOS\HttpCacheBundle\EventListener\Php8AttributesListener(($container->privates['contao.controller_resolver'] ?? self::getContao_ControllerResolverService($container)));
    }

    /*
     * Gets the private 'fos_http_cache.event_listener.tag' shared service.
     *
     * @return \FOS\HttpCacheBundle\EventListener\TagListener
     */
    protected static function getFosHttpCache_EventListener_TagService($container)
    {
        $a = ($container->services['fos_http_cache.cache_manager'] ?? self::getFosHttpCache_CacheManagerService($container));

        if (isset($container->privates['fos_http_cache.event_listener.tag'])) {
            return $container->privates['fos_http_cache.event_listener.tag'];
        }

        return $container->privates['fos_http_cache.event_listener.tag'] = new \FOS\HttpCacheBundle\EventListener\TagListener($a, ($container->services['fos_http_cache.http.symfony_response_tagger'] ?? self::getFosHttpCache_Http_SymfonyResponseTaggerService($container)), new \FOS\HttpCacheBundle\Http\RuleMatcher(new \FOS\HttpCacheBundle\Http\RequestMatcher\CacheableRequestMatcher(), new \FOS\HttpCacheBundle\Http\ResponseMatcher\CacheableResponseMatcher([])), ($container->privates['fos_http_cache.rule_matcher.must_invalidate'] ?? self::getFosHttpCache_RuleMatcher_MustInvalidateService($container)), NULL);
    }

    /*
     * Gets the private 'fos_http_cache.rule_matcher.must_invalidate' shared service.
     *
     * @return \FOS\HttpCacheBundle\Http\RuleMatcher
     */
    protected static function getFosHttpCache_RuleMatcher_MustInvalidateService($container)
    {
        return $container->privates['fos_http_cache.rule_matcher.must_invalidate'] = new \FOS\HttpCacheBundle\Http\RuleMatcher(new \FOS\HttpCacheBundle\Http\RequestMatcher\UnsafeRequestMatcher(), new \FOS\HttpCacheBundle\Http\ResponseMatcher\NonErrorResponseMatcher());
    }

    /*
     * Gets the private 'fragment.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener
     */
    protected static function getFragment_ListenerService($container)
    {
        return $container->privates['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener(($container->services['uri_signer'] ??= new \Symfony\Component\HttpFoundation\UriSigner($container->getEnv('APP_SECRET'))), '/_fragment');
    }

    /*
     * Gets the private 'http_client.transport' shared service.
     *
     * @return \Symfony\Contracts\HttpClient\HttpClientInterface
     */
    protected static function getHttpClient_TransportService($container)
    {
        $container->privates['http_client.transport'] = $instance = \Symfony\Component\HttpClient\HttpClient::create([], 6);

        $a = new \Monolog\Logger('http_client');
        $a->pushProcessor(($container->privates['contao.monolog.processor'] ?? self::getContao_Monolog_ProcessorService($container)));
        $a->pushProcessor(($container->privates['contao_manager.monolog.request_processor'] ??= new \Contao\ManagerBundle\Monolog\RequestProcessor()));
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $a->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));
        $a->pushHandler(($container->privates['contao.monolog.handler'] ?? self::getContao_Monolog_HandlerService($container)));

        $instance->setLogger($a);

        return $instance;
    }

    /*
     * Gets the private 'http_client.uri_template' shared service.
     *
     * @return \Symfony\Component\HttpClient\UriTemplateHttpClient
     */
    protected static function getHttpClient_UriTemplateService($container)
    {
        $a = ($container->privates['http_client.transport'] ?? self::getHttpClient_TransportService($container));

        if (isset($container->privates['http_client.uri_template'])) {
            return $container->privates['http_client.uri_template'];
        }

        return $container->privates['http_client.uri_template'] = new \Symfony\Component\HttpClient\UriTemplateHttpClient($a, NULL, []);
    }

    /*
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected static function getLocaleAwareListenerService($container)
    {
        return $container->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger('en'));
            yield 1 => ($container->privates['translator.default'] ?? self::getTranslator_DefaultService($container));
            yield 2 => ($container->privates['translation.locale_switcher'] ?? self::getTranslation_LocaleSwitcherService($container));
            yield 3 => ($container->services['translator'] ?? self::getTranslatorService($container));
        }, 4), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /*
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected static function getLocaleListenerService($container)
    {
        $a = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->privates['locale_listener'])) {
            return $container->privates['locale_listener'];
        }

        return $container->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), 'en', $a, false, []);
    }

    /*
     * Gets the private 'monolog.handler.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler
     */
    protected static function getMonolog_Handler_ConsoleService($container)
    {
        $container->privates['monolog.handler.console'] = $instance = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, true, [], []);

        $instance->pushProcessor(($container->privates['monolog.processor.psr_log_message'] ??= new \Monolog\Processor\PsrLogMessageProcessor()));

        return $instance;
    }

    /*
     * Gets the private 'monolog.handler.main' shared service.
     *
     * @return \Monolog\Handler\FingersCrossedHandler
     */
    protected static function getMonolog_Handler_MainService($container)
    {
        $a = new \Monolog\Handler\RotatingFileHandler((\dirname(__DIR__, 3).'/logs/prod.log'), 10, 'info', true, NULL, false);
        $a->pushProcessor(($container->privates['monolog.processor.psr_log_message'] ??= new \Monolog\Processor\PsrLogMessageProcessor()));
        $a->setFilenameFormat('{filename}-{date}', 'Y-m-d');

        return $container->privates['monolog.handler.main'] = new \Monolog\Handler\FingersCrossedHandler($a, new \Symfony\Bridge\Monolog\Handler\FingersCrossed\HttpCodeActivationStrategy(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), [['code' => 400, 'urls' => []], ['code' => 401, 'urls' => []], ['code' => 403, 'urls' => []], ['code' => 404, 'urls' => []], ['code' => 503, 'urls' => []]], new \Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy('error')), 0, true, true, NULL);
    }

    /*
     * Gets the private 'monolog.logger' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_LoggerService($container)
    {
        $container->privates['monolog.logger'] = $instance = new \Monolog\Logger('app');

        $instance->pushProcessor(($container->privates['contao.monolog.processor'] ?? self::getContao_Monolog_ProcessorService($container)));
        $instance->pushProcessor(($container->privates['contao_manager.monolog.request_processor'] ??= new \Contao\ManagerBundle\Monolog\RequestProcessor()));
        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));
        $instance->pushHandler(($container->privates['contao.monolog.handler'] ?? self::getContao_Monolog_HandlerService($container)));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.cache' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_Logger_CacheService($container)
    {
        $container->privates['monolog.logger.cache'] = $instance = new \Monolog\Logger('cache');

        $instance->pushProcessor(($container->privates['contao.monolog.processor'] ?? self::getContao_Monolog_ProcessorService($container)));
        $instance->pushProcessor(($container->privates['contao_manager.monolog.request_processor'] ??= new \Contao\ManagerBundle\Monolog\RequestProcessor()));
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));
        $instance->pushHandler(($container->privates['contao.monolog.handler'] ?? self::getContao_Monolog_HandlerService($container)));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.request' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_Logger_RequestService($container)
    {
        $container->privates['monolog.logger.request'] = $instance = new \Monolog\Logger('request');

        $instance->pushProcessor(($container->privates['contao.monolog.processor'] ?? self::getContao_Monolog_ProcessorService($container)));
        $instance->pushProcessor(($container->privates['contao_manager.monolog.request_processor'] ??= new \Contao\ManagerBundle\Monolog\RequestProcessor()));
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));
        $instance->pushHandler(($container->privates['contao.monolog.handler'] ?? self::getContao_Monolog_HandlerService($container)));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.security' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_Logger_SecurityService($container)
    {
        $container->privates['monolog.logger.security'] = $instance = new \Monolog\Logger('security');

        $instance->pushProcessor(($container->privates['contao.monolog.processor'] ?? self::getContao_Monolog_ProcessorService($container)));
        $instance->pushProcessor(($container->privates['contao_manager.monolog.request_processor'] ??= new \Contao\ManagerBundle\Monolog\RequestProcessor()));
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));
        $instance->pushHandler(($container->privates['contao.monolog.handler'] ?? self::getContao_Monolog_HandlerService($container)));

        return $instance;
    }

    /*
     * Gets the private 'nelmio_cors.cors_listener' shared service.
     *
     * @return \Nelmio\CorsBundle\EventListener\CorsListener
     */
    protected static function getNelmioCors_CorsListenerService($container)
    {
        $a = ($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container));

        if (isset($container->privates['nelmio_cors.cors_listener'])) {
            return $container->privates['nelmio_cors.cors_listener'];
        }

        return $container->privates['nelmio_cors.cors_listener'] = new \Nelmio\CorsBundle\EventListener\CorsListener(new \Nelmio\CorsBundle\Options\Resolver([new \Nelmio\CorsBundle\Options\ConfigProvider([], $container->parameters['nelmio_cors.defaults']), new \Contao\CoreBundle\Cors\WebsiteRootsConfigProvider($a)]));
    }

    /*
     * Gets the private 'nelmio_security.clickjacking_listener' shared service.
     *
     * @return \Nelmio\SecurityBundle\EventListener\ClickjackingListener
     */
    protected static function getNelmioSecurity_ClickjackingListenerService($container)
    {
        return $container->privates['nelmio_security.clickjacking_listener'] = new \Nelmio\SecurityBundle\EventListener\ClickjackingListener($container->parameters['nelmio_security.clickjacking.paths'], [], []);
    }

    /*
     * Gets the private 'nelmio_security.csp_listener' shared service.
     *
     * @return \Nelmio\SecurityBundle\EventListener\ContentSecurityPolicyListener
     */
    protected static function getNelmioSecurity_CspListenerService($container)
    {
        $a = new \Nelmio\SecurityBundle\ContentSecurityPolicy\PolicyManager();

        return $container->privates['nelmio_security.csp_listener'] = new \Nelmio\SecurityBundle\EventListener\ContentSecurityPolicyListener(\Nelmio\SecurityBundle\ContentSecurityPolicy\ConfigurationDirectiveSetBuilder::create($a, ['enabled' => true, 'request_matcher' => NULL, 'hosts' => [], 'content_types' => [], 'report_endpoint' => ['log_channel' => NULL, 'log_formatter' => 'nelmio_security.csp_report.log_formatter', 'log_level' => 'notice', 'filters' => ['domains' => true, 'schemes' => true, 'browser_bugs' => true, 'injected_scripts' => true], 'dismiss' => []], 'compat_headers' => true, 'report_logger_service' => 'logger', 'hash' => ['algorithm' => 'sha256']], 'report'), \Nelmio\SecurityBundle\ContentSecurityPolicy\ConfigurationDirectiveSetBuilder::create($a, ['enabled' => true, 'request_matcher' => NULL, 'hosts' => [], 'content_types' => [], 'report_endpoint' => ['log_channel' => NULL, 'log_formatter' => 'nelmio_security.csp_report.log_formatter', 'log_level' => 'notice', 'filters' => ['domains' => true, 'schemes' => true, 'browser_bugs' => true, 'injected_scripts' => true], 'dismiss' => []], 'compat_headers' => true, 'report_logger_service' => 'logger', 'hash' => ['algorithm' => 'sha256']], 'enforce'), new \Nelmio\SecurityBundle\ContentSecurityPolicy\NonceGenerator(16), ($container->privates['nelmio_security.sha_computer'] ??= new \Nelmio\SecurityBundle\ContentSecurityPolicy\ShaComputer('sha256')), true, [], []);
    }

    /*
     * Gets the private 'nelmio_security.referrer_policy_listener' shared service.
     *
     * @return \Nelmio\SecurityBundle\EventListener\ReferrerPolicyListener
     */
    protected static function getNelmioSecurity_ReferrerPolicyListenerService($container)
    {
        return $container->privates['nelmio_security.referrer_policy_listener'] = new \Nelmio\SecurityBundle\EventListener\ReferrerPolicyListener($container->parameters['nelmio_security.referrer_policy.policies']);
    }

    /*
     * Gets the private 'nelmio_security.xss_protection_listener' shared service.
     *
     * @return \Nelmio\SecurityBundle\EventListener\XssProtectionListener
     */
    protected static function getNelmioSecurity_XssProtectionListenerService($container)
    {
        return $container->privates['nelmio_security.xss_protection_listener'] = \Nelmio\SecurityBundle\EventListener\XssProtectionListener::fromConfig(['enabled' => true, 'mode_block' => true, 'report_uri' => NULL]);
    }

    /*
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected static function getParameterBagService($container)
    {
        return $container->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container);
    }

    /*
     * Gets the private 'router.default' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected static function getRouter_DefaultService($container)
    {
        $a = ($container->privates['contao.monolog.handler'] ?? self::getContao_Monolog_HandlerService($container));

        if (isset($container->privates['router.default'])) {
            return $container->privates['router.default'];
        }
        $b = new \Monolog\Logger('router');
        $b->pushProcessor(($container->privates['contao.monolog.processor'] ?? self::getContao_Monolog_ProcessorService($container)));
        $b->pushProcessor(($container->privates['contao_manager.monolog.request_processor'] ??= new \Contao\ManagerBundle\Monolog\RequestProcessor()));
        $b->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $b->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));
        $b->pushHandler($a);

        $container->privates['router.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', true],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $container), 'contao_manager.routing.route_loader::loadFromPlugins', ['cache_dir' => $container->targetDir.'', 'debug' => false, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => false, 'resource_type' => 'service'], ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)), $b, 'en');

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ??= new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory()));
        $instance->addExpressionLanguageProvider(($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /*
     * Gets the private 'router.expression_language_provider' shared service.
     *
     * @return \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider
     */
    protected static function getRouter_ExpressionLanguageProviderService($container)
    {
        return $container->privates['router.expression_language_provider'] = new \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'env' => ['privates', 'container.getenv', 'getContainer_GetenvService', true],
            'service' => ['services', 'container.get_routing_condition_service', 'getContainer_GetRoutingConditionServiceService', true],
        ], [
            'env' => 'Closure',
            'service' => 'Closure',
        ]));
    }

    /*
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected static function getRouter_RequestContextService($container)
    {
        $container->privates['router.request_context'] = $instance = \Symfony\Component\Routing\RequestContext::fromUri('', 'localhost', 'http', 80, 443);

        $instance->setParameter('_functions', ($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /*
     * Gets the private 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected static function getRouterListenerService($container)
    {
        $a = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->privates['router_listener'])) {
            return $container->privates['router_listener'];
        }

        return $container->privates['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener($a, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container)), \dirname(__DIR__, 4), false);
    }

    /*
     * Gets the private 'scheb_two_factor.provider_preparation_recorder' shared service.
     *
     * @return \Scheb\TwoFactorBundle\Security\TwoFactor\Provider\TokenPreparationRecorder
     */
    protected static function getSchebTwoFactor_ProviderPreparationRecorderService($container)
    {
        return $container->privates['scheb_two_factor.provider_preparation_recorder'] = new \Scheb\TwoFactorBundle\Security\TwoFactor\Provider\TokenPreparationRecorder(($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)));
    }

    /*
     * Gets the private 'scheb_two_factor.provider_registry' shared service.
     *
     * @return \Scheb\TwoFactorBundle\Security\TwoFactor\Provider\TwoFactorProviderRegistry
     */
    protected static function getSchebTwoFactor_ProviderRegistryService($container)
    {
        return $container->privates['scheb_two_factor.provider_registry'] = new \Scheb\TwoFactorBundle\Security\TwoFactor\Provider\TwoFactorProviderRegistry(new RewindableGenerator(function () use ($container) {
            yield 'contao' => ($container->privates['contao.security.two_factor.provider'] ?? $container->load('getContao_Security_TwoFactor_ProviderService'));
        }, 1));
    }

    /*
     * Gets the private 'scheb_two_factor.trusted_cookie_response_listener' shared service.
     *
     * @return \Scheb\TwoFactorBundle\Security\TwoFactor\Trusted\TrustedCookieResponseListener
     */
    protected static function getSchebTwoFactor_TrustedCookieResponseListenerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['scheb_two_factor.trusted_cookie_response_listener'] = $container->createProxy('TrustedCookieResponseListenerGhost4e97e67', static fn () => \TrustedCookieResponseListenerGhost4e97e67::createLazyGhost(static fn ($proxy) => self::getSchebTwoFactor_TrustedCookieResponseListenerService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-trusted-device/Security/TwoFactor/Trusted/TrustedCookieResponseListener.php';

        return ($lazyLoad->__construct(($container->privates['scheb_two_factor.trusted_token_storage'] ?? self::getSchebTwoFactor_TrustedTokenStorageService($container)), 5184000, 'trusted_device', NULL, 'lax', '/', NULL) && false ?: $lazyLoad);
    }

    /*
     * Gets the private 'scheb_two_factor.trusted_token_encoder' shared service.
     *
     * @return \Scheb\TwoFactorBundle\Security\TwoFactor\Trusted\TrustedDeviceTokenEncoder
     */
    protected static function getSchebTwoFactor_TrustedTokenEncoderService($container)
    {
        return $container->privates['scheb_two_factor.trusted_token_encoder'] = new \Scheb\TwoFactorBundle\Security\TwoFactor\Trusted\TrustedDeviceTokenEncoder(new \Scheb\TwoFactorBundle\Security\TwoFactor\Trusted\JwtTokenEncoder(\Lcobucci\JWT\Configuration::forSymmetricSigner(new \Lcobucci\JWT\Signer\Hmac\Sha256(), \Lcobucci\JWT\Signer\Key\InMemory::plainText($container->getEnv('APP_SECRET')))), 5184000);
    }

    /*
     * Gets the private 'scheb_two_factor.trusted_token_storage' shared service.
     *
     * @return \Scheb\TwoFactorBundle\Security\TwoFactor\Trusted\TrustedDeviceTokenStorage
     */
    protected static function getSchebTwoFactor_TrustedTokenStorageService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['scheb_two_factor.trusted_token_storage'] = $container->createProxy('TrustedDeviceTokenStorageGhost09532b7', static fn () => \TrustedDeviceTokenStorageGhost09532b7::createLazyGhost(static fn ($proxy) => self::getSchebTwoFactor_TrustedTokenStorageService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/scheb/2fa-trusted-device/Security/TwoFactor/Trusted/TrustedDeviceTokenStorage.php';

        return ($lazyLoad->__construct(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['scheb_two_factor.trusted_token_encoder'] ?? self::getSchebTwoFactor_TrustedTokenEncoderService($container)), 'trusted_device') && false ?: $lazyLoad);
    }

    /*
     * Gets the private 'security.access.decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager
     */
    protected static function getSecurity_Access_DecisionManagerService($container)
    {
        $a = ($container->services['security.firewall.map'] ?? self::getSecurity_Firewall_MapService($container));

        if (isset($container->privates['security.access.decision_manager'])) {
            return $container->privates['security.access.decision_manager'];
        }

        return $container->privates['security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.access.authenticated_voter'] ?? $container->load('getSecurity_Access_AuthenticatedVoterService'));
            yield 1 => ($container->privates['scheb_two_factor.security.access.authenticated_voter'] ??= new \Scheb\TwoFactorBundle\Security\Authorization\Voter\TwoFactorInProgressVoter());
            yield 2 => ($container->privates['security.access.simple_role_voter'] ??= new \Symfony\Component\Security\Core\Authorization\Voter\RoleVoter());
            yield 3 => ($container->privates['security.access.expression_voter'] ?? $container->load('getSecurity_Access_ExpressionVoterService'));
            yield 4 => ($container->privates['contao.security.data_container.table_access_voter'] ?? $container->load('getContao_Security_DataContainer_TableAccessVoterService'));
            yield 5 => ($container->privates['contao.security.backend_access_voter'] ?? $container->load('getContao_Security_BackendAccessVoterService'));
            yield 6 => ($container->privates['contao.security.data_container.article_content_voter'] ?? $container->load('getContao_Security_DataContainer_ArticleContentVoterService'));
            yield 7 => ($container->privates['contao.security.data_container.content_composition_voter'] ?? $container->load('getContao_Security_DataContainer_ContentCompositionVoterService'));
            yield 8 => ($container->privates['contao.security.data_container.content_element_nesting_voter'] ?? $container->load('getContao_Security_DataContainer_ContentElementNestingVoterService'));
            yield 9 => ($container->privates['contao.security.data_container.content_element_type_voter'] ?? $container->load('getContao_Security_DataContainer_ContentElementTypeVoterService'));
            yield 10 => ($container->privates['contao.security.data_container.favorites_voter'] ??= new \Contao\CoreBundle\Security\Voter\DataContainer\FavoritesVoter());
            yield 11 => ($container->privates['contao.security.data_container.form_access_voter'] ?? $container->load('getContao_Security_DataContainer_FormAccessVoterService'));
            yield 12 => ($container->privates['contao.security.data_container.form_field_access_voter'] ?? $container->load('getContao_Security_DataContainer_FormFieldAccessVoterService'));
            yield 13 => ($container->privates['contao.security.data_container.frontend_module_voter'] ?? $container->load('getContao_Security_DataContainer_FrontendModuleVoterService'));
            yield 14 => ($container->privates['contao.security.data_container.image_size_access_voter'] ?? $container->load('getContao_Security_DataContainer_ImageSizeAccessVoterService'));
            yield 15 => ($container->privates['contao.security.data_container.image_size_item_access_voter'] ?? $container->load('getContao_Security_DataContainer_ImageSizeItemAccessVoterService'));
            yield 16 => ($container->privates['contao.security.data_container.layout_access_voter'] ?? $container->load('getContao_Security_DataContainer_LayoutAccessVoterService'));
            yield 17 => ($container->privates['contao.security.data_container.page_permission_voter'] ?? $container->load('getContao_Security_DataContainer_PagePermissionVoterService'));
            yield 18 => ($container->privates['contao.security.data_container.page_type_access_voter'] ?? $container->load('getContao_Security_DataContainer_PageTypeAccessVoterService'));
            yield 19 => ($container->privates['contao.security.data_container.undo_voter'] ?? $container->load('getContao_Security_DataContainer_UndoVoterService'));
            yield 20 => ($container->privates['contao.security.data_container.user_access_voter'] ?? $container->load('getContao_Security_DataContainer_UserAccessVoterService'));
            yield 21 => ($container->privates['contao.security.member_group_voter'] ??= new \Contao\CoreBundle\Security\Voter\MemberGroupVoter());
            yield 22 => ($container->privates['contao_faq.security.faq_access_voter'] ?? $container->load('getContaoFaq_Security_FaqAccessVoterService'));
            yield 23 => ($container->privates['contao_faq.security.faq_category_access_voter'] ?? $container->load('getContaoFaq_Security_FaqCategoryAccessVoterService'));
            yield 24 => ($container->privates['contao_news.security.news_access_voter'] ?? $container->load('getContaoNews_Security_NewsAccessVoterService'));
            yield 25 => ($container->privates['contao_news.security.news_archive_access_voter'] ?? $container->load('getContaoNews_Security_NewsArchiveAccessVoterService'));
            yield 26 => ($container->privates['contao_news.security.news_content_voter'] ?? $container->load('getContaoNews_Security_NewsContentVoterService'));
            yield 27 => ($container->privates['contao_calendar.security.calendar_access_voter'] ?? $container->load('getContaoCalendar_Security_CalendarAccessVoterService'));
            yield 28 => ($container->privates['contao_calendar.security.calendar_content_voter'] ?? $container->load('getContaoCalendar_Security_CalendarContentVoterService'));
            yield 29 => ($container->privates['contao_calendar.security.calendar_events_access_voter'] ?? $container->load('getContaoCalendar_Security_CalendarEventsAccessVoterService'));
            yield 30 => ($container->privates['contao_newsletter.security.newsletter_access_voter'] ?? $container->load('getContaoNewsletter_Security_NewsletterAccessVoterService'));
            yield 31 => ($container->privates['contao_newsletter.security.newsletter_channel_access_voter'] ?? $container->load('getContaoNewsletter_Security_NewsletterChannelAccessVoterService'));
            yield 32 => ($container->privates['contao_newsletter.security.newsletter_recipients_access_voter'] ?? $container->load('getContaoNewsletter_Security_NewsletterRecipientsAccessVoterService'));
            yield 33 => ($container->privates['contao.security.default_data_container_voter'] ??= new \Contao\CoreBundle\Security\Voter\DataContainer\DefaultDataContainerVoter());
        }, 34), new \Contao\CoreBundle\Security\Authentication\ContaoStrategy(new \Symfony\Component\Security\Core\Authorization\Strategy\AffirmativeStrategy(false), new \Symfony\Component\Security\Core\Authorization\Strategy\PriorityStrategy(), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a));
    }

    /*
     * Gets the private 'security.authentication.provider_preparation_listener.two_factor.contao_backend' shared service.
     *
     * @return \Scheb\TwoFactorBundle\Security\TwoFactor\Provider\TwoFactorProviderPreparationListener
     */
    protected static function getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoBackendService($container)
    {
        return $container->privates['security.authentication.provider_preparation_listener.two_factor.contao_backend'] = new \Scheb\TwoFactorBundle\Security\TwoFactor\Provider\TwoFactorProviderPreparationListener(($container->privates['scheb_two_factor.provider_registry'] ?? self::getSchebTwoFactor_ProviderRegistryService($container)), ($container->privates['scheb_two_factor.provider_preparation_recorder'] ?? self::getSchebTwoFactor_ProviderPreparationRecorderService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), 'contao_backend', true, false);
    }

    /*
     * Gets the private 'security.authentication.provider_preparation_listener.two_factor.contao_frontend' shared service.
     *
     * @return \Scheb\TwoFactorBundle\Security\TwoFactor\Provider\TwoFactorProviderPreparationListener
     */
    protected static function getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoFrontendService($container)
    {
        return $container->privates['security.authentication.provider_preparation_listener.two_factor.contao_frontend'] = new \Scheb\TwoFactorBundle\Security\TwoFactor\Provider\TwoFactorProviderPreparationListener(($container->privates['scheb_two_factor.provider_registry'] ?? self::getSchebTwoFactor_ProviderRegistryService($container)), ($container->privates['scheb_two_factor.provider_preparation_recorder'] ?? self::getSchebTwoFactor_ProviderPreparationRecorderService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), 'contao_frontend', true, false);
    }

    /*
     * Gets the private 'security.context_listener.0' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ContextListener
     */
    protected static function getSecurity_ContextListener_0Service($container)
    {
        $a = ($container->privates['monolog.logger.security'] ?? self::getMonolog_Logger_SecurityService($container));

        if (isset($container->privates['security.context_listener.0'])) {
            return $container->privates['security.context_listener.0'];
        }
        $b = ($container->privates['security.event_dispatcher.contao_backend'] ?? self::getSecurity_EventDispatcher_ContaoBackendService($container));

        if (isset($container->privates['security.context_listener.0'])) {
            return $container->privates['security.context_listener.0'];
        }

        return $container->privates['security.context_listener.0'] = new \Symfony\Component\Security\Http\Firewall\ContextListener(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['contao.security.backend_user_provider'] ?? $container->load('getContao_Security_BackendUserProviderService'));
            yield 1 => ($container->privates['contao.security.frontend_user_provider'] ?? $container->load('getContao_Security_FrontendUserProviderService'));
        }, 2), 'contao_backend', $a, $b, ($container->services['security.authentication.trust_resolver'] ?? self::getSecurity_Authentication_TrustResolverService($container)), [($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), 'enableUsageTracking']);
    }

    /*
     * Gets the private 'security.context_listener.1' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ContextListener
     */
    protected static function getSecurity_ContextListener_1Service($container)
    {
        $a = ($container->privates['monolog.logger.security'] ?? self::getMonolog_Logger_SecurityService($container));

        if (isset($container->privates['security.context_listener.1'])) {
            return $container->privates['security.context_listener.1'];
        }
        $b = ($container->privates['security.event_dispatcher.contao_frontend'] ?? self::getSecurity_EventDispatcher_ContaoFrontendService($container));

        if (isset($container->privates['security.context_listener.1'])) {
            return $container->privates['security.context_listener.1'];
        }

        return $container->privates['security.context_listener.1'] = new \Symfony\Component\Security\Http\Firewall\ContextListener(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['contao.security.backend_user_provider'] ?? $container->load('getContao_Security_BackendUserProviderService'));
            yield 1 => ($container->privates['contao.security.frontend_user_provider'] ?? $container->load('getContao_Security_FrontendUserProviderService'));
        }, 2), 'contao_frontend', $a, $b, ($container->services['security.authentication.trust_resolver'] ?? self::getSecurity_Authentication_TrustResolverService($container)), [($container->services['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), 'enableUsageTracking']);
    }

    /*
     * Gets the private 'security.event_dispatcher.contao_backend' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getSecurity_EventDispatcher_ContaoBackendService($container)
    {
        $container->privates['security.event_dispatcher.contao_backend'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.contao_backend.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.contao_backend.user_provider'] ?? $container->load('getSecurity_Listener_ContaoBackend_UserProviderService')), 'checkPassport'], 2048);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.session.contao_backend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionStrategyListener')] fn () => ($container->privates['security.listener.session.contao_backend'] ?? $container->load('getSecurity_Listener_Session_ContaoBackendService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.default.contao_backend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\DefaultLogoutListener')] fn () => ($container->privates['security.logout.listener.default.contao_backend'] ?? $container->load('getSecurity_Logout_Listener_Default_ContaoBackendService')), 'onLogout'], 64);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.session.contao_backend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionLogoutListener')] fn () => ($container->privates['security.logout.listener.session.contao_backend'] ??= new \Symfony\Component\Security\Http\EventListener\SessionLogoutListener()), 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.login_throttling.contao_backend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.contao_backend'] ?? $container->load('getSecurity_Listener_LoginThrottling_ContaoBackendService')), 'checkPassport'], 2080);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'security.listener.login_throttling.contao_backend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.contao_backend'] ?? $container->load('getSecurity_Listener_LoginThrottling_ContaoBackendService')), 'onFailedLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.login_throttling.contao_backend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.contao_backend'] ?? $container->load('getSecurity_Listener_LoginThrottling_ContaoBackendService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\AuthenticationTokenCreatedEvent', [#[\Closure(name: 'security.authentication.token_created_listener.two_factor.contao_backend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Event\\AuthenticationTokenListener')] fn () => ($container->privates['security.authentication.token_created_listener.two_factor.contao_backend'] ?? $container->load('getSecurity_Authentication_TokenCreatedListener_TwoFactor_ContaoBackendService')), 'onAuthenticationTokenCreated'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_checker.contao_backend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.contao_backend'] ?? $container->load('getSecurity_Listener_UserChecker_ContaoBackendService')), 'preCheckCredentials'], 256);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.listener.user_checker.contao_backend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.contao_backend'] ?? $container->load('getSecurity_Listener_UserChecker_ContaoBackendService')), 'postCheckCredentials'], 256);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'contao.listener.security.logout', class: 'Contao\\CoreBundle\\EventListener\\Security\\LogoutListener')] fn () => ($container->privates['contao.listener.security.logout'] ?? $container->load('getContao_Listener_Security_LogoutService')), '__invoke'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.check_two_factor_code', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\CheckTwoFactorCodeListener')] fn () => ($container->privates['scheb_two_factor.security.listener.check_two_factor_code'] ?? $container->load('getSchebTwoFactor_Security_Listener_CheckTwoFactorCodeService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.suppress_remember_me', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\SuppressRememberMeListener')] fn () => ($container->privates['scheb_two_factor.security.listener.suppress_remember_me'] ??= new \Scheb\TwoFactorBundle\Security\Http\EventListener\SuppressRememberMeListener()), 'onSuccessfulLogin'], -63);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'scheb_two_factor.security.authentication_success_event_suppressor', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Event\\AuthenticationSuccessEventSuppressor')] fn () => ($container->privates['scheb_two_factor.security.authentication_success_event_suppressor'] ??= new \Scheb\TwoFactorBundle\Security\TwoFactor\Event\AuthenticationSuccessEventSuppressor()), 'onLogin'], 9223372036854775806);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.trusted_device', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\TrustedDeviceListener')] fn () => ($container->privates['scheb_two_factor.security.listener.trusted_device'] ?? $container->load('getSchebTwoFactor_Security_Listener_TrustedDeviceService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.check_backup_code', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\CheckBackupCodeListener')] fn () => ($container->privates['scheb_two_factor.security.listener.check_backup_code'] ?? $container->load('getSchebTwoFactor_Security_Listener_CheckBackupCodeService')), 'checkPassport'], 16);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_backend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_backend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoBackendService($container)), 'onLogin'], 9223372036854775807);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_frontend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_frontend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoFrontendService($container)), 'onLogin'], 9223372036854775807);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /*
     * Gets the private 'security.event_dispatcher.contao_frontend' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getSecurity_EventDispatcher_ContaoFrontendService($container)
    {
        $container->privates['security.event_dispatcher.contao_frontend'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.contao_frontend.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.contao_frontend.user_provider'] ?? $container->load('getSecurity_Listener_ContaoFrontend_UserProviderService')), 'checkPassport'], 2048);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.session.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionStrategyListener')] fn () => ($container->privates['security.listener.session.contao_frontend'] ?? $container->load('getSecurity_Listener_Session_ContaoFrontendService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.default.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\DefaultLogoutListener')] fn () => ($container->privates['security.logout.listener.default.contao_frontend'] ?? $container->load('getSecurity_Logout_Listener_Default_ContaoFrontendService')), 'onLogout'], 64);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.session.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionLogoutListener')] fn () => ($container->privates['security.logout.listener.session.contao_frontend'] ??= new \Symfony\Component\Security\Http\EventListener\SessionLogoutListener()), 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.login_throttling.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.contao_frontend'] ?? $container->load('getSecurity_Listener_LoginThrottling_ContaoFrontendService')), 'checkPassport'], 2080);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'security.listener.login_throttling.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.contao_frontend'] ?? $container->load('getSecurity_Listener_LoginThrottling_ContaoFrontendService')), 'onFailedLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.login_throttling.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.contao_frontend'] ?? $container->load('getSecurity_Listener_LoginThrottling_ContaoFrontendService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\AuthenticationTokenCreatedEvent', [#[\Closure(name: 'security.authentication.token_created_listener.two_factor.contao_frontend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Event\\AuthenticationTokenListener')] fn () => ($container->privates['security.authentication.token_created_listener.two_factor.contao_frontend'] ?? $container->load('getSecurity_Authentication_TokenCreatedListener_TwoFactor_ContaoFrontendService')), 'onAuthenticationTokenCreated'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.check_remember_me_conditions.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckRememberMeConditionsListener')] fn () => ($container->privates['security.listener.check_remember_me_conditions.contao_frontend'] ?? $container->load('getSecurity_Listener_CheckRememberMeConditions_ContaoFrontendService')), 'onSuccessfulLogin'], -32);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.remember_me.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\RememberMeListener')] fn () => ($container->privates['security.listener.remember_me.contao_frontend'] ?? $container->load('getSecurity_Listener_RememberMe_ContaoFrontendService')), 'onSuccessfulLogin'], -64);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'security.listener.remember_me.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\RememberMeListener')] fn () => ($container->privates['security.listener.remember_me.contao_frontend'] ?? $container->load('getSecurity_Listener_RememberMe_ContaoFrontendService')), 'clearCookie'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.listener.remember_me.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\RememberMeListener')] fn () => ($container->privates['security.listener.remember_me.contao_frontend'] ?? $container->load('getSecurity_Listener_RememberMe_ContaoFrontendService')), 'clearCookie'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\TokenDeauthenticatedEvent', [#[\Closure(name: 'security.listener.remember_me.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\RememberMeListener')] fn () => ($container->privates['security.listener.remember_me.contao_frontend'] ?? $container->load('getSecurity_Listener_RememberMe_ContaoFrontendService')), 'clearCookie'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_checker.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.contao_frontend'] ?? $container->load('getSecurity_Listener_UserChecker_ContaoFrontendService')), 'preCheckCredentials'], 256);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.listener.user_checker.contao_frontend', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.contao_frontend'] ?? $container->load('getSecurity_Listener_UserChecker_ContaoFrontendService')), 'postCheckCredentials'], 256);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'contao.listener.security.logout', class: 'Contao\\CoreBundle\\EventListener\\Security\\LogoutListener')] fn () => ($container->privates['contao.listener.security.logout'] ?? $container->load('getContao_Listener_Security_LogoutService')), '__invoke'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.check_two_factor_code', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\CheckTwoFactorCodeListener')] fn () => ($container->privates['scheb_two_factor.security.listener.check_two_factor_code'] ?? $container->load('getSchebTwoFactor_Security_Listener_CheckTwoFactorCodeService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.suppress_remember_me', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\SuppressRememberMeListener')] fn () => ($container->privates['scheb_two_factor.security.listener.suppress_remember_me'] ??= new \Scheb\TwoFactorBundle\Security\Http\EventListener\SuppressRememberMeListener()), 'onSuccessfulLogin'], -63);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'scheb_two_factor.security.authentication_success_event_suppressor', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Event\\AuthenticationSuccessEventSuppressor')] fn () => ($container->privates['scheb_two_factor.security.authentication_success_event_suppressor'] ??= new \Scheb\TwoFactorBundle\Security\TwoFactor\Event\AuthenticationSuccessEventSuppressor()), 'onLogin'], 9223372036854775806);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.trusted_device', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\TrustedDeviceListener')] fn () => ($container->privates['scheb_two_factor.security.listener.trusted_device'] ?? $container->load('getSchebTwoFactor_Security_Listener_TrustedDeviceService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'scheb_two_factor.security.listener.check_backup_code', class: 'Scheb\\TwoFactorBundle\\Security\\Http\\EventListener\\CheckBackupCodeListener')] fn () => ($container->privates['scheb_two_factor.security.listener.check_backup_code'] ?? $container->load('getSchebTwoFactor_Security_Listener_CheckBackupCodeService')), 'checkPassport'], 16);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_backend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_backend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoBackendService($container)), 'onLogin'], 9223372036854775807);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.authentication.provider_preparation_listener.two_factor.contao_frontend', class: 'Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\TwoFactorProviderPreparationListener')] fn () => ($container->privates['security.authentication.provider_preparation_listener.two_factor.contao_frontend'] ?? self::getSecurity_Authentication_ProviderPreparationListener_TwoFactor_ContaoFrontendService($container)), 'onLogin'], 9223372036854775807);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /*
     * Gets the private 'security.firewall' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener
     */
    protected static function getSecurity_FirewallService($container)
    {
        $a = ($container->services['security.firewall.map'] ?? self::getSecurity_Firewall_MapService($container));

        if (isset($container->privates['security.firewall'])) {
            return $container->privates['security.firewall'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['security.firewall'])) {
            return $container->privates['security.firewall'];
        }

        return $container->privates['security.firewall'] = new \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener($a, $b, ($container->services['security.logout_url_generator'] ?? self::getSecurity_LogoutUrlGeneratorService($container)));
    }

    /*
     * Gets the private 'session_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected static function getSessionListenerService($container)
    {
        return $container->privates['session_listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'logger' => ['privates', 'monolog.logger', 'getMonolog_LoggerService', false],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'session_factory' => ['privates', 'contao.session.factory', 'getContao_Session_FactoryService', true],
        ], [
            'logger' => '?',
            'request_stack' => '?',
            'session_factory' => '?',
        ]), false, $container->parameters['session.storage.options']);
    }

    /*
     * Gets the private 'translation.locale_switcher' shared service.
     *
     * @return \Symfony\Component\Translation\LocaleSwitcher
     */
    protected static function getTranslation_LocaleSwitcherService($container)
    {
        return $container->privates['translation.locale_switcher'] = new \Symfony\Component\Translation\LocaleSwitcher('en', new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger('en'));
            yield 1 => ($container->privates['translator.default'] ?? self::getTranslator_DefaultService($container));
            yield 2 => ($container->services['translator'] ?? self::getTranslatorService($container));
        }, 3), ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)));
    }

    /*
     * Gets the private 'translator.default' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected static function getTranslator_DefaultService($container)
    {
        $container->privates['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'translation.loader.csv' => ['privates', 'translation.loader.csv', 'getTranslation_Loader_CsvService', true],
            'translation.loader.dat' => ['privates', 'translation.loader.dat', 'getTranslation_Loader_DatService', true],
            'translation.loader.ini' => ['privates', 'translation.loader.ini', 'getTranslation_Loader_IniService', true],
            'translation.loader.json' => ['privates', 'translation.loader.json', 'getTranslation_Loader_JsonService', true],
            'translation.loader.mo' => ['privates', 'translation.loader.mo', 'getTranslation_Loader_MoService', true],
            'translation.loader.php' => ['privates', 'translation.loader.php', 'getTranslation_Loader_PhpService', true],
            'translation.loader.po' => ['privates', 'translation.loader.po', 'getTranslation_Loader_PoService', true],
            'translation.loader.qt' => ['privates', 'translation.loader.qt', 'getTranslation_Loader_QtService', true],
            'translation.loader.res' => ['privates', 'translation.loader.res', 'getTranslation_Loader_ResService', true],
            'translation.loader.xliff' => ['privates', 'translation.loader.xliff', 'getTranslation_Loader_XliffService', true],
            'translation.loader.yml' => ['privates', 'translation.loader.yml', 'getTranslation_Loader_YmlService', true],
        ], [
            'translation.loader.csv' => '?',
            'translation.loader.dat' => '?',
            'translation.loader.ini' => '?',
            'translation.loader.json' => '?',
            'translation.loader.mo' => '?',
            'translation.loader.php' => '?',
            'translation.loader.po' => '?',
            'translation.loader.qt' => '?',
            'translation.loader.res' => '?',
            'translation.loader.xliff' => '?',
            'translation.loader.yml' => '?',
        ]), new \Symfony\Component\Translation\Formatter\MessageFormatter(new \Symfony\Component\Translation\IdentityTranslator()), 'en', ['translation.loader.php' => ['php'], 'translation.loader.yml' => ['yaml', 'yml'], 'translation.loader.xliff' => ['xlf', 'xliff'], 'translation.loader.po' => ['po'], 'translation.loader.mo' => ['mo'], 'translation.loader.qt' => ['ts'], 'translation.loader.csv' => ['csv'], 'translation.loader.res' => ['res'], 'translation.loader.dat' => ['dat'], 'translation.loader.ini' => ['ini'], 'translation.loader.json' => ['json']], ['cache_dir' => ($container->targetDir.''.'/translations'), 'debug' => false, 'resource_files' => ['af' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.af.xlf')], 'ar' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ar.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.ar.xliff')], 'az' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.az.xlf')], 'be' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.be.xlf')], 'bg' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.bg.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.bg.xliff')], 'bs' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.bs.xlf')], 'ca' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ca.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.ca.xliff')], 'cs' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.cs.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.cs.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.cs.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.cs.xlf')], 'cy' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.cy.xlf')], 'da' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.da.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.da.xliff')], 'de' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.de.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.de.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.de.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.de.xlf'), (\dirname(__DIR__, 4).'/vendor/terminal42/contao-conditionalformfields/translations/conditionalformfields.de.yaml')], 'el' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.el.xlf')], 'en' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.en.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.en.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.en.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.en.xlf'), (\dirname(__DIR__, 4).'/vendor/terminal42/contao-conditionalformfields/translations/conditionalformfields.en.yaml')], 'es' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.es.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.es.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.es.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.es.xlf')], 'et' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.et.xlf')], 'eu' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.eu.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.eu.xliff')], 'fa' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fa.xlf')], 'fi' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fi.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.fi.xliff')], 'fr' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fr.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.fr.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.fr.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.fr.xlf')], 'gl' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.gl.xlf')], 'he' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.he.xlf')], 'hr' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hr.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.hr.yml')], 'hu' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hu.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.hu.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.hu.xliff')], 'hy' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hy.xlf')], 'id' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.id.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.id.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.id.xliff')], 'it' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.it.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.it.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.it.xlf')], 'ja' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ja.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.ja.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.ja.xlf')], 'lb' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lb.xlf')], 'lt' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lt.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.lt.xliff')], 'lv' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lv.xlf'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.lv.xlf')], 'mk' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.mk.xlf')], 'mn' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.mn.xlf')], 'my' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.my.xlf')], 'nb' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nb.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.nb.xliff')], 'nl' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nl.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.nl.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.nl.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.nl.xlf')], 'nn' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nn.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.nn.xliff')], 'no' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.no.xlf')], 'pl' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pl.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.pl.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.pl.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.pl.xlf')], 'pt' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pt.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.pt.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.pt.xlf')], 'pt_BR' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pt_BR.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.pt_BR.xliff')], 'ro' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ro.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.ro.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.ro.xliff')], 'ru' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ru.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.ru.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.ru.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.ru.xlf')], 'sk' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sk.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.sk.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.sk.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.sk.xlf')], 'sl' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sl.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.sl.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.sl.xlf')], 'sq' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sq.xlf')], 'sr_Cyrl' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sr_Cyrl.xlf')], 'sr_Latn' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sr_Latn.xlf')], 'sv' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sv.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.sv.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.sv.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.sv.xlf')], 'th' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.th.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.th.xliff')], 'tl' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.tl.xlf')], 'tr' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.tr.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.tr.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.tr.xliff'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.tr.xlf')], 'uk' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.uk.xlf'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations/SchebTwoFactorBundle.uk.yml'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.uk.xliff')], 'ur' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ur.xlf')], 'uz' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.uz.xlf')], 'vi' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.vi.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.vi.xliff')], 'zh_CN' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.zh_CN.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.zh_CN.xliff')], 'zh_TW' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.zh_TW.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.zh_TW.xliff')], 'bs_Latn_BA' => [(\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.bs_Latn_BA.xliff')], 'eo' => [(\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.eo.xliff')], 'hr_HR' => [(\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.hr_HR.xliff')], 'ky' => [(\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.ky.xliff')], 'pt_PT' => [(\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.pt_PT.xliff')], 'sr_Latin' => [(\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.sr_Latin.xliff')], 'zh' => [(\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.zh.xliff')], 'zh_HK' => [(\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations/time.zh_HK.xliff')], 'sr' => [(\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations/ContaoManagerBundle.sr.xlf')]], 'scanned_directories' => [(\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations'), (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle/Resources/translations'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/terminal42/contao-conditionalformfields/translations'), (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src/translations'), (\dirname(__DIR__, 4).'/vendor/nelmio/cors-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src/translations'), (\dirname(__DIR__, 4).'/vendor/twig/extra-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-menu-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/symfony-cmf/routing-bundle/src/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/terminal42/service-annotation-bundle/src/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/security-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/contao/core-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/league/flysystem-bundle/src/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_seo_helper/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_tabletree_widget/translations'), (\dirname(__DIR__, 4).'/vendor/contao/faq-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/codefog/contao-haste/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_megamenu/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_theme_updater/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_themer/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_autogrid/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_customelements/translations'), (\dirname(__DIR__, 4).'/vendor/contao/news-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/terminal42/contao-mp_forms/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_frontend_quickedit/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_revolutionslider/translations'), (\dirname(__DIR__, 4).'/vendor/contao/listing-bundle/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_privacy_manager/translations'), (\dirname(__DIR__, 4).'/vendor/contao/calendar-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/contao/newsletter-bundle/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_theme_settings/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_customelements_plugin_customcatalog/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_iconpicker/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_theme_templates/translations'), (\dirname(__DIR__, 4).'/vendor/contao/comments-bundle/translations'), (\dirname(__DIR__, 4).'/system/modules/pct_customcatalog_cc_hs4y_salzburg/translations'), (\dirname(__DIR__, 4).'/translations')], 'cache_vary' => ['scanned_directories' => ['vendor/symfony/security-core/Resources/translations', 'vendor/scheb/2fa-bundle/Resources/translations', 'vendor/knplabs/knp-time-bundle/translations', 'vendor/contao/manager-bundle/translations', 'vendor/terminal42/contao-conditionalformfields/translations', 'vendor/doctrine/doctrine-bundle/translations', 'vendor/symfony/framework-bundle/translations', 'vendor/symfony/monolog-bundle/translations', 'vendor/friendsofsymfony/http-cache-bundle/src/translations', 'vendor/nelmio/cors-bundle/translations', 'vendor/nelmio/security-bundle/src/translations', 'vendor/twig/extra-bundle/translations', 'vendor/knplabs/knp-menu-bundle/translations', 'vendor/symfony-cmf/routing-bundle/src/translations', 'vendor/symfony/twig-bundle/translations', 'vendor/terminal42/service-annotation-bundle/src/translations', 'vendor/symfony/security-bundle/translations', 'vendor/contao/core-bundle/translations', 'vendor/league/flysystem-bundle/src/translations', 'system/modules/pct_seo_helper/translations', 'system/modules/pct_tabletree_widget/translations', 'vendor/contao/faq-bundle/translations', 'vendor/codefog/contao-haste/translations', 'system/modules/pct_megamenu/translations', 'system/modules/pct_theme_updater/translations', 'system/modules/pct_themer/translations', 'system/modules/pct_autogrid/translations', 'system/modules/pct_customelements/translations', 'vendor/contao/news-bundle/translations', 'vendor/terminal42/contao-mp_forms/translations', 'system/modules/pct_frontend_quickedit/translations', 'system/modules/pct_revolutionslider/translations', 'vendor/contao/listing-bundle/translations', 'system/modules/pct_privacy_manager/translations', 'vendor/contao/calendar-bundle/translations', 'vendor/contao/newsletter-bundle/translations', 'system/modules/pct_theme_settings/translations', 'system/modules/pct_customelements_plugin_customcatalog/translations', 'system/modules/pct_iconpicker/translations', 'system/modules/pct_theme_templates/translations', 'vendor/contao/comments-bundle/translations', 'system/modules/pct_customcatalog_cc_hs4y_salzburg/translations', 'translations']]], []);

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ??= new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory()));
        $instance->setFallbackLocales(['en']);

        return $instance;
    }

    /*
     * Gets the private 'url_helper' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\UrlHelper
     */
    protected static function getUrlHelperService($container)
    {
        $a = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->privates['url_helper'])) {
            return $container->privates['url_helper'];
        }

        return $container->privates['url_helper'] = new \Symfony\Component\HttpFoundation\UrlHelper(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a);
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (!isset($this->parameterBag)) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.runtime_environment' => false,
        'kernel.runtime_mode' => false,
        'kernel.runtime_mode.web' => false,
        'kernel.runtime_mode.cli' => false,
        'kernel.runtime_mode.worker' => false,
        'kernel.build_dir' => false,
        'kernel.cache_dir' => false,
        'contao.dns_mapping' => false,
        'doctrine.orm.proxy_dir' => false,
        'kernel.secret' => false,
        'router.cache_dir' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        $container = $this;
        $value = match ($name) {
            'kernel.runtime_environment' => $container->getEnv('default:kernel.environment:APP_RUNTIME_ENV'),
            'kernel.runtime_mode' => $container->getEnv('query_string:default:container.runtime_mode:APP_RUNTIME_MODE'),
            'kernel.runtime_mode.web' => $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'),
            'kernel.runtime_mode.cli' => $container->getEnv('not:default:kernel.runtime_mode.web:'),
            'kernel.runtime_mode.worker' => $container->getEnv('bool:default::key:worker:default:kernel.runtime_mode:'),
            'kernel.build_dir' => $container->targetDir.'',
            'kernel.cache_dir' => $container->targetDir.'',
            'contao.dns_mapping' => $container->getEnv('json:DNS_MAPPING'),
            'doctrine.orm.proxy_dir' => ($container->targetDir.''.'/doctrine/orm/Proxies'),
            'kernel.secret' => $container->getEnv('APP_SECRET'),
            'router.cache_dir' => $container->targetDir.'',
            default => throw new ParameterNotFoundException($name),
        };
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 4),
            'kernel.environment' => 'prod',
            'kernel.debug' => false,
            'kernel.logs_dir' => (\dirname(__DIR__, 3).'/logs'),
            'kernel.bundles' => [
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'FOSHttpCacheBundle' => 'FOS\\HttpCacheBundle\\FOSHttpCacheBundle',
                'NelmioCorsBundle' => 'Nelmio\\CorsBundle\\NelmioCorsBundle',
                'NelmioSecurityBundle' => 'Nelmio\\SecurityBundle\\NelmioSecurityBundle',
                'SchebTwoFactorBundle' => 'Scheb\\TwoFactorBundle\\SchebTwoFactorBundle',
                'TwigExtraBundle' => 'Twig\\Extra\\TwigExtraBundle\\TwigExtraBundle',
                'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle',
                'KnpTimeBundle' => 'Knp\\Bundle\\TimeBundle\\KnpTimeBundle',
                'CmfRoutingBundle' => 'Symfony\\Cmf\\Bundle\\RoutingBundle\\CmfRoutingBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'Terminal42ServiceAnnotationBundle' => 'Terminal42\\ServiceAnnotationBundle\\Terminal42ServiceAnnotationBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'ContaoCoreBundle' => 'Contao\\CoreBundle\\ContaoCoreBundle',
                'FlysystemBundle' => 'League\\FlysystemBundle\\FlysystemBundle',
                'ContaoManagerBundle' => 'Contao\\ManagerBundle\\ContaoManagerBundle',
                'Terminal42ConditionalformfieldsBundle' => 'Terminal42\\ConditionalformfieldsBundle\\Terminal42ConditionalformfieldsBundle',
                'pct_seo_helper' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'pct_tabletree_widget' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'ContaoFaqBundle' => 'Contao\\FaqBundle\\ContaoFaqBundle',
                'CodefogHasteBundle' => 'Codefog\\HasteBundle\\CodefogHasteBundle',
                'pct_megamenu' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'pct_theme_updater' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'pct_themer' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'pct_autogrid' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'pct_customelements' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'ContaoNewsBundle' => 'Contao\\NewsBundle\\ContaoNewsBundle',
                'Terminal42MultipageFormsBundle' => 'Terminal42\\MultipageFormsBundle\\Terminal42MultipageFormsBundle',
                'pct_frontend_quickedit' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'pct_revolutionslider' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'ContaoListingBundle' => 'Contao\\ListingBundle\\ContaoListingBundle',
                'pct_privacy_manager' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'ContaoCalendarBundle' => 'Contao\\CalendarBundle\\ContaoCalendarBundle',
                'ContaoNewsletterBundle' => 'Contao\\NewsletterBundle\\ContaoNewsletterBundle',
                'pct_theme_settings' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'pct_customelements_plugin_customcatalog' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'pct_iconpicker' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'pct_theme_templates' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
                'ContaoCommentsBundle' => 'Contao\\CommentsBundle\\ContaoCommentsBundle',
                'pct_customcatalog_cc_hs4y_salzburg' => 'Contao\\CoreBundle\\HttpKernel\\Bundle\\ContaoModuleBundle',
            ],
            'kernel.bundles_metadata' => [
                'DoctrineBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ],
                'FrameworkBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'MonologBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ],
                'FOSHttpCacheBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/friendsofsymfony/http-cache-bundle/src'),
                    'namespace' => 'FOS\\HttpCacheBundle',
                ],
                'NelmioCorsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/nelmio/cors-bundle'),
                    'namespace' => 'Nelmio\\CorsBundle',
                ],
                'NelmioSecurityBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/nelmio/security-bundle/src'),
                    'namespace' => 'Nelmio\\SecurityBundle',
                ],
                'SchebTwoFactorBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/scheb/2fa-bundle'),
                    'namespace' => 'Scheb\\TwoFactorBundle',
                ],
                'TwigExtraBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/twig/extra-bundle'),
                    'namespace' => 'Twig\\Extra\\TwigExtraBundle',
                ],
                'KnpMenuBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/knplabs/knp-menu-bundle'),
                    'namespace' => 'Knp\\Bundle\\MenuBundle',
                ],
                'KnpTimeBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/knplabs/knp-time-bundle'),
                    'namespace' => 'Knp\\Bundle\\TimeBundle',
                ],
                'CmfRoutingBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony-cmf/routing-bundle/src'),
                    'namespace' => 'Symfony\\Cmf\\Bundle\\RoutingBundle',
                ],
                'TwigBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ],
                'Terminal42ServiceAnnotationBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/terminal42/service-annotation-bundle/src'),
                    'namespace' => 'Terminal42\\ServiceAnnotationBundle',
                ],
                'SecurityBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/security-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ],
                'ContaoCoreBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/contao/core-bundle'),
                    'namespace' => 'Contao\\CoreBundle',
                ],
                'FlysystemBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/league/flysystem-bundle/src'),
                    'namespace' => 'League\\FlysystemBundle',
                ],
                'ContaoManagerBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle'),
                    'namespace' => 'Contao\\ManagerBundle',
                ],
                'Terminal42ConditionalformfieldsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/terminal42/contao-conditionalformfields'),
                    'namespace' => 'Terminal42\\ConditionalformfieldsBundle',
                ],
                'pct_seo_helper' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_seo_helper'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'pct_tabletree_widget' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_tabletree_widget'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'ContaoFaqBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/contao/faq-bundle'),
                    'namespace' => 'Contao\\FaqBundle',
                ],
                'CodefogHasteBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/codefog/contao-haste'),
                    'namespace' => 'Codefog\\HasteBundle',
                ],
                'pct_megamenu' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_megamenu'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'pct_theme_updater' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_theme_updater'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'pct_themer' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_themer'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'pct_autogrid' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_autogrid'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'pct_customelements' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_customelements'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'ContaoNewsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/contao/news-bundle'),
                    'namespace' => 'Contao\\NewsBundle',
                ],
                'Terminal42MultipageFormsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/terminal42/contao-mp_forms'),
                    'namespace' => 'Terminal42\\MultipageFormsBundle',
                ],
                'pct_frontend_quickedit' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_frontend_quickedit'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'pct_revolutionslider' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_revolutionslider'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'ContaoListingBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/contao/listing-bundle'),
                    'namespace' => 'Contao\\ListingBundle',
                ],
                'pct_privacy_manager' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_privacy_manager'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'ContaoCalendarBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/contao/calendar-bundle'),
                    'namespace' => 'Contao\\CalendarBundle',
                ],
                'ContaoNewsletterBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/contao/newsletter-bundle'),
                    'namespace' => 'Contao\\NewsletterBundle',
                ],
                'pct_theme_settings' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_theme_settings'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'pct_customelements_plugin_customcatalog' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_customelements_plugin_customcatalog'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'pct_iconpicker' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_iconpicker'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'pct_theme_templates' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_theme_templates'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
                'ContaoCommentsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/contao/comments-bundle'),
                    'namespace' => 'Contao\\CommentsBundle',
                ],
                'pct_customcatalog_cc_hs4y_salzburg' => [
                    'path' => (\dirname(__DIR__, 4).'/system/modules/pct_customcatalog_cc_hs4y_salzburg'),
                    'namespace' => 'Contao\\CoreBundle\\HttpKernel\\Bundle',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'Contao_ManagerBundle_HttpKernel_ContaoKernelProdContainer',
            'locale' => 'en',
            'container.dumper.inline_class_loader' => true,
            'env(MAILER_DSN)' => 'native://default',
            'env(DNS_MAPPING)' => '[]',
            'contao.backend.route_prefix' => '/contao',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => [
                'default' => 'doctrine.orm.default_entity_manager',
            ],
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => [
                'binary_string' => [
                    'class' => 'Contao\\CoreBundle\\Doctrine\\DBAL\\Types\\BinaryStringType',
                ],
                'uuid' => [
                    'class' => 'Symfony\\Bridge\\Doctrine\\Types\\UuidType',
                ],
                'ulid' => [
                    'class' => 'Symfony\\Bridge\\Doctrine\\Types\\UlidType',
                ],
            ],
            'doctrine.connections' => [
                'default' => 'doctrine.dbal.default_connection',
            ],
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.metadata.attribute.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AttributeDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.typed_field_mapper.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultTypedFieldMapper',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => false,
            'doctrine.orm.enable_lazy_ghost_objects' => true,
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleSignalEvent' => 'console.signal',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
                'Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent' => 'security.authentication.success',
                'Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent' => 'security.interactive_login',
                'Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent' => 'security.switch_user',
                'Contao\\CoreBundle\\Event\\GenerateSymlinksEvent' => 'contao.generate_symlinks',
                'Contao\\CoreBundle\\Event\\MenuEvent' => 'contao.backend_menu_build',
                'Contao\\CoreBundle\\Event\\PreviewUrlCreateEvent' => 'contao.preview_url_create',
                'Contao\\CoreBundle\\Event\\PreviewUrlConvertEvent' => 'contao.preview_url_convert',
                'Contao\\CoreBundle\\Event\\RobotsTxtEvent' => 'contao.robots_txt',
                'Contao\\CoreBundle\\Event\\SitemapEvent' => 'contao.sitemap',
                'Contao\\CoreBundle\\Event\\SlugValidCharactersEvent' => 'contao.slug_valid_characters',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.http_method_override' => true,
            'kernel.trust_x_sendfile_type_header' => false,
            'kernel.trusted_hosts' => [

            ],
            'kernel.default_locale' => 'en',
            'kernel.enabled_locales' => [

            ],
            'kernel.error_controller' => 'error_controller',
            'debug.file_link_format' => NULL,
            'asset.request_context.base_path' => NULL,
            'asset.request_context.secure' => NULL,
            'translator.logging' => false,
            'translator.default_path' => (\dirname(__DIR__, 4).'/translations'),
            'debug.error_handler.throw_at' => 0,
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => 'contao_manager.routing.route_loader::loadFromPlugins',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => [
                'cache_limiter' => '0',
                'cookie_secure' => 'auto',
                'cookie_httponly' => true,
                'cookie_samesite' => 'lax',
                'gc_probability' => 1,
            ],
            'session.save_path' => NULL,
            'session.metadata.update_threshold' => 0,
            'data_collector.templates' => [

            ],
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => [

            ],
            'monolog.handlers_to_channels' => [
                'monolog.handler.deprecation' => [
                    'type' => 'inclusive',
                    'elements' => [
                        0 => 'deprecation',
                    ],
                ],
                'monolog.handler.console' => NULL,
                'monolog.handler.main' => [
                    'type' => 'exclusive',
                    'elements' => [
                        0 => 'deprecation',
                    ],
                ],
                'monolog.handler.contao' => NULL,
            ],
            'fos_http_cache.cacheable.response.additional_status' => [

            ],
            'fos_http_cache.proxy_client.symfony.options' => [
                'tags_header' => 'X-Cache-Tags',
                'tags_method' => 'PURGETAGS',
                'purge_method' => 'PURGE',
            ],
            'fos_http_cache.cache_manager.generate_url_type' => 0,
            'fos_http_cache.compiler_pass.tag_annotations' => false,
            'fos_http_cache.tag_handler.response_header' => 'X-Cache-Tags',
            'fos_http_cache.tag_handler.separator' => ',',
            'fos_http_cache.tag_handler.strict' => false,
            'nelmio_cors.map' => [

            ],
            'nelmio_cors.defaults' => [
                'allow_origin' => [

                ],
                'allow_credentials' => false,
                'allow_headers' => [

                ],
                'allow_private_network' => false,
                'expose_headers' => [

                ],
                'allow_methods' => [

                ],
                'max_age' => 0,
                'hosts' => [

                ],
                'origin_regex' => false,
                'forced_allow_origin_value' => NULL,
                'skip_same_as_origin' => true,
            ],
            'nelmio_cors.cors_listener.class' => 'Nelmio\\CorsBundle\\EventListener\\CorsListener',
            'nelmio_cors.options_resolver.class' => 'Nelmio\\CorsBundle\\Options\\Resolver',
            'nelmio_cors.options_provider.config.class' => 'Nelmio\\CorsBundle\\Options\\ConfigProvider',
            'nelmio_security.clickjacking.paths' => [
                '^/.*' => [
                    'header' => 'SAMEORIGIN',
                ],
            ],
            'nelmio_security.clickjacking.hosts' => [

            ],
            'nelmio_security.clickjacking.content_types' => [

            ],
            'nelmio_security.nonce_generator.number_of_bytes' => 16,
            'nelmio_security.csp.hash_algorithm' => 'sha256',
            'nelmio_security.csp.report_log_level' => 'notice',
            'nelmio_security.content_type.nosniff' => true,
            'nelmio_security.referrer_policy.policies' => [
                0 => 'no-referrer-when-downgrade',
                1 => 'strict-origin-when-cross-origin',
            ],
            'scheb_two_factor.model_manager_name' => NULL,
            'scheb_two_factor.security_tokens' => [
                0 => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken',
                1 => 'Symfony\\Component\\Security\\Http\\Authenticator\\Token\\PostAuthenticationToken',
            ],
            'scheb_two_factor.ip_whitelist' => [

            ],
            'scheb_two_factor.code_reuse_cache_duration' => 60,
            'scheb_two_factor.trusted_device.enabled' => true,
            'scheb_two_factor.trusted_device.cookie_name' => 'trusted_device',
            'scheb_two_factor.trusted_device.lifetime' => 5184000,
            'scheb_two_factor.trusted_device.extend_lifetime' => false,
            'scheb_two_factor.trusted_device.cookie_secure' => NULL,
            'scheb_two_factor.trusted_device.cookie_same_site' => 'lax',
            'scheb_two_factor.trusted_device.cookie_domain' => NULL,
            'scheb_two_factor.trusted_device.cookie_path' => '/',
            'knp_menu.renderer.list.options' => [

            ],
            'knp_menu.renderer.twig.options' => [

            ],
            'knp_menu.renderer.twig.template' => '@KnpMenu/menu.html.twig',
            'knp_menu.default_renderer' => 'twig',
            'cmf_routing.replace_symfony_router' => true,
            'twig.form.resources' => [
                0 => 'form_div_layout.html.twig',
            ],
            'twig.default_path' => (\dirname(__DIR__, 4).'/templates'),
            'security.role_hierarchy.roles' => [

            ],
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.authentication.hide_user_not_found' => true,
            'security.firewalls' => [
                0 => 'contao_backend',
                1 => 'contao_frontend',
            ],
            'security.logout_uris' => [

            ],
            'contao.web_dir' => (\dirname(__DIR__, 4).'/public'),
            'contao.console_path' => (\dirname(__DIR__, 4).'/bin/console'),
            'contao.upload_path' => 'files',
            'contao.editable_files' => 'css,csv,html,ini,js,json,less,md,scss,svg,svgz,ts,txt,xliff,xml,yml,yaml',
            'contao.preview_script' => '/preview.php',
            'contao.csrf_cookie_prefix' => 'csrf_',
            'contao.csrf_token_name' => 'contao_csrf_token',
            'contao.pretty_error_screens' => true,
            'contao.error_level' => 6135,
            'contao.locales' => [

            ],
            'contao.image.bypass_cache' => false,
            'contao.image.target_dir' => (\dirname(__DIR__, 4).'/assets/images'),
            'contao.image.valid_extensions' => [
                0 => 'jpg',
                1 => 'jpeg',
                2 => 'gif',
                3 => 'png',
                4 => 'tif',
                5 => 'tiff',
                6 => 'bmp',
                7 => 'svg',
                8 => 'svgz',
                9 => 'webp',
                10 => 'avif',
            ],
            'contao.image.imagine_options' => [
                'jpeg_quality' => 80,
                'jpeg_sampling_factors' => [
                    0 => 2,
                    1 => 1,
                    2 => 1,
                ],
                'interlace' => 'plane',
            ],
            'contao.image.reject_large_uploads' => false,
            'contao.image.preview.target_dir' => (\dirname(__DIR__, 4).'/assets/previews'),
            'contao.image.preview.default_size' => 512,
            'contao.image.preview.max_size' => 1024,
            'contao.security.two_factor.enforce_backend' => false,
            'contao.localconfig' => [

            ],
            'contao.backend.attributes' => [

            ],
            'contao.backend.custom_css' => [

            ],
            'contao.backend.custom_js' => [

            ],
            'contao.backend.badge_title' => '',
            'contao.backend.crawl_concurrency' => 5,
            'contao.intl.locales' => [

            ],
            'contao.intl.enabled_locales' => [

            ],
            'contao.intl.countries' => [

            ],
            'contao.insert_tags.allowed_tags' => [
                0 => '*',
            ],
            'contao.sanitizer.allowed_url_protocols' => [
                0 => 'http',
                1 => 'https',
                2 => 'ftp',
                3 => 'mailto',
                4 => 'tel',
                5 => 'data',
                6 => 'skype',
                7 => 'whatsapp',
            ],
            'contao.search.default_indexer.enable' => true,
            'contao.search.index_protected' => false,
            'contao_manager.manager_path' => 'contao-manager.phar.php',
            'contao.resources_paths' => [
                'ContaoCoreBundle' => (\dirname(__DIR__, 4).'/vendor/contao/core-bundle/contao'),
                'ContaoManagerBundle' => (\dirname(__DIR__, 4).'/vendor/contao/manager-bundle/contao'),
                'Terminal42ConditionalformfieldsBundle' => (\dirname(__DIR__, 4).'/vendor/terminal42/contao-conditionalformfields/contao'),
                'pct_seo_helper' => (\dirname(__DIR__, 4).'/system/modules/pct_seo_helper'),
                'pct_tabletree_widget' => (\dirname(__DIR__, 4).'/system/modules/pct_tabletree_widget'),
                'ContaoFaqBundle' => (\dirname(__DIR__, 4).'/vendor/contao/faq-bundle/contao'),
                'CodefogHasteBundle' => (\dirname(__DIR__, 4).'/vendor/codefog/contao-haste/contao'),
                'pct_megamenu' => (\dirname(__DIR__, 4).'/system/modules/pct_megamenu'),
                'pct_theme_updater' => (\dirname(__DIR__, 4).'/system/modules/pct_theme_updater'),
                'pct_themer' => (\dirname(__DIR__, 4).'/system/modules/pct_themer'),
                'pct_autogrid' => (\dirname(__DIR__, 4).'/system/modules/pct_autogrid'),
                'pct_customelements' => (\dirname(__DIR__, 4).'/system/modules/pct_customelements'),
                'ContaoNewsBundle' => (\dirname(__DIR__, 4).'/vendor/contao/news-bundle/contao'),
                'Terminal42MultipageFormsBundle' => (\dirname(__DIR__, 4).'/vendor/terminal42/contao-mp_forms/contao'),
                'pct_frontend_quickedit' => (\dirname(__DIR__, 4).'/system/modules/pct_frontend_quickedit'),
                'pct_revolutionslider' => (\dirname(__DIR__, 4).'/system/modules/pct_revolutionslider'),
                'ContaoListingBundle' => (\dirname(__DIR__, 4).'/vendor/contao/listing-bundle/contao'),
                'pct_privacy_manager' => (\dirname(__DIR__, 4).'/system/modules/pct_privacy_manager'),
                'ContaoCalendarBundle' => (\dirname(__DIR__, 4).'/vendor/contao/calendar-bundle/contao'),
                'ContaoNewsletterBundle' => (\dirname(__DIR__, 4).'/vendor/contao/newsletter-bundle/contao'),
                'pct_theme_settings' => (\dirname(__DIR__, 4).'/system/modules/pct_theme_settings'),
                'pct_customelements_plugin_customcatalog' => (\dirname(__DIR__, 4).'/system/modules/pct_customelements_plugin_customcatalog'),
                'pct_iconpicker' => (\dirname(__DIR__, 4).'/system/modules/pct_iconpicker'),
                'pct_theme_templates' => (\dirname(__DIR__, 4).'/system/modules/pct_theme_templates'),
                'ContaoCommentsBundle' => (\dirname(__DIR__, 4).'/vendor/contao/comments-bundle/contao'),
                'pct_customcatalog_cc_hs4y_salzburg' => (\dirname(__DIR__, 4).'/system/modules/pct_customcatalog_cc_hs4y_salzburg'),
            ],
            'console.command.ids' => [

            ],
        ];
    }
}
