<div class="field_wrapper">
<?php // include spectrum colorpicker: https://bgrins.github.io/spectrum/
\Contao\ArrayUtil::arrayInsert($GLOBALS['TL_CSS'],0, array(PCT_THEMER_PATH.'/assets/js/spectrum/spectrum.css')); 
$GLOBALS['TL_JAVASCRIPT'][] = PCT_THEMER_PATH.'/assets/js/spectrum/spectrum.js';

$strPreviewCssId = $this->unique_selector.'_colorpreview';
$strInputCssId = $this->unique_selector.'_color';

$objTD = new \PCT\ThemeDesigner;

// get the field definition
$arrField = $objTD->findByName($this->selector);
$strDefault = $arrField['default'];

if(!$this->value)
{
	$this->value = $strDefault;
}

?>

<?php if ($this->label): ?>
<label for="ctrl_<?= $this->id ?>"<?php if ($this->class): ?> class="<?= $this->class ?>"<?php endif; ?>></label>
<?php endif; ?>

<?php if($this->description):?>
<div class="description">
	<i class="fa fa-info"></i>
	<div class="description-content">
		<?= $this->description; ?>
	</div>
</div>
<?php endif; ?>

<!-- color preview -->
<div id="<?= $strPreviewCssId; ?>" class="colorpicker_preview"></div>
<!-- color text input -->
<input type='text' value='<?= $this->value; ?>' id="<?= $strInputCssId; ?>" class="colorpicker_color_input">

<input data-td_selector="<?= $this->selector; ?>" type="<?= $this->type ?>" data-td_counter="<?= $this->counter; ?>" name="<?= $this->name ?>" id="ctrl_<?= $this->id ?>" class="text colorpicker <?php if ($this->hideInput) echo ' password'; ?><?php if ($this->class) echo ' ' . $this->class; ?>" value="<?= \Contao\StringUtil::specialchars($this->value) ?>"<?= $this->getAttributes() ?>>

<script>
/* <![CDATA[ */

jQuery(document).ready(function() 
{
	/**
	 * Colorpicker
	 */
	var elem = jQuery('input[data-td_selector="<?= $this->selector; ?>"].colorpicker');
	elem.spectrum(
	{
		color: '<?= $this->value; ?>',
		showInput: true,
		showAlpha: true,
		allowEmpty:true,
		showPalette: true,
		chooseText: "Set",
		showInitial:true,
		showSelectionPalette:false,
		preferredFormat: "hex",
		palette: [
        	['#ffffff', '#1cbb9b', '#55add3', '#2b82c9', '#9164b7', '#475677'],
			['#000000', '#01a280', '#3e8fba', '#2a69b0', '#553984', '#28314e'],
			['#f8db65', '#faa026', '#ec6b56', '#e24939', '#a38f84', '#efefef'],
			['#fac51f', '#f67936', '#d14840', '#b8312e', '#75706d', '#d1d4d9'],
			['#e6e6e6', '#dadada', '#cdcdcd', '#b4b4b4', '#9a9a9a', '#747474'],
			['#595959', '#3e3e3e', '#303030', '#212121', '#131313','#050505']

		],
		
		// palettes
		
		showPaletteOnly: false,
		togglePaletteOnly: false,
		togglePaletteMoreText: 'more',
		togglePaletteLessText: 'less',

		selectionPalette: [
	        ['black', 'white', 'blanchedalmond'],
	        ['rgba(0,0,0,0);']
		],
		//palette: [
	    //    ['black', 'white', 'blanchedalmond'],
	    //    ['rgb(255, 128, 0);', 'hsv 100 70 50', 'lightyellow']
		//]
	});
	
	// trigger change event
	elem.change(function(event,params)
	{
		var objValue = jQuery(event.target).spectrum('get');
		
		<?php if($this->counter > 0): ?>
		//jQuery('input[data-td_selector="<?= $this->selector; ?>"]').spectrum('set',objValue);
		<?php endif; ?>
		
		var value = '';
		
		// no alpha
		if(objValue._a >= 1)
		{
			value = objValue.toHexString();
		}
		else
		{
			value = objValue.toRgbString();
		}
		
		if(params.selected)
		{
			value = params.selected;
		}
		
		// update preview
		jQuery('#<?= $strPreviewCssId; ?>').css('background-color',value);
		
		// update input
		jQuery('#<?= $strInputCssId; ?>').val(value);
		
		// update input
		jQuery('input[data-td_selector="<?= $this->selector; ?>"]').attr('value',value);
		
		// value convertion here
		ThemeDesigner.sendValue(event.target.name,value);
	});
	
	/**
	 * Color input
	 */
	// default color
	jQuery('#<?= $strPreviewCssId; ?>').css('background-color','<?= $this->value; ?>');
	
	// key listener	
	jQuery('input#<?= $strInputCssId; ?>').on('keyup',function(event)
	{
		if(event.target.value.length > 3)
		{
			elem.spectrum('set',event.target.value);
			elem.trigger('change',{'selected':event.target.value});
		}	
	});
		
	// catch onToggleSwitch event of the parent switch
	jQuery('[data-name="<?= $this->switch; ?>"]').on('ThemeDesigner.onToggleSwitch',function(event,params)
	{
		var value = '';
		
		if(params.status < 1)
		{
			value = '';
		}
		else
		{
			value = jQuery('input[data-td_selector="<?= $this->selector; ?>"][data-td_counter="<?= $this->counter; ?>"]').attr('value');
		
			// update the other colorpickers
			jQuery('input[data-td_selector="<?= $this->selector; ?>"]').attr('value',value);
		}
		
		// send new value
		ThemeDesigner.sendValue('<?= $this->selector; ?>',value);
		
	});
	
	/**
	 * Eventlistener: ThemeDesigner.onSelector
	 * triggered when the ThemeDesigner triggers a selector
	 * @param object	The jquery event object
	 * @param object	The parameter object
	 * 
	 * objParams:
	 * {name,value}
	 */
	elem.on('ThemeDesigner.onSelector',function(event,objParams)
	{
		var value = objParams.value;
		
		// set new value
		jQuery(event.target).spectrum('set',value);
		
		// trigger the change event
		elem.trigger('change',{});
	});
	
});

/* ]]> */
</script>
<br class="clear"></div>